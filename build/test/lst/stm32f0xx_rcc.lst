   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_rcc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.data.APBAHBPrescTable,"aw",%progbits
  18              		.align	2
  21              	APBAHBPrescTable:
  22 0000 00       		.byte	0
  23 0001 00       		.byte	0
  24 0002 00       		.byte	0
  25 0003 00       		.byte	0
  26 0004 01       		.byte	1
  27 0005 02       		.byte	2
  28 0006 03       		.byte	3
  29 0007 04       		.byte	4
  30 0008 01       		.byte	1
  31 0009 02       		.byte	2
  32 000a 03       		.byte	3
  33 000b 04       		.byte	4
  34 000c 06       		.byte	6
  35 000d 07       		.byte	7
  36 000e 08       		.byte	8
  37 000f 09       		.byte	9
  38              		.section	.text.RCC_DeInit,"ax",%progbits
  39              		.align	2
  40              		.global	RCC_DeInit
  41              		.code	16
  42              		.thumb_func
  44              	RCC_DeInit:
  45              	.LFB32:
  46              		.file 1 "../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c"
   1:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
   2:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ******************************************************************************
   3:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @file    stm32f0xx_rcc.c
   4:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @author  MCD Application Team
   5:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @version V1.0.0
   6:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @date    23-March-2012
   7:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           + Peripheral clocks configuration
  12:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           + Interrupts and flags management
  13:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  14:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  @verbatim
  15:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  16:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
  17:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                         ##### RCC specific features #####
  18:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
  19:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] After reset the device is running from HSI (8 MHz) with Flash 0 WS, 
  20:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          all peripherals are off except internal SRAM, Flash and SWD.
  21:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  22:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              all peripherals mapped on these busses are running at HSI speed.
  23:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) The clock for all peripherals is switched off, except the SRAM and FLASH.
  24:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) All GPIOs are in input floating state, except the SWD pins which
  25:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              are assigned to be used for debug purpose.
  26:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] Once the device started from reset, the user application has to:
  27:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Configure the clock source to be used to drive the System clock
  28:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (if the application needs higher frequency/performance)
  29:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Configure the System clock frequency and Flash settings
  30:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Configure the AHB and APB busses prescalers
  31:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Enable the clock for the peripheral(s) to be used
  32:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Configure the clock source(s) for peripherals which clocks are not
  33:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              derived from the System clock (ADC, CEC, I2C, USART, RTC and IWDG)
  34:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  35:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  @endverbatim
  36:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
  37:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ******************************************************************************
  38:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @attention
  39:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  40:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  41:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  42:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  43:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * You may not use this file except in compliance with the License.
  44:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * You may obtain a copy of the License at:
  45:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  46:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  47:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  48:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  49:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  50:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  51:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * See the License for the specific language governing permissions and
  52:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * limitations under the License.
  53:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  54:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ******************************************************************************
  55:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
  56:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  57:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  58:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #include "stm32f0xx_rcc.h"
  59:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  60:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  61:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
  62:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
  63:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  64:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC 
  65:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief RCC driver modules
  66:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
  67:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */ 
  68:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  69:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  70:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  71:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  72:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* ---------------------- RCC registers mask -------------------------------- */
  73:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* RCC Flag Mask */
  74:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
  75:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  76:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* CR register byte 2 (Bits[23:16]) base address */
  77:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define CR_BYTE2_ADDRESS          ((uint32_t)0x40021002)
  78:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  79:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* CFGR register byte 3 (Bits[31:23]) base address */
  80:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define CFGR_BYTE3_ADDRESS        ((uint32_t)0x40021007)
  81:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  82:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* CIR register byte 1 (Bits[15:8]) base address */
  83:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define CIR_BYTE1_ADDRESS         ((uint32_t)0x40021009)
  84:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  85:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* CIR register byte 2 (Bits[23:16]) base address */
  86:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x4002100A)
  87:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  88:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
  89:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
  90:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
  91:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  92:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
  93:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
  94:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  95:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Private_Functions
  96:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
  97:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
  98:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  99:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 100:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 101:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *
 102:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @verbatim
 103:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
 104:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ##### Internal-external clocks, PLL, CSS and MCO configuration functions #####
 105:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
 106:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] This section provides functions allowing to configure the internal/external clocks,
 107:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          PLL, CSS and MCO.
 108:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly 
 109:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              or through the PLL as System clock source.
 110:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              The HSI clock can be used also to clock the USART, I2C and CEC peripherals.
 111:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) HSI14 (high-speed internal for ADC), 14 MHz factory-trimmed RC used to clock
 112:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              the ADC peripheral.
 113:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) LSI (low-speed internal), 40 KHz low consumption RC used as IWDG and/or RTC
 114:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              clock source.
 115:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) HSE (high-speed external), 4 to 32 MHz crystal oscillator used directly or
 116:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 117:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source. 
 118:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              LSE can be used also to clock the USART and CEC peripherals.   
 119:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) PLL (clocked by HSI or HSE), for System clock.
 120:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) CSS (Clock security system), once enabled and if a HSE clock failure occurs 
 121:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (HSE used directly or through PLL as System clock source), the System clock
 122:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              is automatically switched to HSI and an interrupt is generated if enabled. 
 123:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              The interrupt is linked to the Cortex-M0 NMI (Non-Maskable Interrupt) 
 124:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              exception vector.   
 125:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) MCO (microcontroller clock output), used to output SYSCLK, HSI, HSI14, LSI,
 126:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              HSE, LSE or PLL (divided by 2) clock on PA8 pin.
 127:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 128:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @endverbatim
 129:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
 130:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 131:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 132:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 133:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 134:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 135:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      HSI ON and used as system clock source 
 136:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      HSI14, HSE and PLL OFF
 137:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      AHB, APB prescaler set to 1.
 138:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      CSS and MCO OFF
 139:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      All interrupts disabled
 140:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   However, this function doesn't modify the configuration of the
 141:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      Peripheral clocks
 142:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      LSI, LSE and RTC clocks
 143:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  None
 144:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 145:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 146:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_DeInit(void)
 147:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
  47              		.loc 1 147 0
  48              		.cfi_startproc
  49 0000 80B5     		push	{r7, lr}
  50              		.cfi_def_cfa_offset 8
  51              		.cfi_offset 7, -8
  52              		.cfi_offset 14, -4
  53 0002 00AF     		add	r7, sp, #0
  54              		.cfi_def_cfa_register 7
 148:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set HSION bit */
 149:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  55              		.loc 1 149 0
  56 0004 1A4B     		ldr	r3, .L2
  57 0006 1A4A     		ldr	r2, .L2
  58 0008 1268     		ldr	r2, [r2]
  59 000a 0121     		mov	r1, #1
  60 000c 0A43     		orr	r2, r1
  61 000e 1A60     		str	r2, [r3]
 150:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 151:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
 152:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FFB80C;
  62              		.loc 1 152 0
  63 0010 174B     		ldr	r3, .L2
  64 0012 174A     		ldr	r2, .L2
  65 0014 5168     		ldr	r1, [r2, #4]
  66 0016 174A     		ldr	r2, .L2+4
  67 0018 0A40     		and	r2, r1
  68 001a 5A60     		str	r2, [r3, #4]
 153:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 154:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 155:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  69              		.loc 1 155 0
  70 001c 144B     		ldr	r3, .L2
  71 001e 144A     		ldr	r2, .L2
  72 0020 1168     		ldr	r1, [r2]
  73 0022 154A     		ldr	r2, .L2+8
  74 0024 0A40     		and	r2, r1
  75 0026 1A60     		str	r2, [r3]
 156:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 157:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset HSEBYP bit */
 158:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  76              		.loc 1 158 0
  77 0028 114B     		ldr	r3, .L2
  78 002a 114A     		ldr	r2, .L2
  79 002c 1168     		ldr	r1, [r2]
  80 002e 134A     		ldr	r2, .L2+12
  81 0030 0A40     		and	r2, r1
  82 0032 1A60     		str	r2, [r3]
 159:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 160:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 161:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFF;
  83              		.loc 1 161 0
  84 0034 0E4B     		ldr	r3, .L2
  85 0036 0E4A     		ldr	r2, .L2
  86 0038 5168     		ldr	r1, [r2, #4]
  87 003a 114A     		ldr	r2, .L2+16
  88 003c 0A40     		and	r2, r1
  89 003e 5A60     		str	r2, [r3, #4]
 162:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 163:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset PREDIV1[3:0] bits */
 164:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
  90              		.loc 1 164 0
  91 0040 0B4B     		ldr	r3, .L2
  92 0042 0B4A     		ldr	r2, .L2
  93 0044 D26A     		ldr	r2, [r2, #44]
  94 0046 0F21     		mov	r1, #15
  95 0048 8A43     		bic	r2, r1
  96 004a DA62     		str	r2, [r3, #44]
 165:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 166:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
 167:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
  97              		.loc 1 167 0
  98 004c 084B     		ldr	r3, .L2
  99 004e 084A     		ldr	r2, .L2
 100 0050 116B     		ldr	r1, [r2, #48]
 101 0052 0C4A     		ldr	r2, .L2+20
 102 0054 0A40     		and	r2, r1
 103 0056 1A63     		str	r2, [r3, #48]
 168:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 169:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset HSI14 bit */
 170:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 104              		.loc 1 170 0
 105 0058 054B     		ldr	r3, .L2
 106 005a 054A     		ldr	r2, .L2
 107 005c 526B     		ldr	r2, [r2, #52]
 108 005e 0121     		mov	r1, #1
 109 0060 8A43     		bic	r2, r1
 110 0062 5A63     		str	r2, [r3, #52]
 171:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 172:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Disable all interrupts */
 173:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CIR = 0x00000000;
 111              		.loc 1 173 0
 112 0064 024B     		ldr	r3, .L2
 113 0066 0022     		mov	r2, #0
 114 0068 9A60     		str	r2, [r3, #8]
 174:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 115              		.loc 1 174 0
 116 006a BD46     		mov	sp, r7
 117              		@ sp needed
 118 006c 80BD     		pop	{r7, pc}
 119              	.L3:
 120 006e C046     		.align	2
 121              	.L2:
 122 0070 00100240 		.word	1073876992
 123 0074 0CB8FFF8 		.word	-117458932
 124 0078 FFFFF6FE 		.word	-17367041
 125 007c FFFFFBFF 		.word	-262145
 126 0080 FFFFC0FF 		.word	-4128769
 127 0084 ACFEFFFF 		.word	-340
 128              		.cfi_endproc
 129              	.LFE32:
 131              		.section	.rodata
 132              		.align	2
 133              	.LC0:
 134 0000 2E2E2F2E 		.ascii	"../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f"
 134      2E2F6578 
 134      742D7372 
 134      632F5354 
 134      4D333246 
 135 0033 3078785F 		.ascii	"0xx_rcc.c\000"
 135      7263632E 
 135      6300
 136 003d 000000   		.section	.text.RCC_HSEConfig,"ax",%progbits
 137              		.align	2
 138              		.global	RCC_HSEConfig
 139              		.code	16
 140              		.thumb_func
 142              	RCC_HSEConfig:
 143              	.LFB33:
 175:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 176:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 177:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 178:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 179:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           software should wait on HSERDY flag to be set indicating that HSE clock
 180:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           is stable and can be used to clock the PLL and/or system clock.
 181:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *  @note    HSE state can not be changed if it is used directly or through the
 182:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           PLL as system clock. In this case, you have to select another source
 183:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           of the system clock then change the HSE state (ex. disable it).
 184:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *  @note    The HSE is stopped by hardware when entering STOP and STANDBY modes.
 185:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function resets the CSSON bit, so if the Clock security system(CSS)
 186:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 187:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         function.
 188:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param RCC_HSE: specifies the new state of the HSE.
 189:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *   This parameter can be one of the following values:
 190:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 191:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                       6 HSE oscillator clock cycles.
 192:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_HSE_ON: turn ON the HSE oscillator
 193:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 194:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 195:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 196:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 197:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 144              		.loc 1 197 0
 145              		.cfi_startproc
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 154 0006 021C     		mov	r2, r0
 155 0008 FB1D     		add	r3, r7, #7
 156 000a 1A70     		strb	r2, [r3]
 198:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 199:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 157              		.loc 1 199 0
 158 000c FB1D     		add	r3, r7, #7
 159 000e 1B78     		ldrb	r3, [r3]
 160 0010 002B     		cmp	r3, #0
 161 0012 0CD0     		beq	.L5
 162              		.loc 1 199 0 is_stmt 0 discriminator 1
 163 0014 FB1D     		add	r3, r7, #7
 164 0016 1B78     		ldrb	r3, [r3]
 165 0018 012B     		cmp	r3, #1
 166 001a 08D0     		beq	.L5
 167 001c FB1D     		add	r3, r7, #7
 168 001e 1B78     		ldrb	r3, [r3]
 169 0020 052B     		cmp	r3, #5
 170 0022 04D0     		beq	.L5
 171 0024 074B     		ldr	r3, .L6
 172 0026 181C     		mov	r0, r3
 173 0028 C721     		mov	r1, #199
 174 002a FFF7FEFF 		bl	assert_failed
 175              	.L5:
 200:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 201:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 202:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 176              		.loc 1 202 0 is_stmt 1
 177 002e 064B     		ldr	r3, .L6+4
 178 0030 0022     		mov	r2, #0
 179 0032 1A70     		strb	r2, [r3]
 203:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 204:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 205:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 180              		.loc 1 205 0
 181 0034 044B     		ldr	r3, .L6+4
 182 0036 FA1D     		add	r2, r7, #7
 183 0038 1278     		ldrb	r2, [r2]
 184 003a 1A70     		strb	r2, [r3]
 206:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 207:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 185              		.loc 1 207 0
 186 003c BD46     		mov	sp, r7
 187 003e 02B0     		add	sp, sp, #8
 188              		@ sp needed
 189 0040 80BD     		pop	{r7, pc}
 190              	.L7:
 191 0042 C046     		.align	2
 192              	.L6:
 193 0044 00000000 		.word	.LC0
 194 0048 02100240 		.word	1073876994
 195              		.cfi_endproc
 196              	.LFE33:
 198              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 199              		.align	2
 200              		.global	RCC_WaitForHSEStartUp
 201              		.code	16
 202              		.thumb_func
 204              	RCC_WaitForHSEStartUp:
 205              	.LFB34:
 208:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 209:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 210:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Waits for HSE start-up.
 211:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function waits on HSERDY flag to be set and return SUCCESS if 
 212:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 213:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 214:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f0xx.h file. You can tailor it depending
 215:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         on the HSE crystal used in your application.
 216:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         - The HSE is stopped by hardware when entering STOP and STANDBY modes.
 217:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  None
 218:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 219:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 220:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 221:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 222:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 223:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 206              		.loc 1 223 0
 207              		.cfi_startproc
 208 0000 90B5     		push	{r4, r7, lr}
 209              		.cfi_def_cfa_offset 12
 210              		.cfi_offset 4, -12
 211              		.cfi_offset 7, -8
 212              		.cfi_offset 14, -4
 213 0002 83B0     		sub	sp, sp, #12
 214              		.cfi_def_cfa_offset 24
 215 0004 00AF     		add	r7, sp, #0
 216              		.cfi_def_cfa_register 7
 224:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 217              		.loc 1 224 0
 218 0006 0023     		mov	r3, #0
 219 0008 3B60     		str	r3, [r7]
 225:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ErrorStatus status = ERROR;
 220              		.loc 1 225 0
 221 000a FB1D     		add	r3, r7, #7
 222 000c 0022     		mov	r2, #0
 223 000e 1A70     		strb	r2, [r3]
 226:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   FlagStatus HSEStatus = RESET;
 224              		.loc 1 226 0
 225 0010 BB1D     		add	r3, r7, #6
 226 0012 0022     		mov	r2, #0
 227 0014 1A70     		strb	r2, [r3]
 228              	.L10:
 227:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 228:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Wait till HSE is ready and if timeout is reached exit */
 229:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   do
 230:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 231:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 229              		.loc 1 231 0 discriminator 1
 230 0016 BC1D     		add	r4, r7, #6
 231 0018 1120     		mov	r0, #17
 232 001a FFF7FEFF 		bl	RCC_GetFlagStatus
 233 001e 031C     		mov	r3, r0
 234 0020 2370     		strb	r3, [r4]
 232:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     StartUpCounter++;  
 235              		.loc 1 232 0 discriminator 1
 236 0022 3B68     		ldr	r3, [r7]
 237 0024 0133     		add	r3, r3, #1
 238 0026 3B60     		str	r3, [r7]
 233:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 239              		.loc 1 233 0 discriminator 1
 240 0028 3A68     		ldr	r2, [r7]
 241 002a A023     		mov	r3, #160
 242 002c DB00     		lsl	r3, r3, #3
 243 002e 9A42     		cmp	r2, r3
 244 0030 03D0     		beq	.L9
 245 0032 BB1D     		add	r3, r7, #6
 246 0034 1B78     		ldrb	r3, [r3]
 247 0036 002B     		cmp	r3, #0
 248 0038 EDD0     		beq	.L10
 249              	.L9:
 234:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 235:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 250              		.loc 1 235 0
 251 003a 1120     		mov	r0, #17
 252 003c FFF7FEFF 		bl	RCC_GetFlagStatus
 253 0040 031C     		mov	r3, r0
 254 0042 002B     		cmp	r3, #0
 255 0044 03D0     		beq	.L11
 236:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 237:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     status = SUCCESS;
 256              		.loc 1 237 0
 257 0046 FB1D     		add	r3, r7, #7
 258 0048 0122     		mov	r2, #1
 259 004a 1A70     		strb	r2, [r3]
 260 004c 02E0     		b	.L12
 261              	.L11:
 238:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 239:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 240:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 241:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     status = ERROR;
 262              		.loc 1 241 0
 263 004e FB1D     		add	r3, r7, #7
 264 0050 0022     		mov	r2, #0
 265 0052 1A70     		strb	r2, [r3]
 266              	.L12:
 242:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }  
 243:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return (status);
 267              		.loc 1 243 0
 268 0054 FB1D     		add	r3, r7, #7
 269 0056 1B78     		ldrb	r3, [r3]
 244:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 270              		.loc 1 244 0
 271 0058 181C     		mov	r0, r3
 272 005a BD46     		mov	sp, r7
 273 005c 03B0     		add	sp, sp, #12
 274              		@ sp needed
 275 005e 90BD     		pop	{r4, r7, pc}
 276              		.cfi_endproc
 277              	.LFE34:
 279              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 280              		.align	2
 281              		.global	RCC_AdjustHSICalibrationValue
 282              		.code	16
 283              		.thumb_func
 285              	RCC_AdjustHSICalibrationValue:
 286              	.LFB35:
 245:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 246:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 247:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 248:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 249:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 250:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         Refer to the Application Note AN3300 for more details on how to  
 251:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         calibrate the HSI.
 252:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
 253:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 254:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 255:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 256:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 257:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 287              		.loc 1 257 0
 288              		.cfi_startproc
 289 0000 80B5     		push	{r7, lr}
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 7, -8
 292              		.cfi_offset 14, -4
 293 0002 84B0     		sub	sp, sp, #16
 294              		.cfi_def_cfa_offset 24
 295 0004 00AF     		add	r7, sp, #0
 296              		.cfi_def_cfa_register 7
 297 0006 021C     		mov	r2, r0
 298 0008 FB1D     		add	r3, r7, #7
 299 000a 1A70     		strb	r2, [r3]
 258:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 300              		.loc 1 258 0
 301 000c 0023     		mov	r3, #0
 302 000e FB60     		str	r3, [r7, #12]
 259:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 260:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 261:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
 303              		.loc 1 261 0
 304 0010 FB1D     		add	r3, r7, #7
 305 0012 1B78     		ldrb	r3, [r3]
 306 0014 1F2B     		cmp	r3, #31
 307 0016 06D9     		bls	.L15
 308              		.loc 1 261 0 is_stmt 0 discriminator 1
 309 0018 0C4A     		ldr	r2, .L16
 310 001a 0623     		mov	r3, #6
 311 001c FF33     		add	r3, r3, #255
 312 001e 101C     		mov	r0, r2
 313 0020 191C     		mov	r1, r3
 314 0022 FFF7FEFF 		bl	assert_failed
 315              	.L15:
 262:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 263:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CR;
 316              		.loc 1 263 0 is_stmt 1
 317 0026 0A4B     		ldr	r3, .L16+4
 318 0028 1B68     		ldr	r3, [r3]
 319 002a FB60     		str	r3, [r7, #12]
 264:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 265:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 266:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 320              		.loc 1 266 0
 321 002c FB68     		ldr	r3, [r7, #12]
 322 002e F822     		mov	r2, #248
 323 0030 9343     		bic	r3, r2
 324 0032 FB60     		str	r3, [r7, #12]
 267:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 268:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 269:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 325              		.loc 1 269 0
 326 0034 FB1D     		add	r3, r7, #7
 327 0036 1B78     		ldrb	r3, [r3]
 328 0038 DB00     		lsl	r3, r3, #3
 329 003a FA68     		ldr	r2, [r7, #12]
 330 003c 1343     		orr	r3, r2
 331 003e FB60     		str	r3, [r7, #12]
 270:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 271:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 272:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR = tmpreg;
 332              		.loc 1 272 0
 333 0040 034B     		ldr	r3, .L16+4
 334 0042 FA68     		ldr	r2, [r7, #12]
 335 0044 1A60     		str	r2, [r3]
 273:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 336              		.loc 1 273 0
 337 0046 BD46     		mov	sp, r7
 338 0048 04B0     		add	sp, sp, #16
 339              		@ sp needed
 340 004a 80BD     		pop	{r7, pc}
 341              	.L17:
 342              		.align	2
 343              	.L16:
 344 004c 00000000 		.word	.LC0
 345 0050 00100240 		.word	1073876992
 346              		.cfi_endproc
 347              	.LFE35:
 349              		.section	.text.RCC_HSICmd,"ax",%progbits
 350              		.align	2
 351              		.global	RCC_HSICmd
 352              		.code	16
 353              		.thumb_func
 355              	RCC_HSICmd:
 356              	.LFB36:
 274:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 275:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 276:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 277:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     After enabling the HSI, the application software should wait on 
 278:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           HSIRDY flag to be set indicating that HSI clock is stable and can
 279:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           be used to clock the PLL and/or system clock.
 280:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     HSI can not be stopped if it is used directly or through the PLL
 281:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           as system clock. In this case, you have to select another source 
 282:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           of the system clock then stop the HSI.
 283:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     The HSI is stopped by hardware when entering STOP and STANDBY modes.
 284:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the HSI.
 285:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 286:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 287:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         clock cycles.
 288:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 289:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 290:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 291:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 357              		.loc 1 291 0
 358              		.cfi_startproc
 359 0000 80B5     		push	{r7, lr}
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 7, -8
 362              		.cfi_offset 14, -4
 363 0002 82B0     		sub	sp, sp, #8
 364              		.cfi_def_cfa_offset 16
 365 0004 00AF     		add	r7, sp, #0
 366              		.cfi_def_cfa_register 7
 367 0006 021C     		mov	r2, r0
 368 0008 FB1D     		add	r3, r7, #7
 369 000a 1A70     		strb	r2, [r3]
 292:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 293:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 370              		.loc 1 293 0
 371 000c FB1D     		add	r3, r7, #7
 372 000e 1B78     		ldrb	r3, [r3]
 373 0010 002B     		cmp	r3, #0
 374 0012 0AD0     		beq	.L19
 375              		.loc 1 293 0 is_stmt 0 discriminator 1
 376 0014 FB1D     		add	r3, r7, #7
 377 0016 1B78     		ldrb	r3, [r3]
 378 0018 012B     		cmp	r3, #1
 379 001a 06D0     		beq	.L19
 380 001c 0D4A     		ldr	r2, .L22
 381 001e 2623     		mov	r3, #38
 382 0020 FF33     		add	r3, r3, #255
 383 0022 101C     		mov	r0, r2
 384 0024 191C     		mov	r1, r3
 385 0026 FFF7FEFF 		bl	assert_failed
 386              	.L19:
 294:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 295:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 387              		.loc 1 295 0 is_stmt 1
 388 002a FB1D     		add	r3, r7, #7
 389 002c 1B78     		ldrb	r3, [r3]
 390 002e 002B     		cmp	r3, #0
 391 0030 06D0     		beq	.L20
 296:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 297:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR |= RCC_CR_HSION;
 392              		.loc 1 297 0
 393 0032 094B     		ldr	r3, .L22+4
 394 0034 084A     		ldr	r2, .L22+4
 395 0036 1268     		ldr	r2, [r2]
 396 0038 0121     		mov	r1, #1
 397 003a 0A43     		orr	r2, r1
 398 003c 1A60     		str	r2, [r3]
 399 003e 05E0     		b	.L18
 400              	.L20:
 298:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 299:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 300:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 301:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR &= ~RCC_CR_HSION;
 401              		.loc 1 301 0
 402 0040 054B     		ldr	r3, .L22+4
 403 0042 054A     		ldr	r2, .L22+4
 404 0044 1268     		ldr	r2, [r2]
 405 0046 0121     		mov	r1, #1
 406 0048 8A43     		bic	r2, r1
 407 004a 1A60     		str	r2, [r3]
 408              	.L18:
 302:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 303:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 409              		.loc 1 303 0
 410 004c BD46     		mov	sp, r7
 411 004e 02B0     		add	sp, sp, #8
 412              		@ sp needed
 413 0050 80BD     		pop	{r7, pc}
 414              	.L23:
 415 0052 C046     		.align	2
 416              	.L22:
 417 0054 00000000 		.word	.LC0
 418 0058 00100240 		.word	1073876992
 419              		.cfi_endproc
 420              	.LFE36:
 422              		.section	.text.RCC_AdjustHSI14CalibrationValue,"ax",%progbits
 423              		.align	2
 424              		.global	RCC_AdjustHSI14CalibrationValue
 425              		.code	16
 426              		.thumb_func
 428              	RCC_AdjustHSI14CalibrationValue:
 429              	.LFB37:
 304:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 305:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 306:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator for ADC (HSI14) 
 307:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         calibration value.
 308:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 309:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 310:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         Refer to the Application Note AN3300 for more details on how to  
 311:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         calibrate the HSI14.
 312:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  HSI14CalibrationValue: specifies the HSI14 calibration trimming value.
 313:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 314:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 315:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 316:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_AdjustHSI14CalibrationValue(uint8_t HSI14CalibrationValue)
 317:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 430              		.loc 1 317 0
 431              		.cfi_startproc
 432 0000 80B5     		push	{r7, lr}
 433              		.cfi_def_cfa_offset 8
 434              		.cfi_offset 7, -8
 435              		.cfi_offset 14, -4
 436 0002 84B0     		sub	sp, sp, #16
 437              		.cfi_def_cfa_offset 24
 438 0004 00AF     		add	r7, sp, #0
 439              		.cfi_def_cfa_register 7
 440 0006 021C     		mov	r2, r0
 441 0008 FB1D     		add	r3, r7, #7
 442 000a 1A70     		strb	r2, [r3]
 318:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 443              		.loc 1 318 0
 444 000c 0023     		mov	r3, #0
 445 000e FB60     		str	r3, [r7, #12]
 319:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 320:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 321:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
 446              		.loc 1 321 0
 447 0010 FB1D     		add	r3, r7, #7
 448 0012 1B78     		ldrb	r3, [r3]
 449 0014 1F2B     		cmp	r3, #31
 450 0016 06D9     		bls	.L25
 451              		.loc 1 321 0 is_stmt 0 discriminator 1
 452 0018 0C4A     		ldr	r2, .L26
 453 001a 4223     		mov	r3, #66
 454 001c FF33     		add	r3, r3, #255
 455 001e 101C     		mov	r0, r2
 456 0020 191C     		mov	r1, r3
 457 0022 FFF7FEFF 		bl	assert_failed
 458              	.L25:
 322:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 323:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CR2;
 459              		.loc 1 323 0 is_stmt 1
 460 0026 0A4B     		ldr	r3, .L26+4
 461 0028 5B6B     		ldr	r3, [r3, #52]
 462 002a FB60     		str	r3, [r7, #12]
 324:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 325:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear HSI14TRIM[4:0] bits */
 326:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CR2_HSI14TRIM;
 463              		.loc 1 326 0
 464 002c FB68     		ldr	r3, [r7, #12]
 465 002e F822     		mov	r2, #248
 466 0030 9343     		bic	r3, r2
 467 0032 FB60     		str	r3, [r7, #12]
 327:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 328:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
 329:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 468              		.loc 1 329 0
 469 0034 FB1D     		add	r3, r7, #7
 470 0036 1B78     		ldrb	r3, [r3]
 471 0038 DB00     		lsl	r3, r3, #3
 472 003a FA68     		ldr	r2, [r7, #12]
 473 003c 1343     		orr	r3, r2
 474 003e FB60     		str	r3, [r7, #12]
 330:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 331:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 332:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR2 = tmpreg;
 475              		.loc 1 332 0
 476 0040 034B     		ldr	r3, .L26+4
 477 0042 FA68     		ldr	r2, [r7, #12]
 478 0044 5A63     		str	r2, [r3, #52]
 333:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 479              		.loc 1 333 0
 480 0046 BD46     		mov	sp, r7
 481 0048 04B0     		add	sp, sp, #16
 482              		@ sp needed
 483 004a 80BD     		pop	{r7, pc}
 484              	.L27:
 485              		.align	2
 486              	.L26:
 487 004c 00000000 		.word	.LC0
 488 0050 00100240 		.word	1073876992
 489              		.cfi_endproc
 490              	.LFE37:
 492              		.section	.text.RCC_HSI14Cmd,"ax",%progbits
 493              		.align	2
 494              		.global	RCC_HSI14Cmd
 495              		.code	16
 496              		.thumb_func
 498              	RCC_HSI14Cmd:
 499              	.LFB38:
 334:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 335:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 336:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator for ADC (HSI14).
 337:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     After enabling the HSI14, the application software should wait on 
 338:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           HSIRDY flag to be set indicating that HSI clock is stable and can
 339:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           be used to clock the ADC.
 340:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     The HSI14 is stopped by hardware when entering STOP and STANDBY modes.
 341:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the HSI14.
 342:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 343:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   When the HSI14 is stopped, HSI14RDY flag goes low after 6 HSI14 oscillator
 344:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         clock cycles.
 345:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 346:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 347:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSI14Cmd(FunctionalState NewState)
 348:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 500              		.loc 1 348 0
 501              		.cfi_startproc
 502 0000 80B5     		push	{r7, lr}
 503              		.cfi_def_cfa_offset 8
 504              		.cfi_offset 7, -8
 505              		.cfi_offset 14, -4
 506 0002 82B0     		sub	sp, sp, #8
 507              		.cfi_def_cfa_offset 16
 508 0004 00AF     		add	r7, sp, #0
 509              		.cfi_def_cfa_register 7
 510 0006 021C     		mov	r2, r0
 511 0008 FB1D     		add	r3, r7, #7
 512 000a 1A70     		strb	r2, [r3]
 349:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 350:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 513              		.loc 1 350 0
 514 000c FB1D     		add	r3, r7, #7
 515 000e 1B78     		ldrb	r3, [r3]
 516 0010 002B     		cmp	r3, #0
 517 0012 0AD0     		beq	.L29
 518              		.loc 1 350 0 is_stmt 0 discriminator 1
 519 0014 FB1D     		add	r3, r7, #7
 520 0016 1B78     		ldrb	r3, [r3]
 521 0018 012B     		cmp	r3, #1
 522 001a 06D0     		beq	.L29
 523 001c 0D4A     		ldr	r2, .L32
 524 001e AF23     		mov	r3, #175
 525 0020 5B00     		lsl	r3, r3, #1
 526 0022 101C     		mov	r0, r2
 527 0024 191C     		mov	r1, r3
 528 0026 FFF7FEFF 		bl	assert_failed
 529              	.L29:
 351:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 352:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 530              		.loc 1 352 0 is_stmt 1
 531 002a FB1D     		add	r3, r7, #7
 532 002c 1B78     		ldrb	r3, [r3]
 533 002e 002B     		cmp	r3, #0
 534 0030 06D0     		beq	.L30
 353:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 354:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 |= RCC_CR2_HSI14ON;
 535              		.loc 1 354 0
 536 0032 094B     		ldr	r3, .L32+4
 537 0034 084A     		ldr	r2, .L32+4
 538 0036 526B     		ldr	r2, [r2, #52]
 539 0038 0121     		mov	r1, #1
 540 003a 0A43     		orr	r2, r1
 541 003c 5A63     		str	r2, [r3, #52]
 542 003e 05E0     		b	.L28
 543              	.L30:
 355:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 356:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 357:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 358:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 &= ~RCC_CR2_HSI14ON;
 544              		.loc 1 358 0
 545 0040 054B     		ldr	r3, .L32+4
 546 0042 054A     		ldr	r2, .L32+4
 547 0044 526B     		ldr	r2, [r2, #52]
 548 0046 0121     		mov	r1, #1
 549 0048 8A43     		bic	r2, r1
 550 004a 5A63     		str	r2, [r3, #52]
 551              	.L28:
 359:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 360:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 552              		.loc 1 360 0
 553 004c BD46     		mov	sp, r7
 554 004e 02B0     		add	sp, sp, #8
 555              		@ sp needed
 556 0050 80BD     		pop	{r7, pc}
 557              	.L33:
 558 0052 C046     		.align	2
 559              	.L32:
 560 0054 00000000 		.word	.LC0
 561 0058 00100240 		.word	1073876992
 562              		.cfi_endproc
 563              	.LFE38:
 565              		.section	.text.RCC_HSI14ADCRequestCmd,"ax",%progbits
 566              		.align	2
 567              		.global	RCC_HSI14ADCRequestCmd
 568              		.code	16
 569              		.thumb_func
 571              	RCC_HSI14ADCRequestCmd:
 572              	.LFB39:
 361:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 362:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 363:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator request from ADC.
 364:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the HSI14 ADC request.
 365:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 366:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 367:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 368:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
 369:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 573              		.loc 1 369 0
 574              		.cfi_startproc
 575 0000 80B5     		push	{r7, lr}
 576              		.cfi_def_cfa_offset 8
 577              		.cfi_offset 7, -8
 578              		.cfi_offset 14, -4
 579 0002 82B0     		sub	sp, sp, #8
 580              		.cfi_def_cfa_offset 16
 581 0004 00AF     		add	r7, sp, #0
 582              		.cfi_def_cfa_register 7
 583 0006 021C     		mov	r2, r0
 584 0008 FB1D     		add	r3, r7, #7
 585 000a 1A70     		strb	r2, [r3]
 370:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 371:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 586              		.loc 1 371 0
 587 000c FB1D     		add	r3, r7, #7
 588 000e 1B78     		ldrb	r3, [r3]
 589 0010 002B     		cmp	r3, #0
 590 0012 0AD0     		beq	.L35
 591              		.loc 1 371 0 is_stmt 0 discriminator 1
 592 0014 FB1D     		add	r3, r7, #7
 593 0016 1B78     		ldrb	r3, [r3]
 594 0018 012B     		cmp	r3, #1
 595 001a 06D0     		beq	.L35
 596 001c 0D4A     		ldr	r2, .L38
 597 001e 7423     		mov	r3, #116
 598 0020 FF33     		add	r3, r3, #255
 599 0022 101C     		mov	r0, r2
 600 0024 191C     		mov	r1, r3
 601 0026 FFF7FEFF 		bl	assert_failed
 602              	.L35:
 372:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 373:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 603              		.loc 1 373 0 is_stmt 1
 604 002a FB1D     		add	r3, r7, #7
 605 002c 1B78     		ldrb	r3, [r3]
 606 002e 002B     		cmp	r3, #0
 607 0030 06D0     		beq	.L36
 374:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 375:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 608              		.loc 1 375 0
 609 0032 094B     		ldr	r3, .L38+4
 610 0034 084A     		ldr	r2, .L38+4
 611 0036 526B     		ldr	r2, [r2, #52]
 612 0038 0421     		mov	r1, #4
 613 003a 8A43     		bic	r2, r1
 614 003c 5A63     		str	r2, [r3, #52]
 615 003e 05E0     		b	.L34
 616              	.L36:
 376:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 377:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 378:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 379:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 |= RCC_CR2_HSI14DIS;
 617              		.loc 1 379 0
 618 0040 054B     		ldr	r3, .L38+4
 619 0042 054A     		ldr	r2, .L38+4
 620 0044 526B     		ldr	r2, [r2, #52]
 621 0046 0421     		mov	r1, #4
 622 0048 0A43     		orr	r2, r1
 623 004a 5A63     		str	r2, [r3, #52]
 624              	.L34:
 380:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 381:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 625              		.loc 1 381 0
 626 004c BD46     		mov	sp, r7
 627 004e 02B0     		add	sp, sp, #8
 628              		@ sp needed
 629 0050 80BD     		pop	{r7, pc}
 630              	.L39:
 631 0052 C046     		.align	2
 632              	.L38:
 633 0054 00000000 		.word	.LC0
 634 0058 00100240 		.word	1073876992
 635              		.cfi_endproc
 636              	.LFE39:
 638              		.section	.text.RCC_LSEConfig,"ax",%progbits
 639              		.align	2
 640              		.global	RCC_LSEConfig
 641              		.code	16
 642              		.thumb_func
 644              	RCC_LSEConfig:
 645              	.LFB40:
 382:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 383:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 384:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 385:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     As the LSE is in the Backup domain and write access is denied to this
 386:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           domain after reset, you have to enable write access using 
 387:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 388:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           (to be done once after reset).
 389:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 390:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           software should wait on LSERDY flag to be set indicating that LSE clock
 391:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           is stable and can be used to clock the RTC.
 392:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 393:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *   This parameter can be one of the following values:
 394:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 395:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                       6 LSE oscillator clock cycles.
 396:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_LSE_ON: turn ON the LSE oscillator
 397:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 398:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 399:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 400:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_LSEConfig(uint32_t RCC_LSE)
 401:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 646              		.loc 1 401 0
 647              		.cfi_startproc
 648 0000 80B5     		push	{r7, lr}
 649              		.cfi_def_cfa_offset 8
 650              		.cfi_offset 7, -8
 651              		.cfi_offset 14, -4
 652 0002 82B0     		sub	sp, sp, #8
 653              		.cfi_def_cfa_offset 16
 654 0004 00AF     		add	r7, sp, #0
 655              		.cfi_def_cfa_register 7
 656 0006 7860     		str	r0, [r7, #4]
 402:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 403:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 657              		.loc 1 403 0
 658 0008 7B68     		ldr	r3, [r7, #4]
 659 000a 002B     		cmp	r3, #0
 660 000c 0CD0     		beq	.L41
 661              		.loc 1 403 0 is_stmt 0 discriminator 1
 662 000e 7B68     		ldr	r3, [r7, #4]
 663 0010 012B     		cmp	r3, #1
 664 0012 09D0     		beq	.L41
 665 0014 7B68     		ldr	r3, [r7, #4]
 666 0016 052B     		cmp	r3, #5
 667 0018 06D0     		beq	.L41
 668 001a 0E4A     		ldr	r2, .L42
 669 001c 9423     		mov	r3, #148
 670 001e FF33     		add	r3, r3, #255
 671 0020 101C     		mov	r0, r2
 672 0022 191C     		mov	r1, r3
 673 0024 FFF7FEFF 		bl	assert_failed
 674              	.L41:
 404:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 405:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 406:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset LSEON bit */
 407:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEON);
 675              		.loc 1 407 0 is_stmt 1
 676 0028 0B4B     		ldr	r3, .L42+4
 677 002a 0B4A     		ldr	r2, .L42+4
 678 002c 126A     		ldr	r2, [r2, #32]
 679 002e 0121     		mov	r1, #1
 680 0030 8A43     		bic	r2, r1
 681 0032 1A62     		str	r2, [r3, #32]
 408:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 409:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset LSEBYP bit */
 410:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 682              		.loc 1 410 0
 683 0034 084B     		ldr	r3, .L42+4
 684 0036 084A     		ldr	r2, .L42+4
 685 0038 126A     		ldr	r2, [r2, #32]
 686 003a 0421     		mov	r1, #4
 687 003c 8A43     		bic	r2, r1
 688 003e 1A62     		str	r2, [r3, #32]
 411:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 412:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Configure LSE */
 413:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR |= RCC_LSE;
 689              		.loc 1 413 0
 690 0040 054B     		ldr	r3, .L42+4
 691 0042 054A     		ldr	r2, .L42+4
 692 0044 116A     		ldr	r1, [r2, #32]
 693 0046 7A68     		ldr	r2, [r7, #4]
 694 0048 0A43     		orr	r2, r1
 695 004a 1A62     		str	r2, [r3, #32]
 414:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 696              		.loc 1 414 0
 697 004c BD46     		mov	sp, r7
 698 004e 02B0     		add	sp, sp, #8
 699              		@ sp needed
 700 0050 80BD     		pop	{r7, pc}
 701              	.L43:
 702 0052 C046     		.align	2
 703              	.L42:
 704 0054 00000000 		.word	.LC0
 705 0058 00100240 		.word	1073876992
 706              		.cfi_endproc
 707              	.LFE40:
 709              		.section	.text.RCC_LSEDriveConfig,"ax",%progbits
 710              		.align	2
 711              		.global	RCC_LSEDriveConfig
 712              		.code	16
 713              		.thumb_func
 715              	RCC_LSEDriveConfig:
 716              	.LFB41:
 415:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 416:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 417:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE) drive capability.
 418:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_LSEDrive: specifies the new state of the LSE drive capability.
 419:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *   This parameter can be one of the following values:
 420:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_LSEDrive_Low: LSE oscillator low drive capability.
 421:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_LSEDrive_MediumLow: LSE oscillator medium low drive capability.
 422:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
 423:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
 424:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 425:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 426:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
 427:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 717              		.loc 1 427 0
 718              		.cfi_startproc
 719 0000 80B5     		push	{r7, lr}
 720              		.cfi_def_cfa_offset 8
 721              		.cfi_offset 7, -8
 722              		.cfi_offset 14, -4
 723 0002 82B0     		sub	sp, sp, #8
 724              		.cfi_def_cfa_offset 16
 725 0004 00AF     		add	r7, sp, #0
 726              		.cfi_def_cfa_register 7
 727 0006 7860     		str	r0, [r7, #4]
 428:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 429:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
 728              		.loc 1 429 0
 729 0008 7B68     		ldr	r3, [r7, #4]
 730 000a 002B     		cmp	r3, #0
 731 000c 0FD0     		beq	.L45
 732              		.loc 1 429 0 is_stmt 0 discriminator 1
 733 000e 7B68     		ldr	r3, [r7, #4]
 734 0010 082B     		cmp	r3, #8
 735 0012 0CD0     		beq	.L45
 736 0014 7B68     		ldr	r3, [r7, #4]
 737 0016 102B     		cmp	r3, #16
 738 0018 09D0     		beq	.L45
 739 001a 7B68     		ldr	r3, [r7, #4]
 740 001c 182B     		cmp	r3, #24
 741 001e 06D0     		beq	.L45
 742 0020 0A4A     		ldr	r2, .L46
 743 0022 AE23     		mov	r3, #174
 744 0024 FF33     		add	r3, r3, #255
 745 0026 101C     		mov	r0, r2
 746 0028 191C     		mov	r1, r3
 747 002a FFF7FEFF 		bl	assert_failed
 748              	.L45:
 430:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 431:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear LSEDRV[1:0] bits */
 432:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 749              		.loc 1 432 0 is_stmt 1
 750 002e 084B     		ldr	r3, .L46+4
 751 0030 074A     		ldr	r2, .L46+4
 752 0032 126A     		ldr	r2, [r2, #32]
 753 0034 1821     		mov	r1, #24
 754 0036 8A43     		bic	r2, r1
 755 0038 1A62     		str	r2, [r3, #32]
 433:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 434:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the LSE Drive */
 435:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR |= RCC_LSEDrive;
 756              		.loc 1 435 0
 757 003a 054B     		ldr	r3, .L46+4
 758 003c 044A     		ldr	r2, .L46+4
 759 003e 116A     		ldr	r1, [r2, #32]
 760 0040 7A68     		ldr	r2, [r7, #4]
 761 0042 0A43     		orr	r2, r1
 762 0044 1A62     		str	r2, [r3, #32]
 436:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 763              		.loc 1 436 0
 764 0046 BD46     		mov	sp, r7
 765 0048 02B0     		add	sp, sp, #8
 766              		@ sp needed
 767 004a 80BD     		pop	{r7, pc}
 768              	.L47:
 769              		.align	2
 770              	.L46:
 771 004c 00000000 		.word	.LC0
 772 0050 00100240 		.word	1073876992
 773              		.cfi_endproc
 774              	.LFE41:
 776              		.section	.text.RCC_LSICmd,"ax",%progbits
 777              		.align	2
 778              		.global	RCC_LSICmd
 779              		.code	16
 780              		.thumb_func
 782              	RCC_LSICmd:
 783              	.LFB42:
 437:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 438:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 439:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 440:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     After enabling the LSI, the application software should wait on 
 441:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           LSIRDY flag to be set indicating that LSI clock is stable and can
 442:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           be used to clock the IWDG and/or the RTC.
 443:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     LSI can not be disabled if the IWDG is running.
 444:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the LSI.
 445:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 446:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 447:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         clock cycles.
 448:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 449:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 450:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 451:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 784              		.loc 1 451 0
 785              		.cfi_startproc
 786 0000 80B5     		push	{r7, lr}
 787              		.cfi_def_cfa_offset 8
 788              		.cfi_offset 7, -8
 789              		.cfi_offset 14, -4
 790 0002 82B0     		sub	sp, sp, #8
 791              		.cfi_def_cfa_offset 16
 792 0004 00AF     		add	r7, sp, #0
 793              		.cfi_def_cfa_register 7
 794 0006 021C     		mov	r2, r0
 795 0008 FB1D     		add	r3, r7, #7
 796 000a 1A70     		strb	r2, [r3]
 452:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 453:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 797              		.loc 1 453 0
 798 000c FB1D     		add	r3, r7, #7
 799 000e 1B78     		ldrb	r3, [r3]
 800 0010 002B     		cmp	r3, #0
 801 0012 0AD0     		beq	.L49
 802              		.loc 1 453 0 is_stmt 0 discriminator 1
 803 0014 FB1D     		add	r3, r7, #7
 804 0016 1B78     		ldrb	r3, [r3]
 805 0018 012B     		cmp	r3, #1
 806 001a 06D0     		beq	.L49
 807 001c 0D4A     		ldr	r2, .L52
 808 001e C623     		mov	r3, #198
 809 0020 FF33     		add	r3, r3, #255
 810 0022 101C     		mov	r0, r2
 811 0024 191C     		mov	r1, r3
 812 0026 FFF7FEFF 		bl	assert_failed
 813              	.L49:
 454:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 455:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 814              		.loc 1 455 0 is_stmt 1
 815 002a FB1D     		add	r3, r7, #7
 816 002c 1B78     		ldrb	r3, [r3]
 817 002e 002B     		cmp	r3, #0
 818 0030 06D0     		beq	.L50
 456:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 457:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CSR |= RCC_CSR_LSION;
 819              		.loc 1 457 0
 820 0032 094B     		ldr	r3, .L52+4
 821 0034 084A     		ldr	r2, .L52+4
 822 0036 526A     		ldr	r2, [r2, #36]
 823 0038 0121     		mov	r1, #1
 824 003a 0A43     		orr	r2, r1
 825 003c 5A62     		str	r2, [r3, #36]
 826 003e 05E0     		b	.L48
 827              	.L50:
 458:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 459:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 460:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 461:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CSR &= ~RCC_CSR_LSION;
 828              		.loc 1 461 0
 829 0040 054B     		ldr	r3, .L52+4
 830 0042 054A     		ldr	r2, .L52+4
 831 0044 526A     		ldr	r2, [r2, #36]
 832 0046 0121     		mov	r1, #1
 833 0048 8A43     		bic	r2, r1
 834 004a 5A62     		str	r2, [r3, #36]
 835              	.L48:
 462:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 463:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 836              		.loc 1 463 0
 837 004c BD46     		mov	sp, r7
 838 004e 02B0     		add	sp, sp, #8
 839              		@ sp needed
 840 0050 80BD     		pop	{r7, pc}
 841              	.L53:
 842 0052 C046     		.align	2
 843              	.L52:
 844 0054 00000000 		.word	.LC0
 845 0058 00100240 		.word	1073876992
 846              		.cfi_endproc
 847              	.LFE42:
 849              		.section	.text.RCC_PLLConfig,"ax",%progbits
 850              		.align	2
 851              		.global	RCC_PLLConfig
 852              		.code	16
 853              		.thumb_func
 855              	RCC_PLLConfig:
 856              	.LFB43:
 464:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 465:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 466:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 467:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 468:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
 469:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 470:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *   This parameter can be one of the following values:
 471:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock selected as PLL clock source
 472:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 473:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The minimum input clock frequency for PLL is 2 MHz (when using HSE as
 474:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         PLL source).
 475:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
 476:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor, which drive the PLLVCO clock
 477:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be RCC_PLLMul_x where x:[2,16] 
 478:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
 479:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 480:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 481:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 482:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 857              		.loc 1 482 0
 858              		.cfi_startproc
 859 0000 80B5     		push	{r7, lr}
 860              		.cfi_def_cfa_offset 8
 861              		.cfi_offset 7, -8
 862              		.cfi_offset 14, -4
 863 0002 82B0     		sub	sp, sp, #8
 864              		.cfi_def_cfa_offset 16
 865 0004 00AF     		add	r7, sp, #0
 866              		.cfi_def_cfa_register 7
 867 0006 7860     		str	r0, [r7, #4]
 868 0008 3960     		str	r1, [r7]
 483:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 484:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 869              		.loc 1 484 0
 870 000a 7B68     		ldr	r3, [r7, #4]
 871 000c 002B     		cmp	r3, #0
 872 000e 0BD0     		beq	.L55
 873              		.loc 1 484 0 is_stmt 0 discriminator 1
 874 0010 7A68     		ldr	r2, [r7, #4]
 875 0012 8023     		mov	r3, #128
 876 0014 5B02     		lsl	r3, r3, #9
 877 0016 9A42     		cmp	r2, r3
 878 0018 06D0     		beq	.L55
 879 001a 344A     		ldr	r2, .L57
 880 001c F223     		mov	r3, #242
 881 001e 5B00     		lsl	r3, r3, #1
 882 0020 101C     		mov	r0, r2
 883 0022 191C     		mov	r1, r3
 884 0024 FFF7FEFF 		bl	assert_failed
 885              	.L55:
 485:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 886              		.loc 1 485 0 is_stmt 1
 887 0028 3B68     		ldr	r3, [r7]
 888 002a 002B     		cmp	r3, #0
 889 002c 4CD0     		beq	.L56
 890              		.loc 1 485 0 is_stmt 0 discriminator 1
 891 002e 3A68     		ldr	r2, [r7]
 892 0030 8023     		mov	r3, #128
 893 0032 DB02     		lsl	r3, r3, #11
 894 0034 9A42     		cmp	r2, r3
 895 0036 47D0     		beq	.L56
 896 0038 3A68     		ldr	r2, [r7]
 897 003a 8023     		mov	r3, #128
 898 003c 1B03     		lsl	r3, r3, #12
 899 003e 9A42     		cmp	r2, r3
 900 0040 42D0     		beq	.L56
 901 0042 3A68     		ldr	r2, [r7]
 902 0044 C023     		mov	r3, #192
 903 0046 1B03     		lsl	r3, r3, #12
 904 0048 9A42     		cmp	r2, r3
 905 004a 3DD0     		beq	.L56
 906 004c 3A68     		ldr	r2, [r7]
 907 004e 8023     		mov	r3, #128
 908 0050 5B03     		lsl	r3, r3, #13
 909 0052 9A42     		cmp	r2, r3
 910 0054 38D0     		beq	.L56
 911 0056 3A68     		ldr	r2, [r7]
 912 0058 A023     		mov	r3, #160
 913 005a 5B03     		lsl	r3, r3, #13
 914 005c 9A42     		cmp	r2, r3
 915 005e 33D0     		beq	.L56
 916 0060 3A68     		ldr	r2, [r7]
 917 0062 C023     		mov	r3, #192
 918 0064 5B03     		lsl	r3, r3, #13
 919 0066 9A42     		cmp	r2, r3
 920 0068 2ED0     		beq	.L56
 921 006a 3A68     		ldr	r2, [r7]
 922 006c E023     		mov	r3, #224
 923 006e 5B03     		lsl	r3, r3, #13
 924 0070 9A42     		cmp	r2, r3
 925 0072 29D0     		beq	.L56
 926 0074 3A68     		ldr	r2, [r7]
 927 0076 8023     		mov	r3, #128
 928 0078 9B03     		lsl	r3, r3, #14
 929 007a 9A42     		cmp	r2, r3
 930 007c 24D0     		beq	.L56
 931 007e 3A68     		ldr	r2, [r7]
 932 0080 9023     		mov	r3, #144
 933 0082 9B03     		lsl	r3, r3, #14
 934 0084 9A42     		cmp	r2, r3
 935 0086 1FD0     		beq	.L56
 936 0088 3A68     		ldr	r2, [r7]
 937 008a A023     		mov	r3, #160
 938 008c 9B03     		lsl	r3, r3, #14
 939 008e 9A42     		cmp	r2, r3
 940 0090 1AD0     		beq	.L56
 941 0092 3A68     		ldr	r2, [r7]
 942 0094 B023     		mov	r3, #176
 943 0096 9B03     		lsl	r3, r3, #14
 944 0098 9A42     		cmp	r2, r3
 945 009a 15D0     		beq	.L56
 946 009c 3A68     		ldr	r2, [r7]
 947 009e C023     		mov	r3, #192
 948 00a0 9B03     		lsl	r3, r3, #14
 949 00a2 9A42     		cmp	r2, r3
 950 00a4 10D0     		beq	.L56
 951 00a6 3A68     		ldr	r2, [r7]
 952 00a8 D023     		mov	r3, #208
 953 00aa 9B03     		lsl	r3, r3, #14
 954 00ac 9A42     		cmp	r2, r3
 955 00ae 0BD0     		beq	.L56
 956 00b0 3A68     		ldr	r2, [r7]
 957 00b2 E023     		mov	r3, #224
 958 00b4 9B03     		lsl	r3, r3, #14
 959 00b6 9A42     		cmp	r2, r3
 960 00b8 06D0     		beq	.L56
 961 00ba 0C4A     		ldr	r2, .L57
 962 00bc E623     		mov	r3, #230
 963 00be FF33     		add	r3, r3, #255
 964 00c0 101C     		mov	r0, r2
 965 00c2 191C     		mov	r1, r3
 966 00c4 FFF7FEFF 		bl	assert_failed
 967              	.L56:
 486:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 487:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear PLL Source [16] and Multiplier [21:18] bits */
 488:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 968              		.loc 1 488 0 is_stmt 1
 969 00c8 094B     		ldr	r3, .L57+4
 970 00ca 094A     		ldr	r2, .L57+4
 971 00cc 5168     		ldr	r1, [r2, #4]
 972 00ce 094A     		ldr	r2, .L57+8
 973 00d0 0A40     		and	r2, r1
 974 00d2 5A60     		str	r2, [r3, #4]
 489:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 490:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the PLL Source and Multiplier */
 491:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 975              		.loc 1 491 0
 976 00d4 064B     		ldr	r3, .L57+4
 977 00d6 064A     		ldr	r2, .L57+4
 978 00d8 5168     		ldr	r1, [r2, #4]
 979 00da 7868     		ldr	r0, [r7, #4]
 980 00dc 3A68     		ldr	r2, [r7]
 981 00de 0243     		orr	r2, r0
 982 00e0 0A43     		orr	r2, r1
 983 00e2 5A60     		str	r2, [r3, #4]
 492:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 984              		.loc 1 492 0
 985 00e4 BD46     		mov	sp, r7
 986 00e6 02B0     		add	sp, sp, #8
 987              		@ sp needed
 988 00e8 80BD     		pop	{r7, pc}
 989              	.L58:
 990 00ea C046     		.align	2
 991              	.L57:
 992 00ec 00000000 		.word	.LC0
 993 00f0 00100240 		.word	1073876992
 994 00f4 FFFFC2FF 		.word	-3997697
 995              		.cfi_endproc
 996              	.LFE43:
 998              		.section	.text.RCC_PLLCmd,"ax",%progbits
 999              		.align	2
 1000              		.global	RCC_PLLCmd
 1001              		.code	16
 1002              		.thumb_func
 1004              	RCC_PLLCmd:
 1005              	.LFB44:
 493:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 494:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 495:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the PLL.
 496:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   - After enabling the PLL, the application software should wait on 
 497:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           PLLRDY flag to be set indicating that PLL clock is stable and can
 498:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           be used as system clock source.
 499:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         - The PLL can not be disabled if it is used as system clock source
 500:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         - The PLL is disabled by hardware when entering STOP and STANDBY modes.
 501:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the PLL.
 502:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 503:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 504:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 505:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 506:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1006              		.loc 1 506 0
 1007              		.cfi_startproc
 1008 0000 80B5     		push	{r7, lr}
 1009              		.cfi_def_cfa_offset 8
 1010              		.cfi_offset 7, -8
 1011              		.cfi_offset 14, -4
 1012 0002 82B0     		sub	sp, sp, #8
 1013              		.cfi_def_cfa_offset 16
 1014 0004 00AF     		add	r7, sp, #0
 1015              		.cfi_def_cfa_register 7
 1016 0006 021C     		mov	r2, r0
 1017 0008 FB1D     		add	r3, r7, #7
 1018 000a 1A70     		strb	r2, [r3]
 507:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 508:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1019              		.loc 1 508 0
 1020 000c FB1D     		add	r3, r7, #7
 1021 000e 1B78     		ldrb	r3, [r3]
 1022 0010 002B     		cmp	r3, #0
 1023 0012 0AD0     		beq	.L60
 1024              		.loc 1 508 0 is_stmt 0 discriminator 1
 1025 0014 FB1D     		add	r3, r7, #7
 1026 0016 1B78     		ldrb	r3, [r3]
 1027 0018 012B     		cmp	r3, #1
 1028 001a 06D0     		beq	.L60
 1029 001c 0D4A     		ldr	r2, .L63
 1030 001e FE23     		mov	r3, #254
 1031 0020 5B00     		lsl	r3, r3, #1
 1032 0022 101C     		mov	r0, r2
 1033 0024 191C     		mov	r1, r3
 1034 0026 FFF7FEFF 		bl	assert_failed
 1035              	.L60:
 509:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 510:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1036              		.loc 1 510 0 is_stmt 1
 1037 002a FB1D     		add	r3, r7, #7
 1038 002c 1B78     		ldrb	r3, [r3]
 1039 002e 002B     		cmp	r3, #0
 1040 0030 07D0     		beq	.L61
 511:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 512:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR |= RCC_CR_PLLON;
 1041              		.loc 1 512 0
 1042 0032 094B     		ldr	r3, .L63+4
 1043 0034 084A     		ldr	r2, .L63+4
 1044 0036 1268     		ldr	r2, [r2]
 1045 0038 8021     		mov	r1, #128
 1046 003a 4904     		lsl	r1, r1, #17
 1047 003c 0A43     		orr	r2, r1
 1048 003e 1A60     		str	r2, [r3]
 1049 0040 05E0     		b	.L59
 1050              	.L61:
 513:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 514:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 515:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 516:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR &= ~RCC_CR_PLLON;
 1051              		.loc 1 516 0
 1052 0042 054B     		ldr	r3, .L63+4
 1053 0044 044A     		ldr	r2, .L63+4
 1054 0046 1168     		ldr	r1, [r2]
 1055 0048 044A     		ldr	r2, .L63+8
 1056 004a 0A40     		and	r2, r1
 1057 004c 1A60     		str	r2, [r3]
 1058              	.L59:
 517:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 518:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1059              		.loc 1 518 0
 1060 004e BD46     		mov	sp, r7
 1061 0050 02B0     		add	sp, sp, #8
 1062              		@ sp needed
 1063 0052 80BD     		pop	{r7, pc}
 1064              	.L64:
 1065              		.align	2
 1066              	.L63:
 1067 0054 00000000 		.word	.LC0
 1068 0058 00100240 		.word	1073876992
 1069 005c FFFFFFFE 		.word	-16777217
 1070              		.cfi_endproc
 1071              	.LFE44:
 1073              		.section	.text.RCC_PREDIV1Config,"ax",%progbits
 1074              		.align	2
 1075              		.global	RCC_PREDIV1Config
 1076              		.code	16
 1077              		.thumb_func
 1079              	RCC_PREDIV1Config:
 1080              	.LFB45:
 519:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 520:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 521:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 522:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 523:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 524:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 525:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 526:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 527:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
 528:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1081              		.loc 1 528 0
 1082              		.cfi_startproc
 1083 0000 80B5     		push	{r7, lr}
 1084              		.cfi_def_cfa_offset 8
 1085              		.cfi_offset 7, -8
 1086              		.cfi_offset 14, -4
 1087 0002 84B0     		sub	sp, sp, #16
 1088              		.cfi_def_cfa_offset 24
 1089 0004 00AF     		add	r7, sp, #0
 1090              		.cfi_def_cfa_register 7
 1091 0006 7860     		str	r0, [r7, #4]
 529:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 1092              		.loc 1 529 0
 1093 0008 0023     		mov	r3, #0
 1094 000a FB60     		str	r3, [r7, #12]
 530:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 531:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 532:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 1095              		.loc 1 532 0
 1096 000c 7B68     		ldr	r3, [r7, #4]
 1097 000e 002B     		cmp	r3, #0
 1098 0010 33D0     		beq	.L66
 1099              		.loc 1 532 0 is_stmt 0 discriminator 1
 1100 0012 7B68     		ldr	r3, [r7, #4]
 1101 0014 012B     		cmp	r3, #1
 1102 0016 30D0     		beq	.L66
 1103 0018 7B68     		ldr	r3, [r7, #4]
 1104 001a 022B     		cmp	r3, #2
 1105 001c 2DD0     		beq	.L66
 1106 001e 7B68     		ldr	r3, [r7, #4]
 1107 0020 032B     		cmp	r3, #3
 1108 0022 2AD0     		beq	.L66
 1109 0024 7B68     		ldr	r3, [r7, #4]
 1110 0026 042B     		cmp	r3, #4
 1111 0028 27D0     		beq	.L66
 1112 002a 7B68     		ldr	r3, [r7, #4]
 1113 002c 052B     		cmp	r3, #5
 1114 002e 24D0     		beq	.L66
 1115 0030 7B68     		ldr	r3, [r7, #4]
 1116 0032 062B     		cmp	r3, #6
 1117 0034 21D0     		beq	.L66
 1118 0036 7B68     		ldr	r3, [r7, #4]
 1119 0038 072B     		cmp	r3, #7
 1120 003a 1ED0     		beq	.L66
 1121 003c 7B68     		ldr	r3, [r7, #4]
 1122 003e 082B     		cmp	r3, #8
 1123 0040 1BD0     		beq	.L66
 1124 0042 7B68     		ldr	r3, [r7, #4]
 1125 0044 092B     		cmp	r3, #9
 1126 0046 18D0     		beq	.L66
 1127 0048 7B68     		ldr	r3, [r7, #4]
 1128 004a 0A2B     		cmp	r3, #10
 1129 004c 15D0     		beq	.L66
 1130 004e 7B68     		ldr	r3, [r7, #4]
 1131 0050 0B2B     		cmp	r3, #11
 1132 0052 12D0     		beq	.L66
 1133 0054 7B68     		ldr	r3, [r7, #4]
 1134 0056 0C2B     		cmp	r3, #12
 1135 0058 0FD0     		beq	.L66
 1136 005a 7B68     		ldr	r3, [r7, #4]
 1137 005c 0D2B     		cmp	r3, #13
 1138 005e 0CD0     		beq	.L66
 1139 0060 7B68     		ldr	r3, [r7, #4]
 1140 0062 0E2B     		cmp	r3, #14
 1141 0064 09D0     		beq	.L66
 1142 0066 7B68     		ldr	r3, [r7, #4]
 1143 0068 0F2B     		cmp	r3, #15
 1144 006a 06D0     		beq	.L66
 1145 006c 0B4A     		ldr	r2, .L67
 1146 006e 8523     		mov	r3, #133
 1147 0070 9B00     		lsl	r3, r3, #2
 1148 0072 101C     		mov	r0, r2
 1149 0074 191C     		mov	r1, r3
 1150 0076 FFF7FEFF 		bl	assert_failed
 1151              	.L66:
 533:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 534:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR2;
 1152              		.loc 1 534 0 is_stmt 1
 1153 007a 094B     		ldr	r3, .L67+4
 1154 007c DB6A     		ldr	r3, [r3, #44]
 1155 007e FB60     		str	r3, [r7, #12]
 535:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear PREDIV1[3:0] bits */
 536:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~(RCC_CFGR2_PREDIV1);
 1156              		.loc 1 536 0
 1157 0080 FB68     		ldr	r3, [r7, #12]
 1158 0082 0F22     		mov	r2, #15
 1159 0084 9343     		bic	r3, r2
 1160 0086 FB60     		str	r3, [r7, #12]
 537:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the PREDIV1 division factor */
 538:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_PREDIV1_Div;
 1161              		.loc 1 538 0
 1162 0088 FA68     		ldr	r2, [r7, #12]
 1163 008a 7B68     		ldr	r3, [r7, #4]
 1164 008c 1343     		orr	r3, r2
 1165 008e FB60     		str	r3, [r7, #12]
 539:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 540:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR2 = tmpreg;
 1166              		.loc 1 540 0
 1167 0090 034B     		ldr	r3, .L67+4
 1168 0092 FA68     		ldr	r2, [r7, #12]
 1169 0094 DA62     		str	r2, [r3, #44]
 541:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1170              		.loc 1 541 0
 1171 0096 BD46     		mov	sp, r7
 1172 0098 04B0     		add	sp, sp, #16
 1173              		@ sp needed
 1174 009a 80BD     		pop	{r7, pc}
 1175              	.L68:
 1176              		.align	2
 1177              	.L67:
 1178 009c 00000000 		.word	.LC0
 1179 00a0 00100240 		.word	1073876992
 1180              		.cfi_endproc
 1181              	.LFE45:
 1183              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 1184              		.align	2
 1185              		.global	RCC_ClockSecuritySystemCmd
 1186              		.code	16
 1187              		.thumb_func
 1189              	RCC_ClockSecuritySystemCmd:
 1190              	.LFB46:
 542:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 543:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 544:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 545:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 546:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 547:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 548:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 549:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.
 550:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 551:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 552:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 553:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 554:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 555:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1191              		.loc 1 555 0
 1192              		.cfi_startproc
 1193 0000 80B5     		push	{r7, lr}
 1194              		.cfi_def_cfa_offset 8
 1195              		.cfi_offset 7, -8
 1196              		.cfi_offset 14, -4
 1197 0002 82B0     		sub	sp, sp, #8
 1198              		.cfi_def_cfa_offset 16
 1199 0004 00AF     		add	r7, sp, #0
 1200              		.cfi_def_cfa_register 7
 1201 0006 021C     		mov	r2, r0
 1202 0008 FB1D     		add	r3, r7, #7
 1203 000a 1A70     		strb	r2, [r3]
 556:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 557:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1204              		.loc 1 557 0
 1205 000c FB1D     		add	r3, r7, #7
 1206 000e 1B78     		ldrb	r3, [r3]
 1207 0010 002B     		cmp	r3, #0
 1208 0012 09D0     		beq	.L70
 1209              		.loc 1 557 0 is_stmt 0 discriminator 1
 1210 0014 FB1D     		add	r3, r7, #7
 1211 0016 1B78     		ldrb	r3, [r3]
 1212 0018 012B     		cmp	r3, #1
 1213 001a 05D0     		beq	.L70
 1214 001c 0D4A     		ldr	r2, .L73
 1215 001e 0E4B     		ldr	r3, .L73+4
 1216 0020 101C     		mov	r0, r2
 1217 0022 191C     		mov	r1, r3
 1218 0024 FFF7FEFF 		bl	assert_failed
 1219              	.L70:
 558:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 559:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1220              		.loc 1 559 0 is_stmt 1
 1221 0028 FB1D     		add	r3, r7, #7
 1222 002a 1B78     		ldrb	r3, [r3]
 1223 002c 002B     		cmp	r3, #0
 1224 002e 07D0     		beq	.L71
 560:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 561:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR |= RCC_CR_CSSON;
 1225              		.loc 1 561 0
 1226 0030 0A4B     		ldr	r3, .L73+8
 1227 0032 0A4A     		ldr	r2, .L73+8
 1228 0034 1268     		ldr	r2, [r2]
 1229 0036 8021     		mov	r1, #128
 1230 0038 0903     		lsl	r1, r1, #12
 1231 003a 0A43     		orr	r2, r1
 1232 003c 1A60     		str	r2, [r3]
 1233 003e 05E0     		b	.L69
 1234              	.L71:
 562:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 563:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 564:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 565:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR &= ~RCC_CR_CSSON;
 1235              		.loc 1 565 0
 1236 0040 064B     		ldr	r3, .L73+8
 1237 0042 064A     		ldr	r2, .L73+8
 1238 0044 1168     		ldr	r1, [r2]
 1239 0046 064A     		ldr	r2, .L73+12
 1240 0048 0A40     		and	r2, r1
 1241 004a 1A60     		str	r2, [r3]
 1242              	.L69:
 566:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 567:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1243              		.loc 1 567 0
 1244 004c BD46     		mov	sp, r7
 1245 004e 02B0     		add	sp, sp, #8
 1246              		@ sp needed
 1247 0050 80BD     		pop	{r7, pc}
 1248              	.L74:
 1249 0052 C046     		.align	2
 1250              	.L73:
 1251 0054 00000000 		.word	.LC0
 1252 0058 2D020000 		.word	557
 1253 005c 00100240 		.word	1073876992
 1254 0060 FFFFF7FF 		.word	-524289
 1255              		.cfi_endproc
 1256              	.LFE46:
 1258              		.section	.text.RCC_MCOConfig,"ax",%progbits
 1259              		.align	2
 1260              		.global	RCC_MCOConfig
 1261              		.code	16
 1262              		.thumb_func
 1264              	RCC_MCOConfig:
 1265              	.LFB47:
 568:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 569:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 570:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Selects the clock source to output on MCO pin (PA8).
 571:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 572:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 573:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *   This parameter can be one of the following values:
 574:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_MCOSource_NoClock: No clock selected.
 575:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_MCOSource_HSI14: HSI14 oscillator clock selected.
 576:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_MCOSource_LSI: LSI oscillator clock selected.
 577:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_MCOSource_LSE: LSE oscillator clock selected.
 578:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_MCOSource_SYSCLK: System clock selected.
 579:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_MCOSource_HSI: HSI oscillator clock selected.
 580:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
 581:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_MCOSource_PLLCLK_Div2: PLL clock divided by 2 selected.
 582:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 583:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 584:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCOSource)
 585:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1266              		.loc 1 585 0
 1267              		.cfi_startproc
 1268 0000 80B5     		push	{r7, lr}
 1269              		.cfi_def_cfa_offset 8
 1270              		.cfi_offset 7, -8
 1271              		.cfi_offset 14, -4
 1272 0002 82B0     		sub	sp, sp, #8
 1273              		.cfi_def_cfa_offset 16
 1274 0004 00AF     		add	r7, sp, #0
 1275              		.cfi_def_cfa_register 7
 1276 0006 021C     		mov	r2, r0
 1277 0008 FB1D     		add	r3, r7, #7
 1278 000a 1A70     		strb	r2, [r3]
 586:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 587:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
 1279              		.loc 1 587 0
 1280 000c FB1D     		add	r3, r7, #7
 1281 000e 1B78     		ldrb	r3, [r3]
 1282 0010 002B     		cmp	r3, #0
 1283 0012 21D0     		beq	.L76
 1284              		.loc 1 587 0 is_stmt 0 discriminator 1
 1285 0014 FB1D     		add	r3, r7, #7
 1286 0016 1B78     		ldrb	r3, [r3]
 1287 0018 012B     		cmp	r3, #1
 1288 001a 1DD0     		beq	.L76
 1289 001c FB1D     		add	r3, r7, #7
 1290 001e 1B78     		ldrb	r3, [r3]
 1291 0020 042B     		cmp	r3, #4
 1292 0022 19D0     		beq	.L76
 1293 0024 FB1D     		add	r3, r7, #7
 1294 0026 1B78     		ldrb	r3, [r3]
 1295 0028 052B     		cmp	r3, #5
 1296 002a 15D0     		beq	.L76
 1297 002c FB1D     		add	r3, r7, #7
 1298 002e 1B78     		ldrb	r3, [r3]
 1299 0030 062B     		cmp	r3, #6
 1300 0032 11D0     		beq	.L76
 1301 0034 FB1D     		add	r3, r7, #7
 1302 0036 1B78     		ldrb	r3, [r3]
 1303 0038 072B     		cmp	r3, #7
 1304 003a 0DD0     		beq	.L76
 1305 003c FB1D     		add	r3, r7, #7
 1306 003e 1B78     		ldrb	r3, [r3]
 1307 0040 022B     		cmp	r3, #2
 1308 0042 09D0     		beq	.L76
 1309 0044 FB1D     		add	r3, r7, #7
 1310 0046 1B78     		ldrb	r3, [r3]
 1311 0048 032B     		cmp	r3, #3
 1312 004a 05D0     		beq	.L76
 1313 004c 064A     		ldr	r2, .L77
 1314 004e 074B     		ldr	r3, .L77+4
 1315 0050 101C     		mov	r0, r2
 1316 0052 191C     		mov	r1, r3
 1317 0054 FFF7FEFF 		bl	assert_failed
 1318              	.L76:
 588:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     
 589:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Select MCO clock source and prescaler */
 590:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 1319              		.loc 1 590 0 is_stmt 1
 1320 0058 054B     		ldr	r3, .L77+8
 1321 005a FA1D     		add	r2, r7, #7
 1322 005c 1278     		ldrb	r2, [r2]
 1323 005e 1A70     		strb	r2, [r3]
 591:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1324              		.loc 1 591 0
 1325 0060 BD46     		mov	sp, r7
 1326 0062 02B0     		add	sp, sp, #8
 1327              		@ sp needed
 1328 0064 80BD     		pop	{r7, pc}
 1329              	.L78:
 1330 0066 C046     		.align	2
 1331              	.L77:
 1332 0068 00000000 		.word	.LC0
 1333 006c 4B020000 		.word	587
 1334 0070 07100240 		.word	1073876999
 1335              		.cfi_endproc
 1336              	.LFE47:
 1338              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 1339              		.align	2
 1340              		.global	RCC_SYSCLKConfig
 1341              		.code	16
 1342              		.thumb_func
 1344              	RCC_SYSCLKConfig:
 1345              	.LFB48:
 592:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 593:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 594:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @}
 595:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 596:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 597:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 598:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 599:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *
 600:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @verbatim
 601:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
 602:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****      ##### System, AHB and APB busses clocks configuration functions #####
 603:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
 604:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 605:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] This section provide functions allowing to configure the System, AHB and 
 606:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          APB busses clocks.
 607:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 608:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              HSE and PLL.
 609:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable prescaler
 610:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA and GPIO).
 611:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              and APB (PCLK) clocks are derived from AHB clock through 
 612:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              configurable prescalers and used to clock the peripherals mapped on these busses.
 613:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks
 614:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 615:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 616:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The ADC clock which is derived from HSI14 or APB (APB divided by a
 617:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                   programmable prescaler: 2 or 4).
 618:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The CEC clock which is derived from LSE or HSI divided by 244.
 619:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The I2C clock which is derived from HSI or system clock (SYSCLK).
 620:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The USART clock which is derived from HSI, system clock (SYSCLK), APB or LSE.
 621:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The RTC/LCD clock which is derived from the LSE, LSI or 2 MHz HSE_RTC (HSE
 622:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                   divided by a programmable prescaler).
 623:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                   The System clock (SYSCLK) frequency must be higher or equal to the RTC/LCD
 624:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                   clock frequency.
 625:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) IWDG clock which is always the LSI clock.
 626:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****        
 627:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) The maximum frequency of the SYSCLK, HCLK and PCLK is 48 MHz.
 628:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              Depending on the maximum frequency, the FLASH wait states (WS) should be 
 629:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              adapted accordingly:
 630:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         +--------------------------------------------- +
 631:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |  Wait states  |   HCLK clock frequency (MHz) |
 632:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |---------------|------------------------------|
 633:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |0WS(1CPU cycle)|       0 < HCLK <= 24         |
 634:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |---------------|------------------------------|
 635:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |1WS(2CPU cycle)|       24 < HCLK <= 48        |
 636:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         +----------------------------------------------+
 637:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 638:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) After reset, the System clock source is the HSI (8 MHz) with 0 WS and 
 639:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              prefetch is disabled.
 640:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 641:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] It is recommended to use the following software sequences to tune the number
 642:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          of wait states needed to access the Flash memory with the CPU frequency (HCLK).
 643:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (+) Increasing the CPU frequency
 644:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Program the Flash Prefetch buffer, using "FLASH_PrefetchBufferCmd(ENABLE)" 
 645:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               function
 646:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that Flash Prefetch buffer activation is taken into account by 
 647:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               reading FLASH_ACR using the FLASH_GetPrefetchBufferStatus() function
 648:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Program Flash WS to 1, using "FLASH_SetLatency(FLASH_Latency_1)" function
 649:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that the new number of WS is taken into account by reading FLASH_ACR
 650:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Modify the CPU clock source, using "RCC_SYSCLKConfig()" function
 651:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) If needed, modify the CPU clock prescaler by using "RCC_HCLKConfig()" function
 652:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that the new CPU clock source is taken into account by reading 
 653:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               the clock source status, using "RCC_GetSYSCLKSource()" function 
 654:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (+) Decreasing the CPU frequency
 655:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Modify the CPU clock source, using "RCC_SYSCLKConfig()" function
 656:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) If needed, modify the CPU clock prescaler by using "RCC_HCLKConfig()" function
 657:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that the new CPU clock source is taken into account by reading 
 658:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               the clock source status, using "RCC_GetSYSCLKSource()" function
 659:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Program the new number of WS, using "FLASH_SetLatency()" function
 660:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that the new number of WS is taken into account by reading FLASH_ACR
 661:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Disable the Flash Prefetch buffer using "FLASH_PrefetchBufferCmd(DISABLE)" 
 662:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               function
 663:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that Flash Prefetch buffer deactivation is taken into account by reading FLASH_
 664:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               using the FLASH_GetPrefetchBufferStatus() function.
 665:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 666:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @endverbatim
 667:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
 668:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 669:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 670:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 671:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 672:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note    The HSI is used (enabled by hardware) as system clock source after
 673:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           startup from Reset, wake-up from STOP and STANDBY mode, or in case
 674:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           of failure of the HSE used directly or indirectly as system clock
 675:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           (if the Clock Security System CSS is enabled).
 676:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     A switch from one clock source to another occurs only if the target
 677:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           clock source is ready (clock stable after startup delay or PLL locked). 
 678:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           If a clock source which is not yet ready is selected, the switch will
 679:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           occur when the clock source will be ready. 
 680:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           You can use RCC_GetSYSCLKSource() function to know which clock is
 681:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           currently used as system clock source.  
 682:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock source 
 683:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *   This parameter can be one of the following values:
 684:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 685:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 686:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 687:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 688:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 689:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 690:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1346              		.loc 1 690 0
 1347              		.cfi_startproc
 1348 0000 80B5     		push	{r7, lr}
 1349              		.cfi_def_cfa_offset 8
 1350              		.cfi_offset 7, -8
 1351              		.cfi_offset 14, -4
 1352 0002 84B0     		sub	sp, sp, #16
 1353              		.cfi_def_cfa_offset 24
 1354 0004 00AF     		add	r7, sp, #0
 1355              		.cfi_def_cfa_register 7
 1356 0006 7860     		str	r0, [r7, #4]
 691:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 1357              		.loc 1 691 0
 1358 0008 0023     		mov	r3, #0
 1359 000a FB60     		str	r3, [r7, #12]
 692:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 693:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 694:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 1360              		.loc 1 694 0
 1361 000c 7B68     		ldr	r3, [r7, #4]
 1362 000e 002B     		cmp	r3, #0
 1363 0010 0BD0     		beq	.L80
 1364              		.loc 1 694 0 is_stmt 0 discriminator 1
 1365 0012 7B68     		ldr	r3, [r7, #4]
 1366 0014 012B     		cmp	r3, #1
 1367 0016 08D0     		beq	.L80
 1368 0018 7B68     		ldr	r3, [r7, #4]
 1369 001a 022B     		cmp	r3, #2
 1370 001c 05D0     		beq	.L80
 1371 001e 0B4A     		ldr	r2, .L81
 1372 0020 0B4B     		ldr	r3, .L81+4
 1373 0022 101C     		mov	r0, r2
 1374 0024 191C     		mov	r1, r3
 1375 0026 FFF7FEFF 		bl	assert_failed
 1376              	.L80:
 695:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 696:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 1377              		.loc 1 696 0 is_stmt 1
 1378 002a 0A4B     		ldr	r3, .L81+8
 1379 002c 5B68     		ldr	r3, [r3, #4]
 1380 002e FB60     		str	r3, [r7, #12]
 697:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 698:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear SW[1:0] bits */
 699:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 1381              		.loc 1 699 0
 1382 0030 FB68     		ldr	r3, [r7, #12]
 1383 0032 0322     		mov	r2, #3
 1384 0034 9343     		bic	r3, r2
 1385 0036 FB60     		str	r3, [r7, #12]
 700:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 701:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 702:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 1386              		.loc 1 702 0
 1387 0038 FA68     		ldr	r2, [r7, #12]
 1388 003a 7B68     		ldr	r3, [r7, #4]
 1389 003c 1343     		orr	r3, r2
 1390 003e FB60     		str	r3, [r7, #12]
 703:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 704:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 705:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 1391              		.loc 1 705 0
 1392 0040 044B     		ldr	r3, .L81+8
 1393 0042 FA68     		ldr	r2, [r7, #12]
 1394 0044 5A60     		str	r2, [r3, #4]
 706:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1395              		.loc 1 706 0
 1396 0046 BD46     		mov	sp, r7
 1397 0048 04B0     		add	sp, sp, #16
 1398              		@ sp needed
 1399 004a 80BD     		pop	{r7, pc}
 1400              	.L82:
 1401              		.align	2
 1402              	.L81:
 1403 004c 00000000 		.word	.LC0
 1404 0050 B6020000 		.word	694
 1405 0054 00100240 		.word	1073876992
 1406              		.cfi_endproc
 1407              	.LFE48:
 1409              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 1410              		.align	2
 1411              		.global	RCC_GetSYSCLKSource
 1412              		.code	16
 1413              		.thumb_func
 1415              	RCC_GetSYSCLKSource:
 1416              	.LFB49:
 707:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 708:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 709:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 710:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  None
 711:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one 
 712:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         of the following values:
 713:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              - 0x00: HSI used as system clock
 714:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              - 0x04: HSE used as system clock  
 715:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              - 0x08: PLL used as system clock
 716:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 717:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 718:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1417              		.loc 1 718 0
 1418              		.cfi_startproc
 1419 0000 80B5     		push	{r7, lr}
 1420              		.cfi_def_cfa_offset 8
 1421              		.cfi_offset 7, -8
 1422              		.cfi_offset 14, -4
 1423 0002 00AF     		add	r7, sp, #0
 1424              		.cfi_def_cfa_register 7
 719:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 1425              		.loc 1 719 0
 1426 0004 044B     		ldr	r3, .L85
 1427 0006 5B68     		ldr	r3, [r3, #4]
 1428 0008 DAB2     		uxtb	r2, r3
 1429 000a 0C23     		mov	r3, #12
 1430 000c 1340     		and	r3, r2
 1431 000e DBB2     		uxtb	r3, r3
 720:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1432              		.loc 1 720 0
 1433 0010 181C     		mov	r0, r3
 1434 0012 BD46     		mov	sp, r7
 1435              		@ sp needed
 1436 0014 80BD     		pop	{r7, pc}
 1437              	.L86:
 1438 0016 C046     		.align	2
 1439              	.L85:
 1440 0018 00100240 		.word	1073876992
 1441              		.cfi_endproc
 1442              	.LFE49:
 1444              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 1445              		.align	2
 1446              		.global	RCC_HCLKConfig
 1447              		.code	16
 1448              		.thumb_func
 1450              	RCC_HCLKConfig:
 1451              	.LFB50:
 721:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 722:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 723:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 724:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 725:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                     the system clock (SYSCLK).
 726:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *   This parameter can be one of the following values:
 727:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_SYSCLK_Div1:   AHB clock = SYSCLK
 728:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_SYSCLK_Div2:   AHB clock = SYSCLK/2
 729:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_SYSCLK_Div4:   AHB clock = SYSCLK/4
 730:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_SYSCLK_Div8:   AHB clock = SYSCLK/8
 731:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_SYSCLK_Div16:  AHB clock = SYSCLK/16
 732:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_SYSCLK_Div64:  AHB clock = SYSCLK/64
 733:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 734:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 735:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 736:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 737:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 738:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 739:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1452              		.loc 1 739 0
 1453              		.cfi_startproc
 1454 0000 80B5     		push	{r7, lr}
 1455              		.cfi_def_cfa_offset 8
 1456              		.cfi_offset 7, -8
 1457              		.cfi_offset 14, -4
 1458 0002 84B0     		sub	sp, sp, #16
 1459              		.cfi_def_cfa_offset 24
 1460 0004 00AF     		add	r7, sp, #0
 1461              		.cfi_def_cfa_register 7
 1462 0006 7860     		str	r0, [r7, #4]
 740:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 1463              		.loc 1 740 0
 1464 0008 0023     		mov	r3, #0
 1465 000a FB60     		str	r3, [r7, #12]
 741:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 742:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 743:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 1466              		.loc 1 743 0
 1467 000c 7B68     		ldr	r3, [r7, #4]
 1468 000e 002B     		cmp	r3, #0
 1469 0010 1DD0     		beq	.L88
 1470              		.loc 1 743 0 is_stmt 0 discriminator 1
 1471 0012 7B68     		ldr	r3, [r7, #4]
 1472 0014 802B     		cmp	r3, #128
 1473 0016 1AD0     		beq	.L88
 1474 0018 7B68     		ldr	r3, [r7, #4]
 1475 001a 902B     		cmp	r3, #144
 1476 001c 17D0     		beq	.L88
 1477 001e 7B68     		ldr	r3, [r7, #4]
 1478 0020 A02B     		cmp	r3, #160
 1479 0022 14D0     		beq	.L88
 1480 0024 7B68     		ldr	r3, [r7, #4]
 1481 0026 B02B     		cmp	r3, #176
 1482 0028 11D0     		beq	.L88
 1483 002a 7B68     		ldr	r3, [r7, #4]
 1484 002c C02B     		cmp	r3, #192
 1485 002e 0ED0     		beq	.L88
 1486 0030 7B68     		ldr	r3, [r7, #4]
 1487 0032 D02B     		cmp	r3, #208
 1488 0034 0BD0     		beq	.L88
 1489 0036 7B68     		ldr	r3, [r7, #4]
 1490 0038 E02B     		cmp	r3, #224
 1491 003a 08D0     		beq	.L88
 1492 003c 7B68     		ldr	r3, [r7, #4]
 1493 003e F02B     		cmp	r3, #240
 1494 0040 05D0     		beq	.L88
 1495 0042 0B4A     		ldr	r2, .L89
 1496 0044 0B4B     		ldr	r3, .L89+4
 1497 0046 101C     		mov	r0, r2
 1498 0048 191C     		mov	r1, r3
 1499 004a FFF7FEFF 		bl	assert_failed
 1500              	.L88:
 744:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 745:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 1501              		.loc 1 745 0 is_stmt 1
 1502 004e 0A4B     		ldr	r3, .L89+8
 1503 0050 5B68     		ldr	r3, [r3, #4]
 1504 0052 FB60     		str	r3, [r7, #12]
 746:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 747:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 748:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 1505              		.loc 1 748 0
 1506 0054 FB68     		ldr	r3, [r7, #12]
 1507 0056 F022     		mov	r2, #240
 1508 0058 9343     		bic	r3, r2
 1509 005a FB60     		str	r3, [r7, #12]
 749:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 750:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 751:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 1510              		.loc 1 751 0
 1511 005c FA68     		ldr	r2, [r7, #12]
 1512 005e 7B68     		ldr	r3, [r7, #4]
 1513 0060 1343     		orr	r3, r2
 1514 0062 FB60     		str	r3, [r7, #12]
 752:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 753:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 754:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 1515              		.loc 1 754 0
 1516 0064 044B     		ldr	r3, .L89+8
 1517 0066 FA68     		ldr	r2, [r7, #12]
 1518 0068 5A60     		str	r2, [r3, #4]
 755:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1519              		.loc 1 755 0
 1520 006a BD46     		mov	sp, r7
 1521 006c 04B0     		add	sp, sp, #16
 1522              		@ sp needed
 1523 006e 80BD     		pop	{r7, pc}
 1524              	.L90:
 1525              		.align	2
 1526              	.L89:
 1527 0070 00000000 		.word	.LC0
 1528 0074 E7020000 		.word	743
 1529 0078 00100240 		.word	1073876992
 1530              		.cfi_endproc
 1531              	.LFE50:
 1533              		.section	.text.RCC_PCLKConfig,"ax",%progbits
 1534              		.align	2
 1535              		.global	RCC_PCLKConfig
 1536              		.code	16
 1537              		.thumb_func
 1539              	RCC_PCLKConfig:
 1540              	.LFB51:
 756:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 757:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 758:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the APB clock (PCLK).
 759:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_HCLK: defines the APB clock divider. This clock is derived from 
 760:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the AHB clock (HCLK).
 761:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *   This parameter can be one of the following values:
 762:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_HCLK_Div1: APB clock = HCLK
 763:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_HCLK_Div2: APB clock = HCLK/2
 764:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_HCLK_Div4: APB clock = HCLK/4
 765:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_HCLK_Div8: APB clock = HCLK/8
 766:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_HCLK_Div16: APB clock = HCLK/16
 767:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 768:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 769:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_PCLKConfig(uint32_t RCC_HCLK)
 770:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1541              		.loc 1 770 0
 1542              		.cfi_startproc
 1543 0000 80B5     		push	{r7, lr}
 1544              		.cfi_def_cfa_offset 8
 1545              		.cfi_offset 7, -8
 1546              		.cfi_offset 14, -4
 1547 0002 84B0     		sub	sp, sp, #16
 1548              		.cfi_def_cfa_offset 24
 1549 0004 00AF     		add	r7, sp, #0
 1550              		.cfi_def_cfa_register 7
 1551 0006 7860     		str	r0, [r7, #4]
 771:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 1552              		.loc 1 771 0
 1553 0008 0023     		mov	r3, #0
 1554 000a FB60     		str	r3, [r7, #12]
 772:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 773:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 774:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 1555              		.loc 1 774 0
 1556 000c 7B68     		ldr	r3, [r7, #4]
 1557 000e 002B     		cmp	r3, #0
 1558 0010 19D0     		beq	.L92
 1559              		.loc 1 774 0 is_stmt 0 discriminator 1
 1560 0012 7A68     		ldr	r2, [r7, #4]
 1561 0014 8023     		mov	r3, #128
 1562 0016 DB00     		lsl	r3, r3, #3
 1563 0018 9A42     		cmp	r2, r3
 1564 001a 14D0     		beq	.L92
 1565 001c 7A68     		ldr	r2, [r7, #4]
 1566 001e A023     		mov	r3, #160
 1567 0020 DB00     		lsl	r3, r3, #3
 1568 0022 9A42     		cmp	r2, r3
 1569 0024 0FD0     		beq	.L92
 1570 0026 7A68     		ldr	r2, [r7, #4]
 1571 0028 C023     		mov	r3, #192
 1572 002a DB00     		lsl	r3, r3, #3
 1573 002c 9A42     		cmp	r2, r3
 1574 002e 0AD0     		beq	.L92
 1575 0030 7A68     		ldr	r2, [r7, #4]
 1576 0032 E023     		mov	r3, #224
 1577 0034 DB00     		lsl	r3, r3, #3
 1578 0036 9A42     		cmp	r2, r3
 1579 0038 05D0     		beq	.L92
 1580 003a 0B4A     		ldr	r2, .L93
 1581 003c 0B4B     		ldr	r3, .L93+4
 1582 003e 101C     		mov	r0, r2
 1583 0040 191C     		mov	r1, r3
 1584 0042 FFF7FEFF 		bl	assert_failed
 1585              	.L92:
 775:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 776:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 1586              		.loc 1 776 0 is_stmt 1
 1587 0046 0A4B     		ldr	r3, .L93+8
 1588 0048 5B68     		ldr	r3, [r3, #4]
 1589 004a FB60     		str	r3, [r7, #12]
 777:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 778:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear PPRE[2:0] bits */
 779:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE;
 1590              		.loc 1 779 0
 1591 004c FA68     		ldr	r2, [r7, #12]
 1592 004e 094B     		ldr	r3, .L93+12
 1593 0050 1340     		and	r3, r2
 1594 0052 FB60     		str	r3, [r7, #12]
 780:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 781:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set PPRE[2:0] bits according to RCC_HCLK value */
 782:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_HCLK;
 1595              		.loc 1 782 0
 1596 0054 FA68     		ldr	r2, [r7, #12]
 1597 0056 7B68     		ldr	r3, [r7, #4]
 1598 0058 1343     		orr	r3, r2
 1599 005a FB60     		str	r3, [r7, #12]
 783:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 784:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 785:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 1600              		.loc 1 785 0
 1601 005c 044B     		ldr	r3, .L93+8
 1602 005e FA68     		ldr	r2, [r7, #12]
 1603 0060 5A60     		str	r2, [r3, #4]
 786:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1604              		.loc 1 786 0
 1605 0062 BD46     		mov	sp, r7
 1606 0064 04B0     		add	sp, sp, #16
 1607              		@ sp needed
 1608 0066 80BD     		pop	{r7, pc}
 1609              	.L94:
 1610              		.align	2
 1611              	.L93:
 1612 0068 00000000 		.word	.LC0
 1613 006c 06030000 		.word	774
 1614 0070 00100240 		.word	1073876992
 1615 0074 FFF8FFFF 		.word	-1793
 1616              		.cfi_endproc
 1617              	.LFE51:
 1619              		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 1620              		.align	2
 1621              		.global	RCC_ADCCLKConfig
 1622              		.code	16
 1623              		.thumb_func
 1625              	RCC_ADCCLKConfig:
 1626              	.LFB52:
 787:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 788:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 789:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 790:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_ADCCLK: defines the ADC clock source. This clock is derived 
 791:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI14 or APB clock (PCLK).
 792:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be one of the following values:
 793:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_ADCCLK_HSI14: ADC clock = HSI14 (14MHz)
 794:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_ADCCLK_PCLK_Div2: ADC clock = PCLK/2
 795:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_ADCCLK_PCLK_Div4: ADC clock = PCLK/4  
 796:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 797:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 798:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_ADCCLK)
 799:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 1627              		.loc 1 799 0
 1628              		.cfi_startproc
 1629 0000 80B5     		push	{r7, lr}
 1630              		.cfi_def_cfa_offset 8
 1631              		.cfi_offset 7, -8
 1632              		.cfi_offset 14, -4
 1633 0002 82B0     		sub	sp, sp, #8
 1634              		.cfi_def_cfa_offset 16
 1635 0004 00AF     		add	r7, sp, #0
 1636              		.cfi_def_cfa_register 7
 1637 0006 7860     		str	r0, [r7, #4]
 800:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 801:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));
 1638              		.loc 1 801 0
 1639 0008 7B68     		ldr	r3, [r7, #4]
 1640 000a 002B     		cmp	r3, #0
 1641 000c 0ED0     		beq	.L96
 1642              		.loc 1 801 0 is_stmt 0 discriminator 1
 1643 000e 7A68     		ldr	r2, [r7, #4]
 1644 0010 8023     		mov	r3, #128
 1645 0012 5B04     		lsl	r3, r3, #17
 1646 0014 9A42     		cmp	r2, r3
 1647 0016 09D0     		beq	.L96
 1648 0018 7A68     		ldr	r2, [r7, #4]
 1649 001a 134B     		ldr	r3, .L97
 1650 001c 9A42     		cmp	r2, r3
 1651 001e 05D0     		beq	.L96
 1652 0020 124A     		ldr	r2, .L97+4
 1653 0022 134B     		ldr	r3, .L97+8
 1654 0024 101C     		mov	r0, r2
 1655 0026 191C     		mov	r1, r3
 1656 0028 FFF7FEFF 		bl	assert_failed
 1657              	.L96:
 802:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 803:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear ADCPRE bit */
 804:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 1658              		.loc 1 804 0 is_stmt 1
 1659 002c 114B     		ldr	r3, .L97+12
 1660 002e 114A     		ldr	r2, .L97+12
 1661 0030 5168     		ldr	r1, [r2, #4]
 1662 0032 114A     		ldr	r2, .L97+16
 1663 0034 0A40     		and	r2, r1
 1664 0036 5A60     		str	r2, [r3, #4]
 805:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set ADCPRE bits according to RCC_PCLK value */
 806:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 1665              		.loc 1 806 0
 1666 0038 0E4B     		ldr	r3, .L97+12
 1667 003a 0E4A     		ldr	r2, .L97+12
 1668 003c 5168     		ldr	r1, [r2, #4]
 1669 003e 7A68     		ldr	r2, [r7, #4]
 1670 0040 1204     		lsl	r2, r2, #16
 1671 0042 120C     		lsr	r2, r2, #16
 1672 0044 0A43     		orr	r2, r1
 1673 0046 5A60     		str	r2, [r3, #4]
 807:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 808:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear ADCSW bit */
 809:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 1674              		.loc 1 809 0
 1675 0048 0A4B     		ldr	r3, .L97+12
 1676 004a 0A4A     		ldr	r2, .L97+12
 1677 004c 116B     		ldr	r1, [r2, #48]
 1678 004e 0B4A     		ldr	r2, .L97+20
 1679 0050 0A40     		and	r2, r1
 1680 0052 1A63     		str	r2, [r3, #48]
 810:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set ADCSW bits according to RCC_ADCCLK value */
 811:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 1681              		.loc 1 811 0
 1682 0054 074B     		ldr	r3, .L97+12
 1683 0056 074A     		ldr	r2, .L97+12
 1684 0058 116B     		ldr	r1, [r2, #48]
 1685 005a 7A68     		ldr	r2, [r7, #4]
 1686 005c 120C     		lsr	r2, r2, #16
 1687 005e 0A43     		orr	r2, r1
 1688 0060 1A63     		str	r2, [r3, #48]
 812:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1689              		.loc 1 812 0
 1690 0062 BD46     		mov	sp, r7
 1691 0064 02B0     		add	sp, sp, #8
 1692              		@ sp needed
 1693 0066 80BD     		pop	{r7, pc}
 1694              	.L98:
 1695              		.align	2
 1696              	.L97:
 1697 0068 00400001 		.word	16793600
 1698 006c 00000000 		.word	.LC0
 1699 0070 21030000 		.word	801
 1700 0074 00100240 		.word	1073876992
 1701 0078 FFBFFFFF 		.word	-16385
 1702 007c FFFEFFFF 		.word	-257
 1703              		.cfi_endproc
 1704              	.LFE52:
 1706              		.section	.text.RCC_CECCLKConfig,"ax",%progbits
 1707              		.align	2
 1708              		.global	RCC_CECCLKConfig
 1709              		.code	16
 1710              		.thumb_func
 1712              	RCC_CECCLKConfig:
 1713              	.LFB53:
 813:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 814:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 815:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the CEC clock (CECCLK).
 816:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_CECCLK: defines the CEC clock source. This clock is derived 
 817:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI or LSE clock.
 818:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be one of the following values:
 819:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_CECCLK_HSI_Div244: CEC clock = HSI/244 (32768Hz)
 820:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_CECCLK_LSE: CEC clock = LSE
 821:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 822:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 823:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_CECCLKConfig(uint32_t RCC_CECCLK)
 824:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 1714              		.loc 1 824 0
 1715              		.cfi_startproc
 1716 0000 80B5     		push	{r7, lr}
 1717              		.cfi_def_cfa_offset 8
 1718              		.cfi_offset 7, -8
 1719              		.cfi_offset 14, -4
 1720 0002 82B0     		sub	sp, sp, #8
 1721              		.cfi_def_cfa_offset 16
 1722 0004 00AF     		add	r7, sp, #0
 1723              		.cfi_def_cfa_register 7
 1724 0006 7860     		str	r0, [r7, #4]
 825:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 826:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_CECCLK(RCC_CECCLK));
 1725              		.loc 1 826 0
 1726 0008 7B68     		ldr	r3, [r7, #4]
 1727 000a 002B     		cmp	r3, #0
 1728 000c 08D0     		beq	.L100
 1729              		.loc 1 826 0 is_stmt 0 discriminator 1
 1730 000e 7B68     		ldr	r3, [r7, #4]
 1731 0010 402B     		cmp	r3, #64
 1732 0012 05D0     		beq	.L100
 1733 0014 0A4A     		ldr	r2, .L101
 1734 0016 0B4B     		ldr	r3, .L101+4
 1735 0018 101C     		mov	r0, r2
 1736 001a 191C     		mov	r1, r3
 1737 001c FFF7FEFF 		bl	assert_failed
 1738              	.L100:
 827:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 828:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear CECSW bit */
 829:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 1739              		.loc 1 829 0 is_stmt 1
 1740 0020 094B     		ldr	r3, .L101+8
 1741 0022 094A     		ldr	r2, .L101+8
 1742 0024 126B     		ldr	r2, [r2, #48]
 1743 0026 4021     		mov	r1, #64
 1744 0028 8A43     		bic	r2, r1
 1745 002a 1A63     		str	r2, [r3, #48]
 830:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set CECSW bits according to RCC_CECCLK value */
 831:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_CECCLK;
 1746              		.loc 1 831 0
 1747 002c 064B     		ldr	r3, .L101+8
 1748 002e 064A     		ldr	r2, .L101+8
 1749 0030 116B     		ldr	r1, [r2, #48]
 1750 0032 7A68     		ldr	r2, [r7, #4]
 1751 0034 0A43     		orr	r2, r1
 1752 0036 1A63     		str	r2, [r3, #48]
 832:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1753              		.loc 1 832 0
 1754 0038 BD46     		mov	sp, r7
 1755 003a 02B0     		add	sp, sp, #8
 1756              		@ sp needed
 1757 003c 80BD     		pop	{r7, pc}
 1758              	.L102:
 1759 003e C046     		.align	2
 1760              	.L101:
 1761 0040 00000000 		.word	.LC0
 1762 0044 3A030000 		.word	826
 1763 0048 00100240 		.word	1073876992
 1764              		.cfi_endproc
 1765              	.LFE53:
 1767              		.section	.text.RCC_I2CCLKConfig,"ax",%progbits
 1768              		.align	2
 1769              		.global	RCC_I2CCLKConfig
 1770              		.code	16
 1771              		.thumb_func
 1773              	RCC_I2CCLKConfig:
 1774              	.LFB54:
 833:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 834:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 835:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the I2C1 clock (I2C1CLK).
 836:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_I2CCLK: defines the I2C1 clock source. This clock is derived 
 837:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI or System clock.
 838:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be one of the following values:
 839:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_I2C1CLK_HSI: I2C1 clock = HSI
 840:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_I2C1CLK_SYSCLK: I2C1 clock = System Clock
 841:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 842:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 843:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
 844:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 1775              		.loc 1 844 0
 1776              		.cfi_startproc
 1777 0000 80B5     		push	{r7, lr}
 1778              		.cfi_def_cfa_offset 8
 1779              		.cfi_offset 7, -8
 1780              		.cfi_offset 14, -4
 1781 0002 82B0     		sub	sp, sp, #8
 1782              		.cfi_def_cfa_offset 16
 1783 0004 00AF     		add	r7, sp, #0
 1784              		.cfi_def_cfa_register 7
 1785 0006 7860     		str	r0, [r7, #4]
 845:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 846:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));
 1786              		.loc 1 846 0
 1787 0008 7B68     		ldr	r3, [r7, #4]
 1788 000a 002B     		cmp	r3, #0
 1789 000c 08D0     		beq	.L104
 1790              		.loc 1 846 0 is_stmt 0 discriminator 1
 1791 000e 7B68     		ldr	r3, [r7, #4]
 1792 0010 102B     		cmp	r3, #16
 1793 0012 05D0     		beq	.L104
 1794 0014 0A4A     		ldr	r2, .L105
 1795 0016 0B4B     		ldr	r3, .L105+4
 1796 0018 101C     		mov	r0, r2
 1797 001a 191C     		mov	r1, r3
 1798 001c FFF7FEFF 		bl	assert_failed
 1799              	.L104:
 847:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 848:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear I2CSW bit */
 849:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 1800              		.loc 1 849 0 is_stmt 1
 1801 0020 094B     		ldr	r3, .L105+8
 1802 0022 094A     		ldr	r2, .L105+8
 1803 0024 126B     		ldr	r2, [r2, #48]
 1804 0026 1021     		mov	r1, #16
 1805 0028 8A43     		bic	r2, r1
 1806 002a 1A63     		str	r2, [r3, #48]
 850:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set I2CSW bits according to RCC_I2CCLK value */
 851:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_I2CCLK;
 1807              		.loc 1 851 0
 1808 002c 064B     		ldr	r3, .L105+8
 1809 002e 064A     		ldr	r2, .L105+8
 1810 0030 116B     		ldr	r1, [r2, #48]
 1811 0032 7A68     		ldr	r2, [r7, #4]
 1812 0034 0A43     		orr	r2, r1
 1813 0036 1A63     		str	r2, [r3, #48]
 852:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1814              		.loc 1 852 0
 1815 0038 BD46     		mov	sp, r7
 1816 003a 02B0     		add	sp, sp, #8
 1817              		@ sp needed
 1818 003c 80BD     		pop	{r7, pc}
 1819              	.L106:
 1820 003e C046     		.align	2
 1821              	.L105:
 1822 0040 00000000 		.word	.LC0
 1823 0044 4E030000 		.word	846
 1824 0048 00100240 		.word	1073876992
 1825              		.cfi_endproc
 1826              	.LFE54:
 1828              		.section	.text.RCC_USARTCLKConfig,"ax",%progbits
 1829              		.align	2
 1830              		.global	RCC_USARTCLKConfig
 1831              		.code	16
 1832              		.thumb_func
 1834              	RCC_USARTCLKConfig:
 1835              	.LFB55:
 853:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 854:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 855:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the USART1 clock (USART1CLK).
 856:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_USARTCLK: defines the USART1 clock source. This clock is derived 
 857:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI or System clock.
 858:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be one of the following values:
 859:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_PCLK: USART1 clock = APB Clock (PCLK)
 860:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_SYSCLK: USART1 clock = System Clock
 861:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_LSE: USART1 clock = LSE Clock
 862:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_HSI: USART1 clock = HSI Clock
 863:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 864:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 865:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
 866:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 1836              		.loc 1 866 0
 1837              		.cfi_startproc
 1838 0000 80B5     		push	{r7, lr}
 1839              		.cfi_def_cfa_offset 8
 1840              		.cfi_offset 7, -8
 1841              		.cfi_offset 14, -4
 1842 0002 82B0     		sub	sp, sp, #8
 1843              		.cfi_def_cfa_offset 16
 1844 0004 00AF     		add	r7, sp, #0
 1845              		.cfi_def_cfa_register 7
 1846 0006 7860     		str	r0, [r7, #4]
 867:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 868:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));
 1847              		.loc 1 868 0
 1848 0008 7B68     		ldr	r3, [r7, #4]
 1849 000a 002B     		cmp	r3, #0
 1850 000c 0FD0     		beq	.L108
 1851              		.loc 1 868 0 is_stmt 0 discriminator 1
 1852 000e 7B68     		ldr	r3, [r7, #4]
 1853 0010 012B     		cmp	r3, #1
 1854 0012 0CD0     		beq	.L108
 1855 0014 7B68     		ldr	r3, [r7, #4]
 1856 0016 022B     		cmp	r3, #2
 1857 0018 09D0     		beq	.L108
 1858 001a 7B68     		ldr	r3, [r7, #4]
 1859 001c 032B     		cmp	r3, #3
 1860 001e 06D0     		beq	.L108
 1861 0020 0A4A     		ldr	r2, .L109
 1862 0022 D923     		mov	r3, #217
 1863 0024 9B00     		lsl	r3, r3, #2
 1864 0026 101C     		mov	r0, r2
 1865 0028 191C     		mov	r1, r3
 1866 002a FFF7FEFF 		bl	assert_failed
 1867              	.L108:
 869:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 870:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear USARTSW[1:0] bit */
 871:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 1868              		.loc 1 871 0 is_stmt 1
 1869 002e 084B     		ldr	r3, .L109+4
 1870 0030 074A     		ldr	r2, .L109+4
 1871 0032 126B     		ldr	r2, [r2, #48]
 1872 0034 0321     		mov	r1, #3
 1873 0036 8A43     		bic	r2, r1
 1874 0038 1A63     		str	r2, [r3, #48]
 872:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set USARTSW bits according to RCC_USARTCLK value */
 873:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_USARTCLK;
 1875              		.loc 1 873 0
 1876 003a 054B     		ldr	r3, .L109+4
 1877 003c 044A     		ldr	r2, .L109+4
 1878 003e 116B     		ldr	r1, [r2, #48]
 1879 0040 7A68     		ldr	r2, [r7, #4]
 1880 0042 0A43     		orr	r2, r1
 1881 0044 1A63     		str	r2, [r3, #48]
 874:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1882              		.loc 1 874 0
 1883 0046 BD46     		mov	sp, r7
 1884 0048 02B0     		add	sp, sp, #8
 1885              		@ sp needed
 1886 004a 80BD     		pop	{r7, pc}
 1887              	.L110:
 1888              		.align	2
 1889              	.L109:
 1890 004c 00000000 		.word	.LC0
 1891 0050 00100240 		.word	1073876992
 1892              		.cfi_endproc
 1893              	.LFE55:
 1895              		.global	__aeabi_uidiv
 1896              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1897              		.align	2
 1898              		.global	RCC_GetClocksFreq
 1899              		.code	16
 1900              		.thumb_func
 1902              	RCC_GetClocksFreq:
 1903              	.LFB56:
 875:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 876:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 877:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Returns the frequencies of the System, AHB and APB busses clocks.
 878:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note    The frequency returned by this function is not the real frequency
 879:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           in the chip. It is calculated based on the predefined constant and
 880:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           the source selected by RCC_SYSCLKConfig():
 881:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                                              
 882:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns constant HSI_VALUE(*)
 883:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                                              
 884:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns constant HSE_VALUE(**)
 885:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                          
 886:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns constant HSE_VALUE(**) 
 887:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 888:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         
 889:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         (*) HSI_VALUE is a constant defined in stm32f0xx.h file (default value
 890:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             8 MHz) but the real value may vary depending on the variations
 891:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             in voltage and temperature, refer to RCC_AdjustHSICalibrationValue().   
 892:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *    
 893:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         (**) HSE_VALUE is a constant defined in stm32f0xx.h file (default value
 894:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 895:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              frequency of the crystal used. Otherwise, this function may
 896:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              return wrong result.
 897:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                
 898:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         - The result of this function could be not correct when using fractional
 899:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           value for HSE crystal.   
 900:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             
 901:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold 
 902:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the clocks frequencies. 
 903:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     
 904:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     This function can be used by the user application to compute the 
 905:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           baudrate for the communication peripherals or configure other parameters.
 906:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     Each time SYSCLK, HCLK and/or PCLK clock changes, this function
 907:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           must be called to update the structure's field. Otherwise, any
 908:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           configuration based on this function will be incorrect.
 909:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *    
 910:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 911:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 912:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 913:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1904              		.loc 1 913 0
 1905              		.cfi_startproc
 1906 0000 80B5     		push	{r7, lr}
 1907              		.cfi_def_cfa_offset 8
 1908              		.cfi_offset 7, -8
 1909              		.cfi_offset 14, -4
 1910 0002 88B0     		sub	sp, sp, #32
 1911              		.cfi_def_cfa_offset 40
 1912 0004 00AF     		add	r7, sp, #0
 1913              		.cfi_def_cfa_register 7
 1914 0006 7860     		str	r0, [r7, #4]
 914:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;
 1915              		.loc 1 914 0
 1916 0008 0023     		mov	r3, #0
 1917 000a FB61     		str	r3, [r7, #28]
 1918 000c 0023     		mov	r3, #0
 1919 000e BB61     		str	r3, [r7, #24]
 1920 0010 0023     		mov	r3, #0
 1921 0012 7B61     		str	r3, [r7, #20]
 1922 0014 0023     		mov	r3, #0
 1923 0016 3B61     		str	r3, [r7, #16]
 1924 0018 0023     		mov	r3, #0
 1925 001a FB60     		str	r3, [r7, #12]
 915:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 916:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 917:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1926              		.loc 1 917 0
 1927 001c 654B     		ldr	r3, .L131
 1928 001e 5A68     		ldr	r2, [r3, #4]
 1929 0020 0C23     		mov	r3, #12
 1930 0022 1340     		and	r3, r2
 1931 0024 FB61     		str	r3, [r7, #28]
 918:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 919:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   switch (tmp)
 1932              		.loc 1 919 0
 1933 0026 FB69     		ldr	r3, [r7, #28]
 1934 0028 042B     		cmp	r3, #4
 1935 002a 07D0     		beq	.L113
 1936 002c 082B     		cmp	r3, #8
 1937 002e 09D0     		beq	.L114
 1938 0030 002B     		cmp	r3, #0
 1939 0032 30D1     		bne	.L130
 920:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 921:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     case 0x00:  /* HSI used as system clock */
 922:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1940              		.loc 1 922 0
 1941 0034 7B68     		ldr	r3, [r7, #4]
 1942 0036 604A     		ldr	r2, .L131+4
 1943 0038 1A60     		str	r2, [r3]
 923:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
 1944              		.loc 1 923 0
 1945 003a 30E0     		b	.L116
 1946              	.L113:
 924:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     case 0x04:  /* HSE used as system clock */
 925:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1947              		.loc 1 925 0
 1948 003c 7B68     		ldr	r3, [r7, #4]
 1949 003e 5E4A     		ldr	r2, .L131+4
 1950 0040 1A60     		str	r2, [r3]
 926:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
 1951              		.loc 1 926 0
 1952 0042 2CE0     		b	.L116
 1953              	.L114:
 927:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     case 0x08:  /* PLL used as system clock */
 928:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 929:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 1954              		.loc 1 929 0
 1955 0044 5B4B     		ldr	r3, .L131
 1956 0046 5A68     		ldr	r2, [r3, #4]
 1957 0048 F023     		mov	r3, #240
 1958 004a 9B03     		lsl	r3, r3, #14
 1959 004c 1340     		and	r3, r2
 1960 004e BB61     		str	r3, [r7, #24]
 930:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 1961              		.loc 1 930 0
 1962 0050 584B     		ldr	r3, .L131
 1963 0052 5A68     		ldr	r2, [r3, #4]
 1964 0054 8023     		mov	r3, #128
 1965 0056 5B02     		lsl	r3, r3, #9
 1966 0058 1340     		and	r3, r2
 1967 005a 7B61     		str	r3, [r7, #20]
 931:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1968              		.loc 1 931 0
 1969 005c BB69     		ldr	r3, [r7, #24]
 1970 005e 9B0C     		lsr	r3, r3, #18
 1971 0060 0233     		add	r3, r3, #2
 1972 0062 BB61     		str	r3, [r7, #24]
 932:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       
 933:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       if (pllsource == 0x00)
 1973              		.loc 1 933 0
 1974 0064 7B69     		ldr	r3, [r7, #20]
 1975 0066 002B     		cmp	r3, #0
 1976 0068 05D1     		bne	.L117
 934:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       {
 935:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 936:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 1977              		.loc 1 936 0
 1978 006a BB69     		ldr	r3, [r7, #24]
 1979 006c 534A     		ldr	r2, .L131+8
 1980 006e 5A43     		mul	r2, r3
 1981 0070 7B68     		ldr	r3, [r7, #4]
 1982 0072 1A60     		str	r2, [r3]
 937:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       }
 938:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       else
 939:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       {
 940:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 941:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 942:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 943:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       }      
 944:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
 1983              		.loc 1 944 0
 1984 0074 13E0     		b	.L116
 1985              	.L117:
 940:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 1986              		.loc 1 940 0
 1987 0076 4F4B     		ldr	r3, .L131
 1988 0078 DA6A     		ldr	r2, [r3, #44]
 1989 007a 0F23     		mov	r3, #15
 1990 007c 1340     		and	r3, r2
 1991 007e 0133     		add	r3, r3, #1
 1992 0080 3B61     		str	r3, [r7, #16]
 942:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 1993              		.loc 1 942 0
 1994 0082 4D48     		ldr	r0, .L131+4
 1995 0084 3969     		ldr	r1, [r7, #16]
 1996 0086 FFF7FEFF 		bl	__aeabi_uidiv
 1997 008a 031C     		mov	r3, r0
 1998 008c BA69     		ldr	r2, [r7, #24]
 1999 008e 5A43     		mul	r2, r3
 2000 0090 7B68     		ldr	r3, [r7, #4]
 2001 0092 1A60     		str	r2, [r3]
 2002              		.loc 1 944 0
 2003 0094 03E0     		b	.L116
 2004              	.L130:
 945:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     default: /* HSI used as system clock */
 946:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 2005              		.loc 1 946 0
 2006 0096 7B68     		ldr	r3, [r7, #4]
 2007 0098 474A     		ldr	r2, .L131+4
 2008 009a 1A60     		str	r2, [r3]
 947:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
 2009              		.loc 1 947 0
 2010 009c C046     		mov	r8, r8
 2011              	.L116:
 948:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 949:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
 950:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get HCLK prescaler */
 951:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 2012              		.loc 1 951 0
 2013 009e 454B     		ldr	r3, .L131
 2014 00a0 5A68     		ldr	r2, [r3, #4]
 2015 00a2 F023     		mov	r3, #240
 2016 00a4 1340     		and	r3, r2
 2017 00a6 FB61     		str	r3, [r7, #28]
 952:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = tmp >> 4;
 2018              		.loc 1 952 0
 2019 00a8 FB69     		ldr	r3, [r7, #28]
 2020 00aa 1B09     		lsr	r3, r3, #4
 2021 00ac FB61     		str	r3, [r7, #28]
 953:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   presc = APBAHBPrescTable[tmp]; 
 2022              		.loc 1 953 0
 2023 00ae 444A     		ldr	r2, .L131+12
 2024 00b0 FB69     		ldr	r3, [r7, #28]
 2025 00b2 D318     		add	r3, r2, r3
 2026 00b4 1B78     		ldrb	r3, [r3]
 2027 00b6 DBB2     		uxtb	r3, r3
 2028 00b8 FB60     		str	r3, [r7, #12]
 954:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* HCLK clock frequency */
 955:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 2029              		.loc 1 955 0
 2030 00ba 7B68     		ldr	r3, [r7, #4]
 2031 00bc 1A68     		ldr	r2, [r3]
 2032 00be FB68     		ldr	r3, [r7, #12]
 2033 00c0 DA40     		lsr	r2, r2, r3
 2034 00c2 7B68     		ldr	r3, [r7, #4]
 2035 00c4 5A60     		str	r2, [r3, #4]
 956:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 957:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get PCLK prescaler */
 958:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE;
 2036              		.loc 1 958 0
 2037 00c6 3B4B     		ldr	r3, .L131
 2038 00c8 5A68     		ldr	r2, [r3, #4]
 2039 00ca E023     		mov	r3, #224
 2040 00cc DB00     		lsl	r3, r3, #3
 2041 00ce 1340     		and	r3, r2
 2042 00d0 FB61     		str	r3, [r7, #28]
 959:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = tmp >> 8;
 2043              		.loc 1 959 0
 2044 00d2 FB69     		ldr	r3, [r7, #28]
 2045 00d4 1B0A     		lsr	r3, r3, #8
 2046 00d6 FB61     		str	r3, [r7, #28]
 960:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 2047              		.loc 1 960 0
 2048 00d8 394A     		ldr	r2, .L131+12
 2049 00da FB69     		ldr	r3, [r7, #28]
 2050 00dc D318     		add	r3, r2, r3
 2051 00de 1B78     		ldrb	r3, [r3]
 2052 00e0 DBB2     		uxtb	r3, r3
 2053 00e2 FB60     		str	r3, [r7, #12]
 961:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* PCLK clock frequency */
 962:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 2054              		.loc 1 962 0
 2055 00e4 7B68     		ldr	r3, [r7, #4]
 2056 00e6 5A68     		ldr	r2, [r3, #4]
 2057 00e8 FB68     		ldr	r3, [r7, #12]
 2058 00ea DA40     		lsr	r2, r2, r3
 2059 00ec 7B68     		ldr	r3, [r7, #4]
 2060 00ee 9A60     		str	r2, [r3, #8]
 963:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 964:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* ADCCLK clock frequency */
 965:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 2061              		.loc 1 965 0
 2062 00f0 304B     		ldr	r3, .L131
 2063 00f2 1A6B     		ldr	r2, [r3, #48]
 2064 00f4 8023     		mov	r3, #128
 2065 00f6 5B00     		lsl	r3, r3, #1
 2066 00f8 1340     		and	r3, r2
 2067 00fa 03D1     		bne	.L119
 966:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 967:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* ADC Clock is HSI14 Osc. */
 968:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 2068              		.loc 1 968 0
 2069 00fc 7B68     		ldr	r3, [r7, #4]
 2070 00fe 314A     		ldr	r2, .L131+16
 2071 0100 DA60     		str	r2, [r3, #12]
 2072 0102 10E0     		b	.L120
 2073              	.L119:
 969:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 970:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 971:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 972:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 2074              		.loc 1 972 0
 2075 0104 2B4B     		ldr	r3, .L131
 2076 0106 5A68     		ldr	r2, [r3, #4]
 2077 0108 8023     		mov	r3, #128
 2078 010a DB01     		lsl	r3, r3, #7
 2079 010c 1340     		and	r3, r2
 2080 010e 05D1     		bne	.L121
 973:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     {
 974:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       /* ADC Clock is derived from PCLK/2 */
 975:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 2081              		.loc 1 975 0
 2082 0110 7B68     		ldr	r3, [r7, #4]
 2083 0112 9B68     		ldr	r3, [r3, #8]
 2084 0114 5A08     		lsr	r2, r3, #1
 2085 0116 7B68     		ldr	r3, [r7, #4]
 2086 0118 DA60     		str	r2, [r3, #12]
 2087 011a 04E0     		b	.L120
 2088              	.L121:
 976:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     }
 977:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     else
 978:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     {
 979:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       /* ADC Clock is derived from PCLK/4 */
 980:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 2089              		.loc 1 980 0
 2090 011c 7B68     		ldr	r3, [r7, #4]
 2091 011e 9B68     		ldr	r3, [r3, #8]
 2092 0120 9A08     		lsr	r2, r3, #2
 2093 0122 7B68     		ldr	r3, [r7, #4]
 2094 0124 DA60     		str	r2, [r3, #12]
 2095              	.L120:
 981:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     }
 982:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     
 983:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 984:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 985:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* CECCLK clock frequency */
 986:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 2096              		.loc 1 986 0
 2097 0126 234B     		ldr	r3, .L131
 2098 0128 1A6B     		ldr	r2, [r3, #48]
 2099 012a 4023     		mov	r3, #64
 2100 012c 1340     		and	r3, r2
 2101 012e 03D1     		bne	.L122
 987:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 988:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* CEC Clock is HSI/256 */
 989:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 2102              		.loc 1 989 0
 2103 0130 7B68     		ldr	r3, [r7, #4]
 2104 0132 254A     		ldr	r2, .L131+20
 2105 0134 1A61     		str	r2, [r3, #16]
 2106 0136 03E0     		b	.L123
 2107              	.L122:
 990:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 991:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 992:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 993:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* CECC Clock is LSE Osc. */
 994:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 2108              		.loc 1 994 0
 2109 0138 7B68     		ldr	r3, [r7, #4]
 2110 013a 8022     		mov	r2, #128
 2111 013c 1202     		lsl	r2, r2, #8
 2112 013e 1A61     		str	r2, [r3, #16]
 2113              	.L123:
 995:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 996:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 997:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* I2C1CLK clock frequency */
 998:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 2114              		.loc 1 998 0
 2115 0140 1C4B     		ldr	r3, .L131
 2116 0142 1A6B     		ldr	r2, [r3, #48]
 2117 0144 1023     		mov	r3, #16
 2118 0146 1340     		and	r3, r2
 2119 0148 03D1     		bne	.L124
 999:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1000:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* I2C1 Clock is HSI Osc. */
1001:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 2120              		.loc 1 1001 0
 2121 014a 7B68     		ldr	r3, [r7, #4]
 2122 014c 1A4A     		ldr	r2, .L131+4
 2123 014e 5A61     		str	r2, [r3, #20]
 2124 0150 03E0     		b	.L125
 2125              	.L124:
1002:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1003:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1004:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1005:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* I2C1 Clock is System Clock */
1006:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 2126              		.loc 1 1006 0
 2127 0152 7B68     		ldr	r3, [r7, #4]
 2128 0154 1A68     		ldr	r2, [r3]
 2129 0156 7B68     		ldr	r3, [r7, #4]
 2130 0158 5A61     		str	r2, [r3, #20]
 2131              	.L125:
1007:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1008:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1009:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* USART1CLK clock frequency */
1010:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 2132              		.loc 1 1010 0
 2133 015a 164B     		ldr	r3, .L131
 2134 015c 1A6B     		ldr	r2, [r3, #48]
 2135 015e 0323     		mov	r3, #3
 2136 0160 1340     		and	r3, r2
 2137 0162 04D1     		bne	.L126
1011:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1012:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART1 Clock is PCLK */
1013:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 2138              		.loc 1 1013 0
 2139 0164 7B68     		ldr	r3, [r7, #4]
 2140 0166 9A68     		ldr	r2, [r3, #8]
 2141 0168 7B68     		ldr	r3, [r7, #4]
 2142 016a 9A61     		str	r2, [r3, #24]
 2143 016c 1EE0     		b	.L111
 2144              	.L126:
1014:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1015:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 2145              		.loc 1 1015 0
 2146 016e 114B     		ldr	r3, .L131
 2147 0170 1A6B     		ldr	r2, [r3, #48]
 2148 0172 0323     		mov	r3, #3
 2149 0174 1340     		and	r3, r2
 2150 0176 012B     		cmp	r3, #1
 2151 0178 04D1     		bne	.L128
1016:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1017:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART1 Clock is System Clock */
1018:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 2152              		.loc 1 1018 0
 2153 017a 7B68     		ldr	r3, [r7, #4]
 2154 017c 1A68     		ldr	r2, [r3]
 2155 017e 7B68     		ldr	r3, [r7, #4]
 2156 0180 9A61     		str	r2, [r3, #24]
 2157 0182 13E0     		b	.L111
 2158              	.L128:
1019:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1020:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 2159              		.loc 1 1020 0
 2160 0184 0B4B     		ldr	r3, .L131
 2161 0186 1A6B     		ldr	r2, [r3, #48]
 2162 0188 0323     		mov	r3, #3
 2163 018a 1340     		and	r3, r2
 2164 018c 022B     		cmp	r3, #2
 2165 018e 04D1     		bne	.L129
1021:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1022:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART1 Clock is LSE Osc. */
1023:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 2166              		.loc 1 1023 0
 2167 0190 7B68     		ldr	r3, [r7, #4]
 2168 0192 8022     		mov	r2, #128
 2169 0194 1202     		lsl	r2, r2, #8
 2170 0196 9A61     		str	r2, [r3, #24]
 2171 0198 08E0     		b	.L111
 2172              	.L129:
1024:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1025:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 2173              		.loc 1 1025 0
 2174 019a 064B     		ldr	r3, .L131
 2175 019c 1A6B     		ldr	r2, [r3, #48]
 2176 019e 0323     		mov	r3, #3
 2177 01a0 1340     		and	r3, r2
 2178 01a2 032B     		cmp	r3, #3
 2179 01a4 02D1     		bne	.L111
1026:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1027:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART1 Clock is HSI Osc. */
1028:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 2180              		.loc 1 1028 0
 2181 01a6 7B68     		ldr	r3, [r7, #4]
 2182 01a8 034A     		ldr	r2, .L131+4
 2183 01aa 9A61     		str	r2, [r3, #24]
 2184              	.L111:
1029:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1030:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1031:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 2185              		.loc 1 1031 0
 2186 01ac BD46     		mov	sp, r7
 2187 01ae 08B0     		add	sp, sp, #32
 2188              		@ sp needed
 2189 01b0 80BD     		pop	{r7, pc}
 2190              	.L132:
 2191 01b2 C046     		.align	2
 2192              	.L131:
 2193 01b4 00100240 		.word	1073876992
 2194 01b8 00127A00 		.word	8000000
 2195 01bc 00093D00 		.word	4000000
 2196 01c0 00000000 		.word	APBAHBPrescTable
 2197 01c4 809FD500 		.word	14000000
 2198 01c8 12800000 		.word	32786
 2199              		.cfi_endproc
 2200              	.LFE56:
 2202              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 2203              		.align	2
 2204              		.global	RCC_RTCCLKConfig
 2205              		.code	16
 2206              		.thumb_func
 2208              	RCC_RTCCLKConfig:
 2209              	.LFB57:
1032:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1033:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1034:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1035:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @}
1036:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1037:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1038:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1039:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1040:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *
1041:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @verbatim
1042:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
1043:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              #####Peripheral clocks configuration functions #####
1044:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================  
1045:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1046:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1047:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) The RTC clock which is derived from the LSE, LSI or  HSE_Div32 (HSE
1048:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              divided by 32).
1049:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1050:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              except internal SRAM, Flash and SWD. Before to start using a peripheral you
1051:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd(),
1052:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1053:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) To reset the peripherals configuration (to the default state after device reset)
1054:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1055:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              RCC_APB1PeriphResetCmd() functions.
1056:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1057:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @endverbatim
1058:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
1059:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1060:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1061:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1062:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1063:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     As the RTC clock configuration bits are in the Backup domain and write
1064:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           access is denied to this domain after reset, you have to enable write
1065:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           access using PWR_BackupAccessCmd(ENABLE) function before to configure
1066:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           the RTC clock source (to be done once after reset).    
1067:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     Once the RTC clock is configured it can't be changed unless the RTC
1068:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           is reset using RCC_BackupResetCmd function, or by a Power On Reset (POR)
1069:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             
1070:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1071:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *   This parameter can be one of the following values:
1072:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1073:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1074:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div32: HSE divided by 32 selected as RTC clock
1075:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *       
1076:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     If the LSE or LSI is used as RTC clock source, the RTC continues to
1077:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           work in STOP and STANDBY modes, and can be used as wakeup source.
1078:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           However, when the HSE clock is used as RTC clock source, the RTC
1079:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           cannot be used in STOP and STANDBY modes.
1080:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             
1081:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     The maximum input clock frequency for RTC is 2MHz (when using HSE as
1082:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           RTC clock source).
1083:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                          
1084:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1085:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1086:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1087:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 2210              		.loc 1 1087 0
 2211              		.cfi_startproc
 2212 0000 80B5     		push	{r7, lr}
 2213              		.cfi_def_cfa_offset 8
 2214              		.cfi_offset 7, -8
 2215              		.cfi_offset 14, -4
 2216 0002 82B0     		sub	sp, sp, #8
 2217              		.cfi_def_cfa_offset 16
 2218 0004 00AF     		add	r7, sp, #0
 2219              		.cfi_def_cfa_register 7
 2220 0006 7860     		str	r0, [r7, #4]
1088:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1089:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 2221              		.loc 1 1089 0
 2222 0008 7A68     		ldr	r2, [r7, #4]
 2223 000a 8023     		mov	r3, #128
 2224 000c 5B00     		lsl	r3, r3, #1
 2225 000e 9A42     		cmp	r2, r3
 2226 0010 0FD0     		beq	.L134
 2227              		.loc 1 1089 0 is_stmt 0 discriminator 1
 2228 0012 7A68     		ldr	r2, [r7, #4]
 2229 0014 8023     		mov	r3, #128
 2230 0016 9B00     		lsl	r3, r3, #2
 2231 0018 9A42     		cmp	r2, r3
 2232 001a 0AD0     		beq	.L134
 2233 001c 7A68     		ldr	r2, [r7, #4]
 2234 001e C023     		mov	r3, #192
 2235 0020 9B00     		lsl	r3, r3, #2
 2236 0022 9A42     		cmp	r2, r3
 2237 0024 05D0     		beq	.L134
 2238 0026 074A     		ldr	r2, .L135
 2239 0028 074B     		ldr	r3, .L135+4
 2240 002a 101C     		mov	r0, r2
 2241 002c 191C     		mov	r1, r3
 2242 002e FFF7FEFF 		bl	assert_failed
 2243              	.L134:
1090:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1091:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Select the RTC clock source */
1092:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 2244              		.loc 1 1092 0 is_stmt 1
 2245 0032 064B     		ldr	r3, .L135+8
 2246 0034 054A     		ldr	r2, .L135+8
 2247 0036 116A     		ldr	r1, [r2, #32]
 2248 0038 7A68     		ldr	r2, [r7, #4]
 2249 003a 0A43     		orr	r2, r1
 2250 003c 1A62     		str	r2, [r3, #32]
1093:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 2251              		.loc 1 1093 0
 2252 003e BD46     		mov	sp, r7
 2253 0040 02B0     		add	sp, sp, #8
 2254              		@ sp needed
 2255 0042 80BD     		pop	{r7, pc}
 2256              	.L136:
 2257              		.align	2
 2258              	.L135:
 2259 0044 00000000 		.word	.LC0
 2260 0048 41040000 		.word	1089
 2261 004c 00100240 		.word	1073876992
 2262              		.cfi_endproc
 2263              	.LFE57:
 2265              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 2266              		.align	2
 2267              		.global	RCC_RTCCLKCmd
 2268              		.code	16
 2269              		.thumb_func
 2271              	RCC_RTCCLKCmd:
 2272              	.LFB58:
1094:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1095:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1096:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1097:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1098:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1099:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the RTC clock.
1100:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
1101:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1102:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1103:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1104:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 2273              		.loc 1 1104 0
 2274              		.cfi_startproc
 2275 0000 80B5     		push	{r7, lr}
 2276              		.cfi_def_cfa_offset 8
 2277              		.cfi_offset 7, -8
 2278              		.cfi_offset 14, -4
 2279 0002 82B0     		sub	sp, sp, #8
 2280              		.cfi_def_cfa_offset 16
 2281 0004 00AF     		add	r7, sp, #0
 2282              		.cfi_def_cfa_register 7
 2283 0006 021C     		mov	r2, r0
 2284 0008 FB1D     		add	r3, r7, #7
 2285 000a 1A70     		strb	r2, [r3]
1105:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1106:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2286              		.loc 1 1106 0
 2287 000c FB1D     		add	r3, r7, #7
 2288 000e 1B78     		ldrb	r3, [r3]
 2289 0010 002B     		cmp	r3, #0
 2290 0012 09D0     		beq	.L138
 2291              		.loc 1 1106 0 is_stmt 0 discriminator 1
 2292 0014 FB1D     		add	r3, r7, #7
 2293 0016 1B78     		ldrb	r3, [r3]
 2294 0018 012B     		cmp	r3, #1
 2295 001a 05D0     		beq	.L138
 2296 001c 0D4A     		ldr	r2, .L141
 2297 001e 0E4B     		ldr	r3, .L141+4
 2298 0020 101C     		mov	r0, r2
 2299 0022 191C     		mov	r1, r3
 2300 0024 FFF7FEFF 		bl	assert_failed
 2301              	.L138:
1107:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1108:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 2302              		.loc 1 1108 0 is_stmt 1
 2303 0028 FB1D     		add	r3, r7, #7
 2304 002a 1B78     		ldrb	r3, [r3]
 2305 002c 002B     		cmp	r3, #0
 2306 002e 07D0     		beq	.L139
1109:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1110:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->BDCR |= RCC_BDCR_RTCEN;
 2307              		.loc 1 1110 0
 2308 0030 0A4B     		ldr	r3, .L141+8
 2309 0032 0A4A     		ldr	r2, .L141+8
 2310 0034 126A     		ldr	r2, [r2, #32]
 2311 0036 8021     		mov	r1, #128
 2312 0038 0902     		lsl	r1, r1, #8
 2313 003a 0A43     		orr	r2, r1
 2314 003c 1A62     		str	r2, [r3, #32]
 2315 003e 05E0     		b	.L137
 2316              	.L139:
1111:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1112:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1113:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1114:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->BDCR &= ~RCC_BDCR_RTCEN;
 2317              		.loc 1 1114 0
 2318 0040 064B     		ldr	r3, .L141+8
 2319 0042 064A     		ldr	r2, .L141+8
 2320 0044 116A     		ldr	r1, [r2, #32]
 2321 0046 064A     		ldr	r2, .L141+12
 2322 0048 0A40     		and	r2, r1
 2323 004a 1A62     		str	r2, [r3, #32]
 2324              	.L137:
1115:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1116:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 2325              		.loc 1 1116 0
 2326 004c BD46     		mov	sp, r7
 2327 004e 02B0     		add	sp, sp, #8
 2328              		@ sp needed
 2329 0050 80BD     		pop	{r7, pc}
 2330              	.L142:
 2331 0052 C046     		.align	2
 2332              	.L141:
 2333 0054 00000000 		.word	.LC0
 2334 0058 52040000 		.word	1106
 2335 005c 00100240 		.word	1073876992
 2336 0060 FF7FFFFF 		.word	-32769
 2337              		.cfi_endproc
 2338              	.LFE58:
 2340              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 2341              		.align	2
 2342              		.global	RCC_BackupResetCmd
 2343              		.code	16
 2344              		.thumb_func
 2346              	RCC_BackupResetCmd:
 2347              	.LFB59:
1117:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1118:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1119:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1120:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1121:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and the RTC clock source selection in RCC_BDCR register.
1122:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1123:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
1124:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1125:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1126:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1127:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 2348              		.loc 1 1127 0
 2349              		.cfi_startproc
 2350 0000 80B5     		push	{r7, lr}
 2351              		.cfi_def_cfa_offset 8
 2352              		.cfi_offset 7, -8
 2353              		.cfi_offset 14, -4
 2354 0002 82B0     		sub	sp, sp, #8
 2355              		.cfi_def_cfa_offset 16
 2356 0004 00AF     		add	r7, sp, #0
 2357              		.cfi_def_cfa_register 7
 2358 0006 021C     		mov	r2, r0
 2359 0008 FB1D     		add	r3, r7, #7
 2360 000a 1A70     		strb	r2, [r3]
1128:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1129:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2361              		.loc 1 1129 0
 2362 000c FB1D     		add	r3, r7, #7
 2363 000e 1B78     		ldrb	r3, [r3]
 2364 0010 002B     		cmp	r3, #0
 2365 0012 09D0     		beq	.L144
 2366              		.loc 1 1129 0 is_stmt 0 discriminator 1
 2367 0014 FB1D     		add	r3, r7, #7
 2368 0016 1B78     		ldrb	r3, [r3]
 2369 0018 012B     		cmp	r3, #1
 2370 001a 05D0     		beq	.L144
 2371 001c 0D4A     		ldr	r2, .L147
 2372 001e 0E4B     		ldr	r3, .L147+4
 2373 0020 101C     		mov	r0, r2
 2374 0022 191C     		mov	r1, r3
 2375 0024 FFF7FEFF 		bl	assert_failed
 2376              	.L144:
1130:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1131:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 2377              		.loc 1 1131 0 is_stmt 1
 2378 0028 FB1D     		add	r3, r7, #7
 2379 002a 1B78     		ldrb	r3, [r3]
 2380 002c 002B     		cmp	r3, #0
 2381 002e 07D0     		beq	.L145
1132:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1133:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->BDCR |= RCC_BDCR_BDRST;
 2382              		.loc 1 1133 0
 2383 0030 0A4B     		ldr	r3, .L147+8
 2384 0032 0A4A     		ldr	r2, .L147+8
 2385 0034 126A     		ldr	r2, [r2, #32]
 2386 0036 8021     		mov	r1, #128
 2387 0038 4902     		lsl	r1, r1, #9
 2388 003a 0A43     		orr	r2, r1
 2389 003c 1A62     		str	r2, [r3, #32]
 2390 003e 05E0     		b	.L143
 2391              	.L145:
1134:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1135:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1136:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1137:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->BDCR &= ~RCC_BDCR_BDRST;
 2392              		.loc 1 1137 0
 2393 0040 064B     		ldr	r3, .L147+8
 2394 0042 064A     		ldr	r2, .L147+8
 2395 0044 116A     		ldr	r1, [r2, #32]
 2396 0046 064A     		ldr	r2, .L147+12
 2397 0048 0A40     		and	r2, r1
 2398 004a 1A62     		str	r2, [r3, #32]
 2399              	.L143:
1138:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1139:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 2400              		.loc 1 1139 0
 2401 004c BD46     		mov	sp, r7
 2402 004e 02B0     		add	sp, sp, #8
 2403              		@ sp needed
 2404 0050 80BD     		pop	{r7, pc}
 2405              	.L148:
 2406 0052 C046     		.align	2
 2407              	.L147:
 2408 0054 00000000 		.word	.LC0
 2409 0058 69040000 		.word	1129
 2410 005c 00100240 		.word	1073876992
 2411 0060 FFFFFEFF 		.word	-65537
 2412              		.cfi_endproc
 2413              	.LFE59:
 2415              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 2416              		.align	2
 2417              		.global	RCC_AHBPeriphClockCmd
 2418              		.code	16
 2419              		.thumb_func
 2421              	RCC_AHBPeriphClockCmd:
 2422              	.LFB60:
1140:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1141:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1142:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1143:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1144:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1145:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         using it.    
1146:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1147:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be any combination of the following values:
1148:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOA:         GPIOA clock
1149:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOB:         GPIOB clock
1150:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOC:         GPIOC clock
1151:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOD:         GPIOD clock
1152:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOF:         GPIOF clock
1153:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_TS:            TS clock
1154:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_CRC:           CRC clock
1155:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_FLITF: (has effect only when the Flash memory is in power down m
1156:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_SRAM:          SRAM clock
1157:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_DMA1:          DMA1 clock
1158:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1159:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
1160:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1161:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1162:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1163:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 2423              		.loc 1 1163 0
 2424              		.cfi_startproc
 2425 0000 80B5     		push	{r7, lr}
 2426              		.cfi_def_cfa_offset 8
 2427              		.cfi_offset 7, -8
 2428              		.cfi_offset 14, -4
 2429 0002 82B0     		sub	sp, sp, #8
 2430              		.cfi_def_cfa_offset 16
 2431 0004 00AF     		add	r7, sp, #0
 2432              		.cfi_def_cfa_register 7
 2433 0006 7860     		str	r0, [r7, #4]
 2434 0008 0A1C     		mov	r2, r1
 2435 000a FB1C     		add	r3, r7, #3
 2436 000c 1A70     		strb	r2, [r3]
1164:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1165:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
 2437              		.loc 1 1165 0
 2438 000e 7A68     		ldr	r2, [r7, #4]
 2439 0010 174B     		ldr	r3, .L155
 2440 0012 1340     		and	r3, r2
 2441 0014 02D1     		bne	.L150
 2442              		.loc 1 1165 0 is_stmt 0 discriminator 2
 2443 0016 7B68     		ldr	r3, [r7, #4]
 2444 0018 002B     		cmp	r3, #0
 2445 001a 05D1     		bne	.L151
 2446              	.L150:
 2447              		.loc 1 1165 0 discriminator 1
 2448 001c 154A     		ldr	r2, .L155+4
 2449 001e 164B     		ldr	r3, .L155+8
 2450 0020 101C     		mov	r0, r2
 2451 0022 191C     		mov	r1, r3
 2452 0024 FFF7FEFF 		bl	assert_failed
 2453              	.L151:
1166:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2454              		.loc 1 1166 0 is_stmt 1
 2455 0028 FB1C     		add	r3, r7, #3
 2456 002a 1B78     		ldrb	r3, [r3]
 2457 002c 002B     		cmp	r3, #0
 2458 002e 09D0     		beq	.L152
 2459              		.loc 1 1166 0 is_stmt 0 discriminator 1
 2460 0030 FB1C     		add	r3, r7, #3
 2461 0032 1B78     		ldrb	r3, [r3]
 2462 0034 012B     		cmp	r3, #1
 2463 0036 05D0     		beq	.L152
 2464 0038 0E4A     		ldr	r2, .L155+4
 2465 003a 104B     		ldr	r3, .L155+12
 2466 003c 101C     		mov	r0, r2
 2467 003e 191C     		mov	r1, r3
 2468 0040 FFF7FEFF 		bl	assert_failed
 2469              	.L152:
1167:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1168:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 2470              		.loc 1 1168 0 is_stmt 1
 2471 0044 FB1C     		add	r3, r7, #3
 2472 0046 1B78     		ldrb	r3, [r3]
 2473 0048 002B     		cmp	r3, #0
 2474 004a 06D0     		beq	.L153
1169:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1170:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 2475              		.loc 1 1170 0
 2476 004c 0C4B     		ldr	r3, .L155+16
 2477 004e 0C4A     		ldr	r2, .L155+16
 2478 0050 5169     		ldr	r1, [r2, #20]
 2479 0052 7A68     		ldr	r2, [r7, #4]
 2480 0054 0A43     		orr	r2, r1
 2481 0056 5A61     		str	r2, [r3, #20]
 2482 0058 06E0     		b	.L149
 2483              	.L153:
1171:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1172:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1173:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1174:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 2484              		.loc 1 1174 0
 2485 005a 094B     		ldr	r3, .L155+16
 2486 005c 084A     		ldr	r2, .L155+16
 2487 005e 5269     		ldr	r2, [r2, #20]
 2488 0060 7968     		ldr	r1, [r7, #4]
 2489 0062 C943     		mvn	r1, r1
 2490 0064 0A40     		and	r2, r1
 2491 0066 5A61     		str	r2, [r3, #20]
 2492              	.L149:
1175:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1176:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 2493              		.loc 1 1176 0
 2494 0068 BD46     		mov	sp, r7
 2495 006a 02B0     		add	sp, sp, #8
 2496              		@ sp needed
 2497 006c 80BD     		pop	{r7, pc}
 2498              	.L156:
 2499 006e C046     		.align	2
 2500              	.L155:
 2501 0070 AAFFA1FE 		.word	-22937686
 2502 0074 00000000 		.word	.LC0
 2503 0078 8D040000 		.word	1165
 2504 007c 8E040000 		.word	1166
 2505 0080 00100240 		.word	1073876992
 2506              		.cfi_endproc
 2507              	.LFE60:
 2509              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 2510              		.align	2
 2511              		.global	RCC_APB2PeriphClockCmd
 2512              		.code	16
 2513              		.thumb_func
 2515              	RCC_APB2PeriphClockCmd:
 2516              	.LFB61:
1177:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1178:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1179:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1180:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1181:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1182:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         using it.
1183:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1184:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be any combination of the following values:
1185:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SYSCFG:      SYSCFG clock
1186:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_ADC1:        ADC1 clock
1187:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM1:        TIM1 clock
1188:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SPI1:        SPI1 clock
1189:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART1:      USART1 clock
1190:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM15:       TIM15 clock
1191:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM16:       TIM16 clock
1192:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM17:       TIM17 clock
1193:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_DBGMCU:      DBGMCU clock
1194:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1195:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
1196:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1197:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1198:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1199:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 2517              		.loc 1 1199 0
 2518              		.cfi_startproc
 2519 0000 80B5     		push	{r7, lr}
 2520              		.cfi_def_cfa_offset 8
 2521              		.cfi_offset 7, -8
 2522              		.cfi_offset 14, -4
 2523 0002 82B0     		sub	sp, sp, #8
 2524              		.cfi_def_cfa_offset 16
 2525 0004 00AF     		add	r7, sp, #0
 2526              		.cfi_def_cfa_register 7
 2527 0006 7860     		str	r0, [r7, #4]
 2528 0008 0A1C     		mov	r2, r1
 2529 000a FB1C     		add	r3, r7, #3
 2530 000c 1A70     		strb	r2, [r3]
1200:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1201:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 2531              		.loc 1 1201 0
 2532 000e 7A68     		ldr	r2, [r7, #4]
 2533 0010 174B     		ldr	r3, .L163
 2534 0012 1340     		and	r3, r2
 2535 0014 02D1     		bne	.L158
 2536              		.loc 1 1201 0 is_stmt 0 discriminator 2
 2537 0016 7B68     		ldr	r3, [r7, #4]
 2538 0018 002B     		cmp	r3, #0
 2539 001a 05D1     		bne	.L159
 2540              	.L158:
 2541              		.loc 1 1201 0 discriminator 1
 2542 001c 154A     		ldr	r2, .L163+4
 2543 001e 164B     		ldr	r3, .L163+8
 2544 0020 101C     		mov	r0, r2
 2545 0022 191C     		mov	r1, r3
 2546 0024 FFF7FEFF 		bl	assert_failed
 2547              	.L159:
1202:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2548              		.loc 1 1202 0 is_stmt 1
 2549 0028 FB1C     		add	r3, r7, #3
 2550 002a 1B78     		ldrb	r3, [r3]
 2551 002c 002B     		cmp	r3, #0
 2552 002e 09D0     		beq	.L160
 2553              		.loc 1 1202 0 is_stmt 0 discriminator 1
 2554 0030 FB1C     		add	r3, r7, #3
 2555 0032 1B78     		ldrb	r3, [r3]
 2556 0034 012B     		cmp	r3, #1
 2557 0036 05D0     		beq	.L160
 2558 0038 0E4A     		ldr	r2, .L163+4
 2559 003a 104B     		ldr	r3, .L163+12
 2560 003c 101C     		mov	r0, r2
 2561 003e 191C     		mov	r1, r3
 2562 0040 FFF7FEFF 		bl	assert_failed
 2563              	.L160:
1203:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1204:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 2564              		.loc 1 1204 0 is_stmt 1
 2565 0044 FB1C     		add	r3, r7, #3
 2566 0046 1B78     		ldrb	r3, [r3]
 2567 0048 002B     		cmp	r3, #0
 2568 004a 06D0     		beq	.L161
1205:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1206:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 2569              		.loc 1 1206 0
 2570 004c 0C4B     		ldr	r3, .L163+16
 2571 004e 0C4A     		ldr	r2, .L163+16
 2572 0050 9169     		ldr	r1, [r2, #24]
 2573 0052 7A68     		ldr	r2, [r7, #4]
 2574 0054 0A43     		orr	r2, r1
 2575 0056 9A61     		str	r2, [r3, #24]
 2576 0058 06E0     		b	.L157
 2577              	.L161:
1207:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1208:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1209:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1210:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 2578              		.loc 1 1210 0
 2579 005a 094B     		ldr	r3, .L163+16
 2580 005c 084A     		ldr	r2, .L163+16
 2581 005e 9269     		ldr	r2, [r2, #24]
 2582 0060 7968     		ldr	r1, [r7, #4]
 2583 0062 C943     		mvn	r1, r1
 2584 0064 0A40     		and	r2, r1
 2585 0066 9A61     		str	r2, [r3, #24]
 2586              	.L157:
1211:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1212:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 2587              		.loc 1 1212 0
 2588 0068 BD46     		mov	sp, r7
 2589 006a 02B0     		add	sp, sp, #8
 2590              		@ sp needed
 2591 006c 80BD     		pop	{r7, pc}
 2592              	.L164:
 2593 006e C046     		.align	2
 2594              	.L163:
 2595 0070 FEA5B8FF 		.word	-4676098
 2596 0074 00000000 		.word	.LC0
 2597 0078 B1040000 		.word	1201
 2598 007c B2040000 		.word	1202
 2599 0080 00100240 		.word	1073876992
 2600              		.cfi_endproc
 2601              	.LFE61:
 2603              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 2604              		.align	2
 2605              		.global	RCC_APB1PeriphClockCmd
 2606              		.code	16
 2607              		.thumb_func
 2609              	RCC_APB1PeriphClockCmd:
 2610              	.LFB62:
1213:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1214:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1215:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1216:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1217:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1218:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         using it.
1219:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1220:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be any combination of the following values:
1221:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM2:      TIM2 clock
1222:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM3:      TIM3 clock
1223:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM6:      TIM6 clock
1224:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM14:     TIM14 clock
1225:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_WWDG:      WWDG clock
1226:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_SPI2:      SPI2 clock
1227:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART2:    USART2 clock
1228:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C1:      I2C1 clock
1229:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C2:      I2C2 clock
1230:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_PWR:       PWR clock
1231:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_DAC:       DAC clock
1232:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CEC:       CEC clock                               
1233:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1234:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
1235:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1236:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1237:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1238:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 2611              		.loc 1 1238 0
 2612              		.cfi_startproc
 2613 0000 80B5     		push	{r7, lr}
 2614              		.cfi_def_cfa_offset 8
 2615              		.cfi_offset 7, -8
 2616              		.cfi_offset 14, -4
 2617 0002 82B0     		sub	sp, sp, #8
 2618              		.cfi_def_cfa_offset 16
 2619 0004 00AF     		add	r7, sp, #0
 2620              		.cfi_def_cfa_register 7
 2621 0006 7860     		str	r0, [r7, #4]
 2622 0008 0A1C     		mov	r2, r1
 2623 000a FB1C     		add	r3, r7, #3
 2624 000c 1A70     		strb	r2, [r3]
1239:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1240:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 2625              		.loc 1 1240 0
 2626 000e 7A68     		ldr	r2, [r7, #4]
 2627 0010 174B     		ldr	r3, .L171
 2628 0012 1340     		and	r3, r2
 2629 0014 02D1     		bne	.L166
 2630              		.loc 1 1240 0 is_stmt 0 discriminator 2
 2631 0016 7B68     		ldr	r3, [r7, #4]
 2632 0018 002B     		cmp	r3, #0
 2633 001a 06D1     		bne	.L167
 2634              	.L166:
 2635              		.loc 1 1240 0 discriminator 1
 2636 001c 154A     		ldr	r2, .L171+4
 2637 001e 9B23     		mov	r3, #155
 2638 0020 DB00     		lsl	r3, r3, #3
 2639 0022 101C     		mov	r0, r2
 2640 0024 191C     		mov	r1, r3
 2641 0026 FFF7FEFF 		bl	assert_failed
 2642              	.L167:
1241:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2643              		.loc 1 1241 0 is_stmt 1
 2644 002a FB1C     		add	r3, r7, #3
 2645 002c 1B78     		ldrb	r3, [r3]
 2646 002e 002B     		cmp	r3, #0
 2647 0030 09D0     		beq	.L168
 2648              		.loc 1 1241 0 is_stmt 0 discriminator 1
 2649 0032 FB1C     		add	r3, r7, #3
 2650 0034 1B78     		ldrb	r3, [r3]
 2651 0036 012B     		cmp	r3, #1
 2652 0038 05D0     		beq	.L168
 2653 003a 0E4A     		ldr	r2, .L171+4
 2654 003c 0E4B     		ldr	r3, .L171+8
 2655 003e 101C     		mov	r0, r2
 2656 0040 191C     		mov	r1, r3
 2657 0042 FFF7FEFF 		bl	assert_failed
 2658              	.L168:
1242:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1243:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 2659              		.loc 1 1243 0 is_stmt 1
 2660 0046 FB1C     		add	r3, r7, #3
 2661 0048 1B78     		ldrb	r3, [r3]
 2662 004a 002B     		cmp	r3, #0
 2663 004c 06D0     		beq	.L169
1244:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1245:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 2664              		.loc 1 1245 0
 2665 004e 0B4B     		ldr	r3, .L171+12
 2666 0050 0A4A     		ldr	r2, .L171+12
 2667 0052 D169     		ldr	r1, [r2, #28]
 2668 0054 7A68     		ldr	r2, [r7, #4]
 2669 0056 0A43     		orr	r2, r1
 2670 0058 DA61     		str	r2, [r3, #28]
 2671 005a 06E0     		b	.L165
 2672              	.L169:
1246:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1247:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1248:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1249:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 2673              		.loc 1 1249 0
 2674 005c 074B     		ldr	r3, .L171+12
 2675 005e 074A     		ldr	r2, .L171+12
 2676 0060 D269     		ldr	r2, [r2, #28]
 2677 0062 7968     		ldr	r1, [r7, #4]
 2678 0064 C943     		mvn	r1, r1
 2679 0066 0A40     		and	r2, r1
 2680 0068 DA61     		str	r2, [r3, #28]
 2681              	.L165:
1250:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1251:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 2682              		.loc 1 1251 0
 2683 006a BD46     		mov	sp, r7
 2684 006c 02B0     		add	sp, sp, #8
 2685              		@ sp needed
 2686 006e 80BD     		pop	{r7, pc}
 2687              	.L172:
 2688              		.align	2
 2689              	.L171:
 2690 0070 ECB69D8F 		.word	-1885489428
 2691 0074 00000000 		.word	.LC0
 2692 0078 D9040000 		.word	1241
 2693 007c 00100240 		.word	1073876992
 2694              		.cfi_endproc
 2695              	.LFE62:
 2697              		.section	.text.RCC_AHBPeriphResetCmd,"ax",%progbits
 2698              		.align	2
 2699              		.global	RCC_AHBPeriphResetCmd
 2700              		.code	16
 2701              		.thumb_func
 2703              	RCC_AHBPeriphResetCmd:
 2704              	.LFB63:
1252:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1253:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1254:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1255:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1256:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be any combination of the following values:
1257:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOA:         GPIOA clock
1258:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOB:         GPIOB clock
1259:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOC:         GPIOC clock
1260:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOD:         GPIOD clock
1261:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOF:         GPIOF clock
1262:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_TS:            TS clock
1263:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1264:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
1265:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1266:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1267:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1268:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 2705              		.loc 1 1268 0
 2706              		.cfi_startproc
 2707 0000 80B5     		push	{r7, lr}
 2708              		.cfi_def_cfa_offset 8
 2709              		.cfi_offset 7, -8
 2710              		.cfi_offset 14, -4
 2711 0002 82B0     		sub	sp, sp, #8
 2712              		.cfi_def_cfa_offset 16
 2713 0004 00AF     		add	r7, sp, #0
 2714              		.cfi_def_cfa_register 7
 2715 0006 7860     		str	r0, [r7, #4]
 2716 0008 0A1C     		mov	r2, r1
 2717 000a FB1C     		add	r3, r7, #3
 2718 000c 1A70     		strb	r2, [r3]
1269:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1270:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
 2719              		.loc 1 1270 0
 2720 000e 7A68     		ldr	r2, [r7, #4]
 2721 0010 174B     		ldr	r3, .L179
 2722 0012 1340     		and	r3, r2
 2723 0014 02D1     		bne	.L174
 2724              		.loc 1 1270 0 is_stmt 0 discriminator 2
 2725 0016 7B68     		ldr	r3, [r7, #4]
 2726 0018 002B     		cmp	r3, #0
 2727 001a 05D1     		bne	.L175
 2728              	.L174:
 2729              		.loc 1 1270 0 discriminator 1
 2730 001c 154A     		ldr	r2, .L179+4
 2731 001e 164B     		ldr	r3, .L179+8
 2732 0020 101C     		mov	r0, r2
 2733 0022 191C     		mov	r1, r3
 2734 0024 FFF7FEFF 		bl	assert_failed
 2735              	.L175:
1271:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2736              		.loc 1 1271 0 is_stmt 1
 2737 0028 FB1C     		add	r3, r7, #3
 2738 002a 1B78     		ldrb	r3, [r3]
 2739 002c 002B     		cmp	r3, #0
 2740 002e 09D0     		beq	.L176
 2741              		.loc 1 1271 0 is_stmt 0 discriminator 1
 2742 0030 FB1C     		add	r3, r7, #3
 2743 0032 1B78     		ldrb	r3, [r3]
 2744 0034 012B     		cmp	r3, #1
 2745 0036 05D0     		beq	.L176
 2746 0038 0E4A     		ldr	r2, .L179+4
 2747 003a 104B     		ldr	r3, .L179+12
 2748 003c 101C     		mov	r0, r2
 2749 003e 191C     		mov	r1, r3
 2750 0040 FFF7FEFF 		bl	assert_failed
 2751              	.L176:
1272:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1273:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 2752              		.loc 1 1273 0 is_stmt 1
 2753 0044 FB1C     		add	r3, r7, #3
 2754 0046 1B78     		ldrb	r3, [r3]
 2755 0048 002B     		cmp	r3, #0
 2756 004a 06D0     		beq	.L177
1274:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1275:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
 2757              		.loc 1 1275 0
 2758 004c 0C4B     		ldr	r3, .L179+16
 2759 004e 0C4A     		ldr	r2, .L179+16
 2760 0050 916A     		ldr	r1, [r2, #40]
 2761 0052 7A68     		ldr	r2, [r7, #4]
 2762 0054 0A43     		orr	r2, r1
 2763 0056 9A62     		str	r2, [r3, #40]
 2764 0058 06E0     		b	.L173
 2765              	.L177:
1276:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1277:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1278:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1279:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
 2766              		.loc 1 1279 0
 2767 005a 094B     		ldr	r3, .L179+16
 2768 005c 084A     		ldr	r2, .L179+16
 2769 005e 926A     		ldr	r2, [r2, #40]
 2770 0060 7968     		ldr	r1, [r7, #4]
 2771 0062 C943     		mvn	r1, r1
 2772 0064 0A40     		and	r2, r1
 2773 0066 9A62     		str	r2, [r3, #40]
 2774              	.L173:
1280:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1281:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 2775              		.loc 1 1281 0
 2776 0068 BD46     		mov	sp, r7
 2777 006a 02B0     		add	sp, sp, #8
 2778              		@ sp needed
 2779 006c 80BD     		pop	{r7, pc}
 2780              	.L180:
 2781 006e C046     		.align	2
 2782              	.L179:
 2783 0070 FFFFA1FE 		.word	-22937601
 2784 0074 00000000 		.word	.LC0
 2785 0078 F6040000 		.word	1270
 2786 007c F7040000 		.word	1271
 2787 0080 00100240 		.word	1073876992
 2788              		.cfi_endproc
 2789              	.LFE63:
 2791              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 2792              		.align	2
 2793              		.global	RCC_APB2PeriphResetCmd
 2794              		.code	16
 2795              		.thumb_func
 2797              	RCC_APB2PeriphResetCmd:
 2798              	.LFB64:
1282:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1283:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1284:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1285:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1286:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be any combination of the following values:
1287:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SYSCFG:      SYSCFG clock
1288:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_ADC1:        ADC1 clock
1289:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM1:        TIM1 clock
1290:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SPI1:        SPI1 clock
1291:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART1:      USART1 clock
1292:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM15:       TIM15 clock
1293:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM16:       TIM16 clock
1294:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM17:       TIM17 clock
1295:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_DBGMCU:      DBGMCU clock
1296:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1297:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
1298:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1299:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1300:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1301:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 2799              		.loc 1 1301 0
 2800              		.cfi_startproc
 2801 0000 80B5     		push	{r7, lr}
 2802              		.cfi_def_cfa_offset 8
 2803              		.cfi_offset 7, -8
 2804              		.cfi_offset 14, -4
 2805 0002 82B0     		sub	sp, sp, #8
 2806              		.cfi_def_cfa_offset 16
 2807 0004 00AF     		add	r7, sp, #0
 2808              		.cfi_def_cfa_register 7
 2809 0006 7860     		str	r0, [r7, #4]
 2810 0008 0A1C     		mov	r2, r1
 2811 000a FB1C     		add	r3, r7, #3
 2812 000c 1A70     		strb	r2, [r3]
1302:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1303:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 2813              		.loc 1 1303 0
 2814 000e 7A68     		ldr	r2, [r7, #4]
 2815 0010 174B     		ldr	r3, .L187
 2816 0012 1340     		and	r3, r2
 2817 0014 02D1     		bne	.L182
 2818              		.loc 1 1303 0 is_stmt 0 discriminator 2
 2819 0016 7B68     		ldr	r3, [r7, #4]
 2820 0018 002B     		cmp	r3, #0
 2821 001a 05D1     		bne	.L183
 2822              	.L182:
 2823              		.loc 1 1303 0 discriminator 1
 2824 001c 154A     		ldr	r2, .L187+4
 2825 001e 164B     		ldr	r3, .L187+8
 2826 0020 101C     		mov	r0, r2
 2827 0022 191C     		mov	r1, r3
 2828 0024 FFF7FEFF 		bl	assert_failed
 2829              	.L183:
1304:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2830              		.loc 1 1304 0 is_stmt 1
 2831 0028 FB1C     		add	r3, r7, #3
 2832 002a 1B78     		ldrb	r3, [r3]
 2833 002c 002B     		cmp	r3, #0
 2834 002e 0AD0     		beq	.L184
 2835              		.loc 1 1304 0 is_stmt 0 discriminator 1
 2836 0030 FB1C     		add	r3, r7, #3
 2837 0032 1B78     		ldrb	r3, [r3]
 2838 0034 012B     		cmp	r3, #1
 2839 0036 06D0     		beq	.L184
 2840 0038 0E4A     		ldr	r2, .L187+4
 2841 003a A323     		mov	r3, #163
 2842 003c DB00     		lsl	r3, r3, #3
 2843 003e 101C     		mov	r0, r2
 2844 0040 191C     		mov	r1, r3
 2845 0042 FFF7FEFF 		bl	assert_failed
 2846              	.L184:
1305:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1306:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 2847              		.loc 1 1306 0 is_stmt 1
 2848 0046 FB1C     		add	r3, r7, #3
 2849 0048 1B78     		ldrb	r3, [r3]
 2850 004a 002B     		cmp	r3, #0
 2851 004c 06D0     		beq	.L185
1307:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1308:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 2852              		.loc 1 1308 0
 2853 004e 0B4B     		ldr	r3, .L187+12
 2854 0050 0A4A     		ldr	r2, .L187+12
 2855 0052 D168     		ldr	r1, [r2, #12]
 2856 0054 7A68     		ldr	r2, [r7, #4]
 2857 0056 0A43     		orr	r2, r1
 2858 0058 DA60     		str	r2, [r3, #12]
 2859 005a 06E0     		b	.L181
 2860              	.L185:
1309:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1310:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1311:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1312:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 2861              		.loc 1 1312 0
 2862 005c 074B     		ldr	r3, .L187+12
 2863 005e 074A     		ldr	r2, .L187+12
 2864 0060 D268     		ldr	r2, [r2, #12]
 2865 0062 7968     		ldr	r1, [r7, #4]
 2866 0064 C943     		mvn	r1, r1
 2867 0066 0A40     		and	r2, r1
 2868 0068 DA60     		str	r2, [r3, #12]
 2869              	.L181:
1313:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1314:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 2870              		.loc 1 1314 0
 2871 006a BD46     		mov	sp, r7
 2872 006c 02B0     		add	sp, sp, #8
 2873              		@ sp needed
 2874 006e 80BD     		pop	{r7, pc}
 2875              	.L188:
 2876              		.align	2
 2877              	.L187:
 2878 0070 FEA5B8FF 		.word	-4676098
 2879 0074 00000000 		.word	.LC0
 2880 0078 17050000 		.word	1303
 2881 007c 00100240 		.word	1073876992
 2882              		.cfi_endproc
 2883              	.LFE64:
 2885              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 2886              		.align	2
 2887              		.global	RCC_APB1PeriphResetCmd
 2888              		.code	16
 2889              		.thumb_func
 2891              	RCC_APB1PeriphResetCmd:
 2892              	.LFB65:
1315:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1316:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1317:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1318:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1319:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be any combination of the following values:
1320:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM2:      TIM2 clock
1321:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM3:      TIM3 clock
1322:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM6:      TIM6 clock
1323:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM14:     TIM14 clock
1324:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_WWDG:      WWDG clock
1325:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_SPI2:      SPI2 clock
1326:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART2:    USART2 clock
1327:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C1:      I2C1 clock
1328:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C2:      I2C2 clock
1329:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_PWR:       PWR clock
1330:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_DAC:       DAC clock
1331:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CEC:       CEC clock
1332:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1333:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
1334:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1335:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1336:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1337:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 2893              		.loc 1 1337 0
 2894              		.cfi_startproc
 2895 0000 80B5     		push	{r7, lr}
 2896              		.cfi_def_cfa_offset 8
 2897              		.cfi_offset 7, -8
 2898              		.cfi_offset 14, -4
 2899 0002 82B0     		sub	sp, sp, #8
 2900              		.cfi_def_cfa_offset 16
 2901 0004 00AF     		add	r7, sp, #0
 2902              		.cfi_def_cfa_register 7
 2903 0006 7860     		str	r0, [r7, #4]
 2904 0008 0A1C     		mov	r2, r1
 2905 000a FB1C     		add	r3, r7, #3
 2906 000c 1A70     		strb	r2, [r3]
1338:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1339:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 2907              		.loc 1 1339 0
 2908 000e 7A68     		ldr	r2, [r7, #4]
 2909 0010 174B     		ldr	r3, .L195
 2910 0012 1340     		and	r3, r2
 2911 0014 02D1     		bne	.L190
 2912              		.loc 1 1339 0 is_stmt 0 discriminator 2
 2913 0016 7B68     		ldr	r3, [r7, #4]
 2914 0018 002B     		cmp	r3, #0
 2915 001a 05D1     		bne	.L191
 2916              	.L190:
 2917              		.loc 1 1339 0 discriminator 1
 2918 001c 154A     		ldr	r2, .L195+4
 2919 001e 164B     		ldr	r3, .L195+8
 2920 0020 101C     		mov	r0, r2
 2921 0022 191C     		mov	r1, r3
 2922 0024 FFF7FEFF 		bl	assert_failed
 2923              	.L191:
1340:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2924              		.loc 1 1340 0 is_stmt 1
 2925 0028 FB1C     		add	r3, r7, #3
 2926 002a 1B78     		ldrb	r3, [r3]
 2927 002c 002B     		cmp	r3, #0
 2928 002e 09D0     		beq	.L192
 2929              		.loc 1 1340 0 is_stmt 0 discriminator 1
 2930 0030 FB1C     		add	r3, r7, #3
 2931 0032 1B78     		ldrb	r3, [r3]
 2932 0034 012B     		cmp	r3, #1
 2933 0036 05D0     		beq	.L192
 2934 0038 0E4A     		ldr	r2, .L195+4
 2935 003a 104B     		ldr	r3, .L195+12
 2936 003c 101C     		mov	r0, r2
 2937 003e 191C     		mov	r1, r3
 2938 0040 FFF7FEFF 		bl	assert_failed
 2939              	.L192:
1341:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1342:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 2940              		.loc 1 1342 0 is_stmt 1
 2941 0044 FB1C     		add	r3, r7, #3
 2942 0046 1B78     		ldrb	r3, [r3]
 2943 0048 002B     		cmp	r3, #0
 2944 004a 06D0     		beq	.L193
1343:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1344:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 2945              		.loc 1 1344 0
 2946 004c 0C4B     		ldr	r3, .L195+16
 2947 004e 0C4A     		ldr	r2, .L195+16
 2948 0050 1169     		ldr	r1, [r2, #16]
 2949 0052 7A68     		ldr	r2, [r7, #4]
 2950 0054 0A43     		orr	r2, r1
 2951 0056 1A61     		str	r2, [r3, #16]
 2952 0058 06E0     		b	.L189
 2953              	.L193:
1345:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1346:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1347:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1348:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 2954              		.loc 1 1348 0
 2955 005a 094B     		ldr	r3, .L195+16
 2956 005c 084A     		ldr	r2, .L195+16
 2957 005e 1269     		ldr	r2, [r2, #16]
 2958 0060 7968     		ldr	r1, [r7, #4]
 2959 0062 C943     		mvn	r1, r1
 2960 0064 0A40     		and	r2, r1
 2961 0066 1A61     		str	r2, [r3, #16]
 2962              	.L189:
1349:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1350:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 2963              		.loc 1 1350 0
 2964 0068 BD46     		mov	sp, r7
 2965 006a 02B0     		add	sp, sp, #8
 2966              		@ sp needed
 2967 006c 80BD     		pop	{r7, pc}
 2968              	.L196:
 2969 006e C046     		.align	2
 2970              	.L195:
 2971 0070 ECB69D8F 		.word	-1885489428
 2972 0074 00000000 		.word	.LC0
 2973 0078 3B050000 		.word	1339
 2974 007c 3C050000 		.word	1340
 2975 0080 00100240 		.word	1073876992
 2976              		.cfi_endproc
 2977              	.LFE65:
 2979              		.section	.text.RCC_ITConfig,"ax",%progbits
 2980              		.align	2
 2981              		.global	RCC_ITConfig
 2982              		.code	16
 2983              		.thumb_func
 2985              	RCC_ITConfig:
 2986              	.LFB66:
1351:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1352:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1353:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @}
1354:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1355:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1356:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1357:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1358:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *
1359:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @verbatim
1360:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
1361:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              ##### Interrupts and flags management functions #####
1362:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
1363:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @endverbatim
1364:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
1365:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1366:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1367:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1368:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1369:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The CSS interrupt doesn't have an enable bit; once the CSS is enabled
1370:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and if the HSE clock fails, the CSS interrupt occurs and an NMI is
1371:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         automatically generated. The NMI will be executed indefinitely, and 
1372:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         since NMI has higher priority than any other IRQ (and main program)
1373:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the application will be stacked in the NMI ISR unless the CSS interrupt
1374:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         pending bit is cleared.
1375:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1376:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be any combination of the following values:
1377:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_LSIRDY: LSI ready interrupt
1378:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_LSERDY: LSE ready interrupt
1379:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_HSIRDY: HSI ready interrupt
1380:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_HSERDY: HSE ready interrupt
1381:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_PLLRDY: PLL ready interrupt
1382:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_HSI14RDY: HSI14 ready interrupt
1383:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1384:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
1385:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1386:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1387:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1388:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 2987              		.loc 1 1388 0
 2988              		.cfi_startproc
 2989 0000 80B5     		push	{r7, lr}
 2990              		.cfi_def_cfa_offset 8
 2991              		.cfi_offset 7, -8
 2992              		.cfi_offset 14, -4
 2993 0002 82B0     		sub	sp, sp, #8
 2994              		.cfi_def_cfa_offset 16
 2995 0004 00AF     		add	r7, sp, #0
 2996              		.cfi_def_cfa_register 7
 2997 0006 0A1C     		mov	r2, r1
 2998 0008 FB1D     		add	r3, r7, #7
 2999 000a 011C     		add	r1, r0, #0
 3000 000c 1970     		strb	r1, [r3]
 3001 000e BB1D     		add	r3, r7, #6
 3002 0010 1A70     		strb	r2, [r3]
1389:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1390:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 3003              		.loc 1 1390 0
 3004 0012 FB1D     		add	r3, r7, #7
 3005 0014 1A78     		ldrb	r2, [r3]
 3006 0016 C023     		mov	r3, #192
 3007 0018 1340     		and	r3, r2
 3008 001a 03D1     		bne	.L198
 3009              		.loc 1 1390 0 is_stmt 0 discriminator 2
 3010 001c FB1D     		add	r3, r7, #7
 3011 001e 1B78     		ldrb	r3, [r3]
 3012 0020 002B     		cmp	r3, #0
 3013 0022 05D1     		bne	.L199
 3014              	.L198:
 3015              		.loc 1 1390 0 discriminator 1
 3016 0024 174A     		ldr	r2, .L203
 3017 0026 184B     		ldr	r3, .L203+4
 3018 0028 101C     		mov	r0, r2
 3019 002a 191C     		mov	r1, r3
 3020 002c FFF7FEFF 		bl	assert_failed
 3021              	.L199:
1391:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 3022              		.loc 1 1391 0 is_stmt 1
 3023 0030 BB1D     		add	r3, r7, #6
 3024 0032 1B78     		ldrb	r3, [r3]
 3025 0034 002B     		cmp	r3, #0
 3026 0036 09D0     		beq	.L200
 3027              		.loc 1 1391 0 is_stmt 0 discriminator 1
 3028 0038 BB1D     		add	r3, r7, #6
 3029 003a 1B78     		ldrb	r3, [r3]
 3030 003c 012B     		cmp	r3, #1
 3031 003e 05D0     		beq	.L200
 3032 0040 104A     		ldr	r2, .L203
 3033 0042 124B     		ldr	r3, .L203+8
 3034 0044 101C     		mov	r0, r2
 3035 0046 191C     		mov	r1, r3
 3036 0048 FFF7FEFF 		bl	assert_failed
 3037              	.L200:
1392:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1393:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 3038              		.loc 1 1393 0 is_stmt 1
 3039 004c BB1D     		add	r3, r7, #6
 3040 004e 1B78     		ldrb	r3, [r3]
 3041 0050 002B     		cmp	r3, #0
 3042 0052 09D0     		beq	.L201
1394:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1395:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
1396:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 3043              		.loc 1 1396 0
 3044 0054 0E4B     		ldr	r3, .L203+12
 3045 0056 0E4A     		ldr	r2, .L203+12
 3046 0058 1278     		ldrb	r2, [r2]
 3047 005a D1B2     		uxtb	r1, r2
 3048 005c FA1D     		add	r2, r7, #7
 3049 005e 1278     		ldrb	r2, [r2]
 3050 0060 0A43     		orr	r2, r1
 3051 0062 D2B2     		uxtb	r2, r2
 3052 0064 1A70     		strb	r2, [r3]
 3053 0066 0AE0     		b	.L197
 3054              	.L201:
1397:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1398:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1399:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1400:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
1401:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 3055              		.loc 1 1401 0
 3056 0068 094B     		ldr	r3, .L203+12
 3057 006a 094A     		ldr	r2, .L203+12
 3058 006c 1278     		ldrb	r2, [r2]
 3059 006e D2B2     		uxtb	r2, r2
 3060 0070 F91D     		add	r1, r7, #7
 3061 0072 0978     		ldrb	r1, [r1]
 3062 0074 C943     		mvn	r1, r1
 3063 0076 C9B2     		uxtb	r1, r1
 3064 0078 0A40     		and	r2, r1
 3065 007a D2B2     		uxtb	r2, r2
 3066 007c 1A70     		strb	r2, [r3]
 3067              	.L197:
1402:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1403:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 3068              		.loc 1 1403 0
 3069 007e BD46     		mov	sp, r7
 3070 0080 02B0     		add	sp, sp, #8
 3071              		@ sp needed
 3072 0082 80BD     		pop	{r7, pc}
 3073              	.L204:
 3074              		.align	2
 3075              	.L203:
 3076 0084 00000000 		.word	.LC0
 3077 0088 6E050000 		.word	1390
 3078 008c 6F050000 		.word	1391
 3079 0090 09100240 		.word	1073877001
 3080              		.cfi_endproc
 3081              	.LFE66:
 3083              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 3084              		.align	2
 3085              		.global	RCC_GetFlagStatus
 3086              		.code	16
 3087              		.thumb_func
 3089              	RCC_GetFlagStatus:
 3090              	.LFB67:
1404:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1405:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1406:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1407:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1408:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be one of the following values:
1409:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready  
1410:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1411:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_PLLRDY: PLL clock ready
1412:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1413:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1414:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_OBLRST: Option Byte Loader (OBL) reset 
1415:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_PINRST: Pin reset
1416:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_V18PWRRSTF:  V1.8 power domain reset  
1417:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_PORRST: POR/PDR reset
1418:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_SFTRST: Software reset
1419:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1420:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1421:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_LPWRRST: Low Power reset
1422:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSI14RDY: HSI14 oscillator clock ready  
1423:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1424:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1425:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1426:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 3091              		.loc 1 1426 0
 3092              		.cfi_startproc
 3093 0000 80B5     		push	{r7, lr}
 3094              		.cfi_def_cfa_offset 8
 3095              		.cfi_offset 7, -8
 3096              		.cfi_offset 14, -4
 3097 0002 86B0     		sub	sp, sp, #24
 3098              		.cfi_def_cfa_offset 32
 3099 0004 00AF     		add	r7, sp, #0
 3100              		.cfi_def_cfa_register 7
 3101 0006 021C     		mov	r2, r0
 3102 0008 FB1D     		add	r3, r7, #7
 3103 000a 1A70     		strb	r2, [r3]
1427:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmp = 0;
 3104              		.loc 1 1427 0
 3105 000c 0023     		mov	r3, #0
 3106 000e FB60     		str	r3, [r7, #12]
1428:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t statusreg = 0;
 3107              		.loc 1 1428 0
 3108 0010 0023     		mov	r3, #0
 3109 0012 7B61     		str	r3, [r7, #20]
1429:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   FlagStatus bitstatus = RESET;
 3110              		.loc 1 1429 0
 3111 0014 3B1C     		mov	r3, r7
 3112 0016 1333     		add	r3, r3, #19
 3113 0018 0022     		mov	r2, #0
 3114 001a 1A70     		strb	r2, [r3]
1430:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1431:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1432:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
 3115              		.loc 1 1432 0
 3116 001c FB1D     		add	r3, r7, #7
 3117 001e 1B78     		ldrb	r3, [r3]
 3118 0020 012B     		cmp	r3, #1
 3119 0022 3AD0     		beq	.L206
 3120              		.loc 1 1432 0 is_stmt 0 discriminator 1
 3121 0024 FB1D     		add	r3, r7, #7
 3122 0026 1B78     		ldrb	r3, [r3]
 3123 0028 112B     		cmp	r3, #17
 3124 002a 36D0     		beq	.L206
 3125 002c FB1D     		add	r3, r7, #7
 3126 002e 1B78     		ldrb	r3, [r3]
 3127 0030 192B     		cmp	r3, #25
 3128 0032 32D0     		beq	.L206
 3129 0034 FB1D     		add	r3, r7, #7
 3130 0036 1B78     		ldrb	r3, [r3]
 3131 0038 212B     		cmp	r3, #33
 3132 003a 2ED0     		beq	.L206
 3133 003c FB1D     		add	r3, r7, #7
 3134 003e 1B78     		ldrb	r3, [r3]
 3135 0040 412B     		cmp	r3, #65
 3136 0042 2AD0     		beq	.L206
 3137 0044 FB1D     		add	r3, r7, #7
 3138 0046 1B78     		ldrb	r3, [r3]
 3139 0048 592B     		cmp	r3, #89
 3140 004a 26D0     		beq	.L206
 3141 004c FB1D     		add	r3, r7, #7
 3142 004e 1B78     		ldrb	r3, [r3]
 3143 0050 5A2B     		cmp	r3, #90
 3144 0052 22D0     		beq	.L206
 3145 0054 FB1D     		add	r3, r7, #7
 3146 0056 1B78     		ldrb	r3, [r3]
 3147 0058 5B2B     		cmp	r3, #91
 3148 005a 1ED0     		beq	.L206
 3149 005c FB1D     		add	r3, r7, #7
 3150 005e 1B78     		ldrb	r3, [r3]
 3151 0060 5C2B     		cmp	r3, #92
 3152 0062 1AD0     		beq	.L206
 3153 0064 FB1D     		add	r3, r7, #7
 3154 0066 1B78     		ldrb	r3, [r3]
 3155 0068 5D2B     		cmp	r3, #93
 3156 006a 16D0     		beq	.L206
 3157 006c FB1D     		add	r3, r7, #7
 3158 006e 1B78     		ldrb	r3, [r3]
 3159 0070 5E2B     		cmp	r3, #94
 3160 0072 12D0     		beq	.L206
 3161 0074 FB1D     		add	r3, r7, #7
 3162 0076 1B78     		ldrb	r3, [r3]
 3163 0078 5F2B     		cmp	r3, #95
 3164 007a 0ED0     		beq	.L206
 3165 007c FB1D     		add	r3, r7, #7
 3166 007e 1B78     		ldrb	r3, [r3]
 3167 0080 612B     		cmp	r3, #97
 3168 0082 0AD0     		beq	.L206
 3169 0084 FB1D     		add	r3, r7, #7
 3170 0086 1B78     		ldrb	r3, [r3]
 3171 0088 572B     		cmp	r3, #87
 3172 008a 06D0     		beq	.L206
 3173 008c 1F4A     		ldr	r2, .L214
 3174 008e B323     		mov	r3, #179
 3175 0090 DB00     		lsl	r3, r3, #3
 3176 0092 101C     		mov	r0, r2
 3177 0094 191C     		mov	r1, r3
 3178 0096 FFF7FEFF 		bl	assert_failed
 3179              	.L206:
1433:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1434:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get the RCC register index */
1435:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 3180              		.loc 1 1435 0 is_stmt 1
 3181 009a FB1D     		add	r3, r7, #7
 3182 009c 1B78     		ldrb	r3, [r3]
 3183 009e 5B09     		lsr	r3, r3, #5
 3184 00a0 DBB2     		uxtb	r3, r3
 3185 00a2 FB60     		str	r3, [r7, #12]
1436:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1437:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (tmp == 0)               /* The flag to check is in CR register */
 3186              		.loc 1 1437 0
 3187 00a4 FB68     		ldr	r3, [r7, #12]
 3188 00a6 002B     		cmp	r3, #0
 3189 00a8 03D1     		bne	.L207
1438:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1439:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     statusreg = RCC->CR;
 3190              		.loc 1 1439 0
 3191 00aa 194B     		ldr	r3, .L214+4
 3192 00ac 1B68     		ldr	r3, [r3]
 3193 00ae 7B61     		str	r3, [r7, #20]
 3194 00b0 10E0     		b	.L208
 3195              	.L207:
1440:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1441:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if (tmp == 1)          /* The flag to check is in BDCR register */
 3196              		.loc 1 1441 0
 3197 00b2 FB68     		ldr	r3, [r7, #12]
 3198 00b4 012B     		cmp	r3, #1
 3199 00b6 03D1     		bne	.L209
1442:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1443:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     statusreg = RCC->BDCR;
 3200              		.loc 1 1443 0
 3201 00b8 154B     		ldr	r3, .L214+4
 3202 00ba 1B6A     		ldr	r3, [r3, #32]
 3203 00bc 7B61     		str	r3, [r7, #20]
 3204 00be 09E0     		b	.L208
 3205              	.L209:
1444:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1445:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in CSR register */
 3206              		.loc 1 1445 0
 3207 00c0 FB68     		ldr	r3, [r7, #12]
 3208 00c2 022B     		cmp	r3, #2
 3209 00c4 03D1     		bne	.L210
1446:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1447:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     statusreg = RCC->CSR;
 3210              		.loc 1 1447 0
 3211 00c6 124B     		ldr	r3, .L214+4
 3212 00c8 5B6A     		ldr	r3, [r3, #36]
 3213 00ca 7B61     		str	r3, [r7, #20]
 3214 00cc 02E0     		b	.L208
 3215              	.L210:
1448:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1449:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else                        /* The flag to check is in CR2 register */
1450:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1451:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     statusreg = RCC->CR2;
 3216              		.loc 1 1451 0
 3217 00ce 104B     		ldr	r3, .L214+4
 3218 00d0 5B6B     		ldr	r3, [r3, #52]
 3219 00d2 7B61     		str	r3, [r7, #20]
 3220              	.L208:
1452:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }    
1453:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1454:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get the flag position */
1455:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 3221              		.loc 1 1455 0
 3222 00d4 FB1D     		add	r3, r7, #7
 3223 00d6 1A78     		ldrb	r2, [r3]
 3224 00d8 1F23     		mov	r3, #31
 3225 00da 1340     		and	r3, r2
 3226 00dc FB60     		str	r3, [r7, #12]
1456:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1457:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 3227              		.loc 1 1457 0
 3228 00de FB68     		ldr	r3, [r7, #12]
 3229 00e0 7A69     		ldr	r2, [r7, #20]
 3230 00e2 DA40     		lsr	r2, r2, r3
 3231 00e4 0123     		mov	r3, #1
 3232 00e6 1340     		and	r3, r2
 3233 00e8 04D0     		beq	.L211
1458:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1459:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     bitstatus = SET;
 3234              		.loc 1 1459 0
 3235 00ea 3B1C     		mov	r3, r7
 3236 00ec 1333     		add	r3, r3, #19
 3237 00ee 0122     		mov	r2, #1
 3238 00f0 1A70     		strb	r2, [r3]
 3239 00f2 03E0     		b	.L212
 3240              	.L211:
1460:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1461:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1462:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1463:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     bitstatus = RESET;
 3241              		.loc 1 1463 0
 3242 00f4 3B1C     		mov	r3, r7
 3243 00f6 1333     		add	r3, r3, #19
 3244 00f8 0022     		mov	r2, #0
 3245 00fa 1A70     		strb	r2, [r3]
 3246              	.L212:
1464:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1465:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Return the flag status */
1466:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return bitstatus;
 3247              		.loc 1 1466 0
 3248 00fc 3B1C     		mov	r3, r7
 3249 00fe 1333     		add	r3, r3, #19
 3250 0100 1B78     		ldrb	r3, [r3]
1467:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 3251              		.loc 1 1467 0
 3252 0102 181C     		mov	r0, r3
 3253 0104 BD46     		mov	sp, r7
 3254 0106 06B0     		add	sp, sp, #24
 3255              		@ sp needed
 3256 0108 80BD     		pop	{r7, pc}
 3257              	.L215:
 3258 010a C046     		.align	2
 3259              	.L214:
 3260 010c 00000000 		.word	.LC0
 3261 0110 00100240 		.word	1073876992
 3262              		.cfi_endproc
 3263              	.LFE67:
 3265              		.section	.text.RCC_ClearFlag,"ax",%progbits
 3266              		.align	2
 3267              		.global	RCC_ClearFlag
 3268              		.code	16
 3269              		.thumb_func
 3271              	RCC_ClearFlag:
 3272              	.LFB68:
1468:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1469:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1470:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1471:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         The reset flags are: RCC_FLAG_OBLRST, RCC_FLAG_PINRST, RCC_FLAG_V18PWRRSTF,
1472:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         RCC_FLAG_PORRST, RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST,
1473:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         RCC_FLAG_LPWRRST.
1474:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  None
1475:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1476:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1477:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ClearFlag(void)
1478:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 3273              		.loc 1 1478 0
 3274              		.cfi_startproc
 3275 0000 80B5     		push	{r7, lr}
 3276              		.cfi_def_cfa_offset 8
 3277              		.cfi_offset 7, -8
 3278              		.cfi_offset 14, -4
 3279 0002 00AF     		add	r7, sp, #0
 3280              		.cfi_def_cfa_register 7
1479:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1480:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 3281              		.loc 1 1480 0
 3282 0004 044B     		ldr	r3, .L217
 3283 0006 044A     		ldr	r2, .L217
 3284 0008 526A     		ldr	r2, [r2, #36]
 3285 000a 8021     		mov	r1, #128
 3286 000c 4904     		lsl	r1, r1, #17
 3287 000e 0A43     		orr	r2, r1
 3288 0010 5A62     		str	r2, [r3, #36]
1481:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 3289              		.loc 1 1481 0
 3290 0012 BD46     		mov	sp, r7
 3291              		@ sp needed
 3292 0014 80BD     		pop	{r7, pc}
 3293              	.L218:
 3294 0016 C046     		.align	2
 3295              	.L217:
 3296 0018 00100240 		.word	1073876992
 3297              		.cfi_endproc
 3298              	.LFE68:
 3300              		.section	.text.RCC_GetITStatus,"ax",%progbits
 3301              		.align	2
 3302              		.global	RCC_GetITStatus
 3303              		.code	16
 3304              		.thumb_func
 3306              	RCC_GetITStatus:
 3307              	.LFB69:
1482:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1483:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1484:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1485:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1486:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be one of the following values:
1487:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_LSIRDY: LSI ready interrupt
1488:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_LSERDY: LSE ready interrupt
1489:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSIRDY: HSI ready interrupt
1490:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSERDY: HSE ready interrupt
1491:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_PLLRDY: PLL ready interrupt
1492:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSI14RDY: HSI14 ready interrupt 
1493:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_CSS: Clock Security System interrupt
1494:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1495:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1496:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1497:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 3308              		.loc 1 1497 0
 3309              		.cfi_startproc
 3310 0000 80B5     		push	{r7, lr}
 3311              		.cfi_def_cfa_offset 8
 3312              		.cfi_offset 7, -8
 3313              		.cfi_offset 14, -4
 3314 0002 84B0     		sub	sp, sp, #16
 3315              		.cfi_def_cfa_offset 24
 3316 0004 00AF     		add	r7, sp, #0
 3317              		.cfi_def_cfa_register 7
 3318 0006 021C     		mov	r2, r0
 3319 0008 FB1D     		add	r3, r7, #7
 3320 000a 1A70     		strb	r2, [r3]
1498:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ITStatus bitstatus = RESET;
 3321              		.loc 1 1498 0
 3322 000c 3B1C     		mov	r3, r7
 3323 000e 0F33     		add	r3, r3, #15
 3324 0010 0022     		mov	r2, #0
 3325 0012 1A70     		strb	r2, [r3]
1499:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1500:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1501:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
 3326              		.loc 1 1501 0
 3327 0014 FB1D     		add	r3, r7, #7
 3328 0016 1B78     		ldrb	r3, [r3]
 3329 0018 012B     		cmp	r3, #1
 3330 001a 1DD0     		beq	.L220
 3331              		.loc 1 1501 0 is_stmt 0 discriminator 1
 3332 001c FB1D     		add	r3, r7, #7
 3333 001e 1B78     		ldrb	r3, [r3]
 3334 0020 022B     		cmp	r3, #2
 3335 0022 19D0     		beq	.L220
 3336 0024 FB1D     		add	r3, r7, #7
 3337 0026 1B78     		ldrb	r3, [r3]
 3338 0028 042B     		cmp	r3, #4
 3339 002a 15D0     		beq	.L220
 3340 002c FB1D     		add	r3, r7, #7
 3341 002e 1B78     		ldrb	r3, [r3]
 3342 0030 082B     		cmp	r3, #8
 3343 0032 11D0     		beq	.L220
 3344 0034 FB1D     		add	r3, r7, #7
 3345 0036 1B78     		ldrb	r3, [r3]
 3346 0038 102B     		cmp	r3, #16
 3347 003a 0DD0     		beq	.L220
 3348 003c FB1D     		add	r3, r7, #7
 3349 003e 1B78     		ldrb	r3, [r3]
 3350 0040 202B     		cmp	r3, #32
 3351 0042 09D0     		beq	.L220
 3352 0044 FB1D     		add	r3, r7, #7
 3353 0046 1B78     		ldrb	r3, [r3]
 3354 0048 802B     		cmp	r3, #128
 3355 004a 05D0     		beq	.L220
 3356 004c 0D4A     		ldr	r2, .L224
 3357 004e 0E4B     		ldr	r3, .L224+4
 3358 0050 101C     		mov	r0, r2
 3359 0052 191C     		mov	r1, r3
 3360 0054 FFF7FEFF 		bl	assert_failed
 3361              	.L220:
1502:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1503:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1504:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 3362              		.loc 1 1504 0 is_stmt 1
 3363 0058 0C4B     		ldr	r3, .L224+8
 3364 005a 9B68     		ldr	r3, [r3, #8]
 3365 005c FA1D     		add	r2, r7, #7
 3366 005e 1278     		ldrb	r2, [r2]
 3367 0060 1340     		and	r3, r2
 3368 0062 04D0     		beq	.L221
1505:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1506:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     bitstatus = SET;
 3369              		.loc 1 1506 0
 3370 0064 3B1C     		mov	r3, r7
 3371 0066 0F33     		add	r3, r3, #15
 3372 0068 0122     		mov	r2, #1
 3373 006a 1A70     		strb	r2, [r3]
 3374 006c 03E0     		b	.L222
 3375              	.L221:
1507:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1508:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1509:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1510:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     bitstatus = RESET;
 3376              		.loc 1 1510 0
 3377 006e 3B1C     		mov	r3, r7
 3378 0070 0F33     		add	r3, r3, #15
 3379 0072 0022     		mov	r2, #0
 3380 0074 1A70     		strb	r2, [r3]
 3381              	.L222:
1511:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1512:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Return the RCC_IT status */
1513:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return  bitstatus;
 3382              		.loc 1 1513 0
 3383 0076 3B1C     		mov	r3, r7
 3384 0078 0F33     		add	r3, r3, #15
 3385 007a 1B78     		ldrb	r3, [r3]
1514:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 3386              		.loc 1 1514 0
 3387 007c 181C     		mov	r0, r3
 3388 007e BD46     		mov	sp, r7
 3389 0080 04B0     		add	sp, sp, #16
 3390              		@ sp needed
 3391 0082 80BD     		pop	{r7, pc}
 3392              	.L225:
 3393              		.align	2
 3394              	.L224:
 3395 0084 00000000 		.word	.LC0
 3396 0088 DD050000 		.word	1501
 3397 008c 00100240 		.word	1073876992
 3398              		.cfi_endproc
 3399              	.LFE69:
 3401              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 3402              		.align	2
 3403              		.global	RCC_ClearITPendingBit
 3404              		.code	16
 3405              		.thumb_func
 3407              	RCC_ClearITPendingBit:
 3408              	.LFB70:
1515:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1516:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1517:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1518:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1519:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This parameter can be any combination of the following values:
1520:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_LSIRDY: LSI ready interrupt
1521:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_LSERDY: LSE ready interrupt
1522:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSIRDY: HSI ready interrupt
1523:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSERDY: HSE ready interrupt
1524:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_PLLRDY: PLL ready interrupt
1525:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSI14RDY: HSI14 ready interrupt  
1526:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_CSS: Clock Security System interrupt
1527:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1528:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1529:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1530:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 3409              		.loc 1 1530 0
 3410              		.cfi_startproc
 3411 0000 80B5     		push	{r7, lr}
 3412              		.cfi_def_cfa_offset 8
 3413              		.cfi_offset 7, -8
 3414              		.cfi_offset 14, -4
 3415 0002 82B0     		sub	sp, sp, #8
 3416              		.cfi_def_cfa_offset 16
 3417 0004 00AF     		add	r7, sp, #0
 3418              		.cfi_def_cfa_register 7
 3419 0006 021C     		mov	r2, r0
 3420 0008 FB1D     		add	r3, r7, #7
 3421 000a 1A70     		strb	r2, [r3]
1531:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1532:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
 3422              		.loc 1 1532 0
 3423 000c FB1D     		add	r3, r7, #7
 3424 000e 1A78     		ldrb	r2, [r3]
 3425 0010 4023     		mov	r3, #64
 3426 0012 1340     		and	r3, r2
 3427 0014 03D1     		bne	.L227
 3428              		.loc 1 1532 0 is_stmt 0 discriminator 2
 3429 0016 FB1D     		add	r3, r7, #7
 3430 0018 1B78     		ldrb	r3, [r3]
 3431 001a 002B     		cmp	r3, #0
 3432 001c 05D1     		bne	.L228
 3433              	.L227:
 3434              		.loc 1 1532 0 discriminator 1
 3435 001e 064A     		ldr	r2, .L229
 3436 0020 064B     		ldr	r3, .L229+4
 3437 0022 101C     		mov	r0, r2
 3438 0024 191C     		mov	r1, r3
 3439 0026 FFF7FEFF 		bl	assert_failed
 3440              	.L228:
1533:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1534:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1535:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****      pending bits */
1536:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 3441              		.loc 1 1536 0 is_stmt 1
 3442 002a 054B     		ldr	r3, .L229+8
 3443 002c FA1D     		add	r2, r7, #7
 3444 002e 1278     		ldrb	r2, [r2]
 3445 0030 1A70     		strb	r2, [r3]
1537:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 3446              		.loc 1 1537 0
 3447 0032 BD46     		mov	sp, r7
 3448 0034 02B0     		add	sp, sp, #8
 3449              		@ sp needed
 3450 0036 80BD     		pop	{r7, pc}
 3451              	.L230:
 3452              		.align	2
 3453              	.L229:
 3454 0038 00000000 		.word	.LC0
 3455 003c FC050000 		.word	1532
 3456 0040 0A100240 		.word	1073877002
 3457              		.cfi_endproc
 3458              	.LFE70:
 3460              		.text
 3461              	.Letext0:
 3462              		.file 2 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/machine/_default_types
 3463              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/stdint.h"
 3464              		.file 4 "../../ext-src/CMSIS/ST/STM32F0xx/Include/stm32f0xx.h"
 3465              		.file 5 "../../ext-src/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_rcc.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_rcc.c
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:18     .data.APBAHBPrescTable:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:21     .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:39     .text.RCC_DeInit:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:44     .text.RCC_DeInit:0000000000000000 RCC_DeInit
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:122    .text.RCC_DeInit:0000000000000070 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:132    .rodata:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:137    .text.RCC_HSEConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:142    .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:193    .text.RCC_HSEConfig:0000000000000044 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:199    .text.RCC_WaitForHSEStartUp:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:204    .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3089   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:280    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:285    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:344    .text.RCC_AdjustHSICalibrationValue:000000000000004c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:350    .text.RCC_HSICmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:355    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:417    .text.RCC_HSICmd:0000000000000054 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:423    .text.RCC_AdjustHSI14CalibrationValue:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:428    .text.RCC_AdjustHSI14CalibrationValue:0000000000000000 RCC_AdjustHSI14CalibrationValue
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:487    .text.RCC_AdjustHSI14CalibrationValue:000000000000004c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:493    .text.RCC_HSI14Cmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:498    .text.RCC_HSI14Cmd:0000000000000000 RCC_HSI14Cmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:560    .text.RCC_HSI14Cmd:0000000000000054 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:566    .text.RCC_HSI14ADCRequestCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:571    .text.RCC_HSI14ADCRequestCmd:0000000000000000 RCC_HSI14ADCRequestCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:633    .text.RCC_HSI14ADCRequestCmd:0000000000000054 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:639    .text.RCC_LSEConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:644    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:704    .text.RCC_LSEConfig:0000000000000054 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:710    .text.RCC_LSEDriveConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:715    .text.RCC_LSEDriveConfig:0000000000000000 RCC_LSEDriveConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:771    .text.RCC_LSEDriveConfig:000000000000004c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:777    .text.RCC_LSICmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:782    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:844    .text.RCC_LSICmd:0000000000000054 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:850    .text.RCC_PLLConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:855    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:992    .text.RCC_PLLConfig:00000000000000ec $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:999    .text.RCC_PLLCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1004   .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1067   .text.RCC_PLLCmd:0000000000000054 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1074   .text.RCC_PREDIV1Config:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1079   .text.RCC_PREDIV1Config:0000000000000000 RCC_PREDIV1Config
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1178   .text.RCC_PREDIV1Config:000000000000009c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1184   .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1189   .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1251   .text.RCC_ClockSecuritySystemCmd:0000000000000054 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1259   .text.RCC_MCOConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1264   .text.RCC_MCOConfig:0000000000000000 RCC_MCOConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1332   .text.RCC_MCOConfig:0000000000000068 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1339   .text.RCC_SYSCLKConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1344   .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1403   .text.RCC_SYSCLKConfig:000000000000004c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1410   .text.RCC_GetSYSCLKSource:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1415   .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1440   .text.RCC_GetSYSCLKSource:0000000000000018 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1445   .text.RCC_HCLKConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1450   .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1527   .text.RCC_HCLKConfig:0000000000000070 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1534   .text.RCC_PCLKConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1539   .text.RCC_PCLKConfig:0000000000000000 RCC_PCLKConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1612   .text.RCC_PCLKConfig:0000000000000068 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1620   .text.RCC_ADCCLKConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1625   .text.RCC_ADCCLKConfig:0000000000000000 RCC_ADCCLKConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1697   .text.RCC_ADCCLKConfig:0000000000000068 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1707   .text.RCC_CECCLKConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1712   .text.RCC_CECCLKConfig:0000000000000000 RCC_CECCLKConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1761   .text.RCC_CECCLKConfig:0000000000000040 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1768   .text.RCC_I2CCLKConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1773   .text.RCC_I2CCLKConfig:0000000000000000 RCC_I2CCLKConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1822   .text.RCC_I2CCLKConfig:0000000000000040 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1829   .text.RCC_USARTCLKConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1834   .text.RCC_USARTCLKConfig:0000000000000000 RCC_USARTCLKConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1890   .text.RCC_USARTCLKConfig:000000000000004c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1897   .text.RCC_GetClocksFreq:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:1902   .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2193   .text.RCC_GetClocksFreq:00000000000001b4 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2203   .text.RCC_RTCCLKConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2208   .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2259   .text.RCC_RTCCLKConfig:0000000000000044 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2266   .text.RCC_RTCCLKCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2271   .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2333   .text.RCC_RTCCLKCmd:0000000000000054 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2341   .text.RCC_BackupResetCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2346   .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2408   .text.RCC_BackupResetCmd:0000000000000054 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2416   .text.RCC_AHBPeriphClockCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2421   .text.RCC_AHBPeriphClockCmd:0000000000000000 RCC_AHBPeriphClockCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2501   .text.RCC_AHBPeriphClockCmd:0000000000000070 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2510   .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2515   .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2595   .text.RCC_APB2PeriphClockCmd:0000000000000070 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2604   .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2609   .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2690   .text.RCC_APB1PeriphClockCmd:0000000000000070 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2698   .text.RCC_AHBPeriphResetCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2703   .text.RCC_AHBPeriphResetCmd:0000000000000000 RCC_AHBPeriphResetCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2783   .text.RCC_AHBPeriphResetCmd:0000000000000070 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2792   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2797   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2878   .text.RCC_APB2PeriphResetCmd:0000000000000070 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2886   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2891   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2971   .text.RCC_APB1PeriphResetCmd:0000000000000070 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2980   .text.RCC_ITConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:2985   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3076   .text.RCC_ITConfig:0000000000000084 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3084   .text.RCC_GetFlagStatus:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3260   .text.RCC_GetFlagStatus:000000000000010c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3266   .text.RCC_ClearFlag:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3271   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3296   .text.RCC_ClearFlag:0000000000000018 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3301   .text.RCC_GetITStatus:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3306   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3395   .text.RCC_GetITStatus:0000000000000084 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3402   .text.RCC_ClearITPendingBit:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3407   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYFdvxE.s:3454   .text.RCC_ClearITPendingBit:0000000000000038 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.9252205565be9cbc11fa49e4ee70d556
                           .group:0000000000000000 wm4.stm32f0xx.h.54.664bd2bdbb20859ae6a5c66c16d4ee5a
                           .group:0000000000000000 wm4.core_cm0.h.32.41c1bd92799bc17b3c8424dd5c622427
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cm0.h.130.eea61816b4c7004601b0935484a214ea
                           .group:0000000000000000 wm4.stm32f0xx.h.226.38dd78fa77e64690c744af5bf4bffc7b
                           .group:0000000000000000 wm4.stm32f0xx_cec.h.80.d17e4ea90700c26010f339885be92ac0
                           .group:0000000000000000 wm4.stm32f0xx_crc.h.31.48fbd36307d848f32978567b16118557
                           .group:0000000000000000 wm4.stm32f0xx_comp.h.31.a640b8c7673f3e181cfd826dce70b6e2
                           .group:0000000000000000 wm4.stm32f0xx_dac.h.31.3e178ad0888f70df8fbc4c999d855b3e
                           .group:0000000000000000 wm4.stm32f0xx_dbgmcu.h.31.282da985c6ed8dd33417cf074ecfdf63
                           .group:0000000000000000 wm4.stm32f0xx_dma.h.31.68def2497939cb34c3f292e0c507724a
                           .group:0000000000000000 wm4.stm32f0xx_exti.h.31.81a00331ef3e014ed4dafe9e9baacca3
                           .group:0000000000000000 wm4.stm32f0xx_flash.h.31.60d92ed32439cfb92572ec2678e2be21
                           .group:0000000000000000 wm4.stm32f0xx_gpio.h.31.df5c3a39b21131ade11d30b7e1580be6
                           .group:0000000000000000 wm4.stm32f0xx_syscfg.h.31.f98c72ea26c47fccafefd977b75786d3
                           .group:0000000000000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:0000000000000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:0000000000000000 wm4.stm32f0xx_pwr.h.31.5b469253a65db741700e0b45f396c99d
                           .group:0000000000000000 wm4.stm32f0xx_rcc.h.31.bc2f5dd9e2f518d727a1e0ce497a42e6
                           .group:0000000000000000 wm4.stm32f0xx_rtc.h.31.bc9d631913a743746cf54f04d4efbf7b
                           .group:0000000000000000 wm4.stm32f0xx_spi.h.31.5b4d0d36c03feb5b081143cdba79744d
                           .group:0000000000000000 wm4.stm32f0xx_tim.h.31.21b4d7229c685868595d751757b51e1b
                           .group:0000000000000000 wm4.stm32f0xx_usart.h.31.8abae79a1c4f266d08faf5996370b48f
                           .group:0000000000000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:0000000000000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6

UNDEFINED SYMBOLS
assert_failed
__aeabi_uidiv
