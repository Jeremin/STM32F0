   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NVIC_SetPriority,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	NVIC_SetPriority:
  23              	.LFB28:
  24              		.file 1 "../../ext-src/CMSIS/Include/core_cm0.h"
   1:../../ext-src/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:../../ext-src/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:../../ext-src/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:../../ext-src/CMSIS/Include/core_cm0.h ****  * @version  V2.10
   5:../../ext-src/CMSIS/Include/core_cm0.h ****  * @date     19. July 2011
   6:../../ext-src/CMSIS/Include/core_cm0.h ****  *
   7:../../ext-src/CMSIS/Include/core_cm0.h ****  * @note
   8:../../ext-src/CMSIS/Include/core_cm0.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:../../ext-src/CMSIS/Include/core_cm0.h ****  *
  10:../../ext-src/CMSIS/Include/core_cm0.h ****  * @par
  11:../../ext-src/CMSIS/Include/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../../ext-src/CMSIS/Include/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../../ext-src/CMSIS/Include/core_cm0.h ****  * within development tools that are supporting such ARM based processors.
  14:../../ext-src/CMSIS/Include/core_cm0.h ****  *
  15:../../ext-src/CMSIS/Include/core_cm0.h ****  * @par
  16:../../ext-src/CMSIS/Include/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../ext-src/CMSIS/Include/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../ext-src/CMSIS/Include/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../ext-src/CMSIS/Include/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../ext-src/CMSIS/Include/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../ext-src/CMSIS/Include/core_cm0.h ****  *
  22:../../ext-src/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  23:../../ext-src/CMSIS/Include/core_cm0.h **** #if defined ( __ICCARM__ )
  24:../../ext-src/CMSIS/Include/core_cm0.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
  26:../../ext-src/CMSIS/Include/core_cm0.h **** 
  27:../../ext-src/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  28:../../ext-src/CMSIS/Include/core_cm0.h ****  extern "C" {
  29:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
  30:../../ext-src/CMSIS/Include/core_cm0.h **** 
  31:../../ext-src/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:../../ext-src/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:../../ext-src/CMSIS/Include/core_cm0.h **** 
  34:../../ext-src/CMSIS/Include/core_cm0.h **** 
  35:../../ext-src/CMSIS/Include/core_cm0.h **** /** \mainpage CMSIS Cortex-M0
  36:../../ext-src/CMSIS/Include/core_cm0.h **** 
  37:../../ext-src/CMSIS/Include/core_cm0.h ****   This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
  38:../../ext-src/CMSIS/Include/core_cm0.h ****   It consists of:
  39:../../ext-src/CMSIS/Include/core_cm0.h **** 
  40:../../ext-src/CMSIS/Include/core_cm0.h ****      - Cortex-M Core Register Definitions
  41:../../ext-src/CMSIS/Include/core_cm0.h ****      - Cortex-M functions
  42:../../ext-src/CMSIS/Include/core_cm0.h ****      - Cortex-M instructions
  43:../../ext-src/CMSIS/Include/core_cm0.h **** 
  44:../../ext-src/CMSIS/Include/core_cm0.h ****   The CMSIS Cortex-M0 Core Peripheral Access Layer contains C and assembly functions that ease
  45:../../ext-src/CMSIS/Include/core_cm0.h ****   access to the Cortex-M Core
  46:../../ext-src/CMSIS/Include/core_cm0.h ****  */
  47:../../ext-src/CMSIS/Include/core_cm0.h **** 
  48:../../ext-src/CMSIS/Include/core_cm0.h **** /** \defgroup CMSIS_MISRA_Exceptions  CMSIS MISRA-C:2004 Compliance Exceptions
  49:../../ext-src/CMSIS/Include/core_cm0.h ****   CMSIS violates following MISRA-C2004 Rules:
  50:../../ext-src/CMSIS/Include/core_cm0.h ****   
  51:../../ext-src/CMSIS/Include/core_cm0.h ****    - Violates MISRA 2004 Required Rule 8.5, object/function definition in header file.<br>
  52:../../ext-src/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'. 
  53:../../ext-src/CMSIS/Include/core_cm0.h **** 
  54:../../ext-src/CMSIS/Include/core_cm0.h ****    - Violates MISRA 2004 Required Rule 18.4, declaration of union type or object of union type: '{.
  55:../../ext-src/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  56:../../ext-src/CMSIS/Include/core_cm0.h ****    
  57:../../ext-src/CMSIS/Include/core_cm0.h ****    - Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined.<br>
  58:../../ext-src/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code. 
  59:../../ext-src/CMSIS/Include/core_cm0.h **** 
  60:../../ext-src/CMSIS/Include/core_cm0.h ****  */
  61:../../ext-src/CMSIS/Include/core_cm0.h **** 
  62:../../ext-src/CMSIS/Include/core_cm0.h **** 
  63:../../ext-src/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  64:../../ext-src/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  65:../../ext-src/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  66:../../ext-src/CMSIS/Include/core_cm0.h **** /** \defgroup CMSIS_core_definitions CMSIS Core Definitions
  67:../../ext-src/CMSIS/Include/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  68:../../ext-src/CMSIS/Include/core_cm0.h ****    - CMSIS version number
  69:../../ext-src/CMSIS/Include/core_cm0.h ****    - Cortex-M core
  70:../../ext-src/CMSIS/Include/core_cm0.h ****    - Cortex-M core Revision Number
  71:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
  72:../../ext-src/CMSIS/Include/core_cm0.h ****  */
  73:../../ext-src/CMSIS/Include/core_cm0.h **** 
  74:../../ext-src/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  75:../../ext-src/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  76:../../ext-src/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x10)                                                       /*!<
  77:../../ext-src/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  78:../../ext-src/CMSIS/Include/core_cm0.h **** 
  79:../../ext-src/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
  80:../../ext-src/CMSIS/Include/core_cm0.h **** 
  81:../../ext-src/CMSIS/Include/core_cm0.h **** 
  82:../../ext-src/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:../../ext-src/CMSIS/Include/core_cm0.h **** 
  86:../../ext-src/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  87:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  88:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  89:../../ext-src/CMSIS/Include/core_cm0.h **** 
  90:../../ext-src/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  91:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  92:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  93:../../ext-src/CMSIS/Include/core_cm0.h **** 
  94:../../ext-src/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
  95:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  96:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  97:../../ext-src/CMSIS/Include/core_cm0.h **** 
  98:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
  99:../../ext-src/CMSIS/Include/core_cm0.h **** 
 100:../../ext-src/CMSIS/Include/core_cm0.h **** /*!< __FPU_USED to be checked prior to making use of FPU specific registers and functions */
 101:../../ext-src/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0
 102:../../ext-src/CMSIS/Include/core_cm0.h **** 
 103:../../ext-src/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 104:../../ext-src/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 105:../../ext-src/CMSIS/Include/core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../../ext-src/CMSIS/Include/core_cm0.h ****   #endif
 107:../../ext-src/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 108:../../ext-src/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 109:../../ext-src/CMSIS/Include/core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 110:../../ext-src/CMSIS/Include/core_cm0.h ****   #endif
 111:../../ext-src/CMSIS/Include/core_cm0.h **** 
 112:../../ext-src/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 113:../../ext-src/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 114:../../ext-src/CMSIS/Include/core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 115:../../ext-src/CMSIS/Include/core_cm0.h ****   #endif
 116:../../ext-src/CMSIS/Include/core_cm0.h **** 
 117:../../ext-src/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 118:../../ext-src/CMSIS/Include/core_cm0.h ****     /* add preprocessor checks */
 119:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
 120:../../ext-src/CMSIS/Include/core_cm0.h **** 
 121:../../ext-src/CMSIS/Include/core_cm0.h **** #include <stdint.h>                      /*!< standard types definitions                      */
 122:../../ext-src/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
 123:../../ext-src/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
 124:../../ext-src/CMSIS/Include/core_cm0.h **** 
 125:../../ext-src/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 126:../../ext-src/CMSIS/Include/core_cm0.h **** 
 127:../../ext-src/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 128:../../ext-src/CMSIS/Include/core_cm0.h **** 
 129:../../ext-src/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 130:../../ext-src/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 131:../../ext-src/CMSIS/Include/core_cm0.h **** 
 132:../../ext-src/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 133:../../ext-src/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 134:../../ext-src/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 135:../../ext-src/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000
 136:../../ext-src/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 137:../../ext-src/CMSIS/Include/core_cm0.h ****   #endif
 138:../../ext-src/CMSIS/Include/core_cm0.h **** 
 139:../../ext-src/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 140:../../ext-src/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2
 141:../../ext-src/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 142:../../ext-src/CMSIS/Include/core_cm0.h ****   #endif
 143:../../ext-src/CMSIS/Include/core_cm0.h **** 
 144:../../ext-src/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 145:../../ext-src/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0
 146:../../ext-src/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 147:../../ext-src/CMSIS/Include/core_cm0.h ****   #endif
 148:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
 149:../../ext-src/CMSIS/Include/core_cm0.h **** 
 150:../../ext-src/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 151:../../ext-src/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 152:../../ext-src/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< defines 'read only' permissions                 */
 153:../../ext-src/CMSIS/Include/core_cm0.h **** #else
 154:../../ext-src/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< defines 'read only' permissions                 */
 155:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
 156:../../ext-src/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 157:../../ext-src/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 158:../../ext-src/CMSIS/Include/core_cm0.h **** 
 159:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_definitions */
 160:../../ext-src/CMSIS/Include/core_cm0.h **** 
 161:../../ext-src/CMSIS/Include/core_cm0.h **** 
 162:../../ext-src/CMSIS/Include/core_cm0.h **** 
 163:../../ext-src/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 164:../../ext-src/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 165:../../ext-src/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 166:../../ext-src/CMSIS/Include/core_cm0.h **** /** \defgroup CMSIS_core_register CMSIS Core Register
 167:../../ext-src/CMSIS/Include/core_cm0.h ****   Core Register contain:
 168:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core Register
 169:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 170:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 171:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 172:../../ext-src/CMSIS/Include/core_cm0.h **** */
 173:../../ext-src/CMSIS/Include/core_cm0.h **** 
 174:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 175:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_CORE CMSIS Core
 176:../../ext-src/CMSIS/Include/core_cm0.h ****   Type definitions for the Cortex-M Core Registers
 177:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 178:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 179:../../ext-src/CMSIS/Include/core_cm0.h **** 
 180:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 181:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 182:../../ext-src/CMSIS/Include/core_cm0.h **** typedef union
 183:../../ext-src/CMSIS/Include/core_cm0.h **** {
 184:../../ext-src/CMSIS/Include/core_cm0.h ****   struct
 185:../../ext-src/CMSIS/Include/core_cm0.h ****   {
 186:../../ext-src/CMSIS/Include/core_cm0.h **** #if (__CORTEX_M != 0x04)
 187:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 188:../../ext-src/CMSIS/Include/core_cm0.h **** #else
 189:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 190:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 191:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 192:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
 193:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 194:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 195:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 196:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 197:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 198:../../ext-src/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 199:../../ext-src/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 200:../../ext-src/CMSIS/Include/core_cm0.h **** } APSR_Type;
 201:../../ext-src/CMSIS/Include/core_cm0.h **** 
 202:../../ext-src/CMSIS/Include/core_cm0.h **** 
 203:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 204:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 205:../../ext-src/CMSIS/Include/core_cm0.h **** typedef union
 206:../../ext-src/CMSIS/Include/core_cm0.h **** {
 207:../../ext-src/CMSIS/Include/core_cm0.h ****   struct
 208:../../ext-src/CMSIS/Include/core_cm0.h ****   {
 209:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 210:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 211:../../ext-src/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 212:../../ext-src/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 213:../../ext-src/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 214:../../ext-src/CMSIS/Include/core_cm0.h **** 
 215:../../ext-src/CMSIS/Include/core_cm0.h **** 
 216:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 217:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 218:../../ext-src/CMSIS/Include/core_cm0.h **** typedef union
 219:../../ext-src/CMSIS/Include/core_cm0.h **** {
 220:../../ext-src/CMSIS/Include/core_cm0.h ****   struct
 221:../../ext-src/CMSIS/Include/core_cm0.h ****   {
 222:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 223:../../ext-src/CMSIS/Include/core_cm0.h **** #if (__CORTEX_M != 0x04)
 224:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 225:../../ext-src/CMSIS/Include/core_cm0.h **** #else
 226:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 227:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 228:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 229:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
 230:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 231:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 232:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 233:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 234:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 235:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 236:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 237:../../ext-src/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 238:../../ext-src/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 239:../../ext-src/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 240:../../ext-src/CMSIS/Include/core_cm0.h **** 
 241:../../ext-src/CMSIS/Include/core_cm0.h **** 
 242:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 243:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 244:../../ext-src/CMSIS/Include/core_cm0.h **** typedef union
 245:../../ext-src/CMSIS/Include/core_cm0.h **** {
 246:../../ext-src/CMSIS/Include/core_cm0.h ****   struct
 247:../../ext-src/CMSIS/Include/core_cm0.h ****   {
 248:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 249:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 250:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 251:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 252:../../ext-src/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 253:../../ext-src/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 254:../../ext-src/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 255:../../ext-src/CMSIS/Include/core_cm0.h **** 
 256:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 257:../../ext-src/CMSIS/Include/core_cm0.h **** 
 258:../../ext-src/CMSIS/Include/core_cm0.h **** 
 259:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 260:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 261:../../ext-src/CMSIS/Include/core_cm0.h ****   Type definitions for the Cortex-M NVIC Registers
 262:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 263:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 264:../../ext-src/CMSIS/Include/core_cm0.h **** 
 265:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 266:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 267:../../ext-src/CMSIS/Include/core_cm0.h **** typedef struct
 268:../../ext-src/CMSIS/Include/core_cm0.h **** {
 269:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 270:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED0[31];
 271:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 272:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RSERVED1[31];
 273:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 274:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED2[31];
 275:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 276:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED3[31];
 277:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED4[64];
 278:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register     
 279:../../ext-src/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 280:../../ext-src/CMSIS/Include/core_cm0.h **** 
 281:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 282:../../ext-src/CMSIS/Include/core_cm0.h **** 
 283:../../ext-src/CMSIS/Include/core_cm0.h **** 
 284:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 285:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_SCB CMSIS SCB
 286:../../ext-src/CMSIS/Include/core_cm0.h ****   Type definitions for the Cortex-M System Control Block Registers
 287:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 288:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 289:../../ext-src/CMSIS/Include/core_cm0.h **** 
 290:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Structure type to access the System Control Block (SCB).
 291:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 292:../../ext-src/CMSIS/Include/core_cm0.h **** typedef struct
 293:../../ext-src/CMSIS/Include/core_cm0.h **** {
 294:../../ext-src/CMSIS/Include/core_cm0.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 295:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 296:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED0;
 297:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 298:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 299:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 300:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED1;
 301:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t SHP[2];                  /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 302:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 303:../../ext-src/CMSIS/Include/core_cm0.h **** } SCB_Type;
 304:../../ext-src/CMSIS/Include/core_cm0.h **** 
 305:../../ext-src/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 306:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 307:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 308:../../ext-src/CMSIS/Include/core_cm0.h **** 
 309:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 310:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 311:../../ext-src/CMSIS/Include/core_cm0.h **** 
 312:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 313:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 314:../../ext-src/CMSIS/Include/core_cm0.h **** 
 315:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 316:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 317:../../ext-src/CMSIS/Include/core_cm0.h **** 
 318:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 319:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 320:../../ext-src/CMSIS/Include/core_cm0.h **** 
 321:../../ext-src/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 322:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 323:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 324:../../ext-src/CMSIS/Include/core_cm0.h **** 
 325:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 326:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 327:../../ext-src/CMSIS/Include/core_cm0.h **** 
 328:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 329:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 330:../../ext-src/CMSIS/Include/core_cm0.h **** 
 331:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 332:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 333:../../ext-src/CMSIS/Include/core_cm0.h **** 
 334:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 335:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 336:../../ext-src/CMSIS/Include/core_cm0.h **** 
 337:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 338:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 339:../../ext-src/CMSIS/Include/core_cm0.h **** 
 340:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 341:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 342:../../ext-src/CMSIS/Include/core_cm0.h **** 
 343:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 344:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 345:../../ext-src/CMSIS/Include/core_cm0.h **** 
 346:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 347:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 348:../../ext-src/CMSIS/Include/core_cm0.h **** 
 349:../../ext-src/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 350:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 351:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 352:../../ext-src/CMSIS/Include/core_cm0.h **** 
 353:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 354:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 355:../../ext-src/CMSIS/Include/core_cm0.h **** 
 356:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 357:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 358:../../ext-src/CMSIS/Include/core_cm0.h **** 
 359:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 360:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 361:../../ext-src/CMSIS/Include/core_cm0.h **** 
 362:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 363:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 364:../../ext-src/CMSIS/Include/core_cm0.h **** 
 365:../../ext-src/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 366:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 367:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 368:../../ext-src/CMSIS/Include/core_cm0.h **** 
 369:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 370:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 371:../../ext-src/CMSIS/Include/core_cm0.h **** 
 372:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 373:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 374:../../ext-src/CMSIS/Include/core_cm0.h **** 
 375:../../ext-src/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 376:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 377:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 378:../../ext-src/CMSIS/Include/core_cm0.h **** 
 379:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 380:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 381:../../ext-src/CMSIS/Include/core_cm0.h **** 
 382:../../ext-src/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 383:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 384:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 385:../../ext-src/CMSIS/Include/core_cm0.h **** 
 386:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 387:../../ext-src/CMSIS/Include/core_cm0.h **** 
 388:../../ext-src/CMSIS/Include/core_cm0.h **** 
 389:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 390:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 391:../../ext-src/CMSIS/Include/core_cm0.h ****   Type definitions for the Cortex-M System Timer Registers
 392:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 393:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 394:../../ext-src/CMSIS/Include/core_cm0.h **** 
 395:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Structure type to access the System Timer (SysTick).
 396:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 397:../../ext-src/CMSIS/Include/core_cm0.h **** typedef struct
 398:../../ext-src/CMSIS/Include/core_cm0.h **** {
 399:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 400:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 401:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 402:../../ext-src/CMSIS/Include/core_cm0.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 403:../../ext-src/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 404:../../ext-src/CMSIS/Include/core_cm0.h **** 
 405:../../ext-src/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 406:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 407:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 408:../../ext-src/CMSIS/Include/core_cm0.h **** 
 409:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 410:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 411:../../ext-src/CMSIS/Include/core_cm0.h **** 
 412:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 413:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 414:../../ext-src/CMSIS/Include/core_cm0.h **** 
 415:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 416:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 417:../../ext-src/CMSIS/Include/core_cm0.h **** 
 418:../../ext-src/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 419:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 420:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 421:../../ext-src/CMSIS/Include/core_cm0.h **** 
 422:../../ext-src/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 423:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 424:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 425:../../ext-src/CMSIS/Include/core_cm0.h **** 
 426:../../ext-src/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 427:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 428:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 429:../../ext-src/CMSIS/Include/core_cm0.h **** 
 430:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 431:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 432:../../ext-src/CMSIS/Include/core_cm0.h **** 
 433:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 434:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 435:../../ext-src/CMSIS/Include/core_cm0.h **** 
 436:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 437:../../ext-src/CMSIS/Include/core_cm0.h **** 
 438:../../ext-src/CMSIS/Include/core_cm0.h **** 
 439:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 440:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 441:../../ext-src/CMSIS/Include/core_cm0.h ****   Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible over DAP
 442:../../ext-src/CMSIS/Include/core_cm0.h ****   and not via processor. Therefore they are not covered by the Cortex-M0 header file.
 443:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 444:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 445:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 446:../../ext-src/CMSIS/Include/core_cm0.h **** 
 447:../../ext-src/CMSIS/Include/core_cm0.h **** 
 448:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 449:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 450:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 451:../../ext-src/CMSIS/Include/core_cm0.h **** 
 452:../../ext-src/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 453:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 454:../../ext-src/CMSIS/Include/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 455:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 456:../../ext-src/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 457:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 458:../../ext-src/CMSIS/Include/core_cm0.h **** 
 459:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 460:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 461:../../ext-src/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 462:../../ext-src/CMSIS/Include/core_cm0.h **** 
 463:../../ext-src/CMSIS/Include/core_cm0.h **** 
 464:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} */
 465:../../ext-src/CMSIS/Include/core_cm0.h **** 
 466:../../ext-src/CMSIS/Include/core_cm0.h **** 
 467:../../ext-src/CMSIS/Include/core_cm0.h **** 
 468:../../ext-src/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 469:../../ext-src/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 470:../../ext-src/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 471:../../ext-src/CMSIS/Include/core_cm0.h **** /** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 472:../../ext-src/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 473:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 474:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 475:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 476:../../ext-src/CMSIS/Include/core_cm0.h **** */
 477:../../ext-src/CMSIS/Include/core_cm0.h **** 
 478:../../ext-src/CMSIS/Include/core_cm0.h **** 
 479:../../ext-src/CMSIS/Include/core_cm0.h **** 
 480:../../ext-src/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 481:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 482:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 483:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 484:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 485:../../ext-src/CMSIS/Include/core_cm0.h **** 
 486:../../ext-src/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 487:../../ext-src/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 488:../../ext-src/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 489:../../ext-src/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 490:../../ext-src/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 491:../../ext-src/CMSIS/Include/core_cm0.h **** 
 492:../../ext-src/CMSIS/Include/core_cm0.h **** 
 493:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Enable External Interrupt
 494:../../ext-src/CMSIS/Include/core_cm0.h **** 
 495:../../ext-src/CMSIS/Include/core_cm0.h ****     This function enables a device specific interrupt in the NVIC interrupt controller.
 496:../../ext-src/CMSIS/Include/core_cm0.h ****     The interrupt number cannot be a negative value.
 497:../../ext-src/CMSIS/Include/core_cm0.h **** 
 498:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 499:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 500:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 501:../../ext-src/CMSIS/Include/core_cm0.h **** {
 502:../../ext-src/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 503:../../ext-src/CMSIS/Include/core_cm0.h **** }
 504:../../ext-src/CMSIS/Include/core_cm0.h **** 
 505:../../ext-src/CMSIS/Include/core_cm0.h **** 
 506:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Disable External Interrupt
 507:../../ext-src/CMSIS/Include/core_cm0.h **** 
 508:../../ext-src/CMSIS/Include/core_cm0.h ****     This function disables a device specific interrupt in the NVIC interrupt controller.
 509:../../ext-src/CMSIS/Include/core_cm0.h ****     The interrupt number cannot be a negative value.
 510:../../ext-src/CMSIS/Include/core_cm0.h **** 
 511:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 512:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 513:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 514:../../ext-src/CMSIS/Include/core_cm0.h **** {
 515:../../ext-src/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 516:../../ext-src/CMSIS/Include/core_cm0.h **** }
 517:../../ext-src/CMSIS/Include/core_cm0.h **** 
 518:../../ext-src/CMSIS/Include/core_cm0.h **** 
 519:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Get Pending Interrupt
 520:../../ext-src/CMSIS/Include/core_cm0.h **** 
 521:../../ext-src/CMSIS/Include/core_cm0.h ****     This function reads the pending register in the NVIC and returns the pending bit
 522:../../ext-src/CMSIS/Include/core_cm0.h ****     for the specified interrupt.
 523:../../ext-src/CMSIS/Include/core_cm0.h **** 
 524:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the interrupt for get pending
 525:../../ext-src/CMSIS/Include/core_cm0.h ****     \return             0  Interrupt status is not pending
 526:../../ext-src/CMSIS/Include/core_cm0.h ****     \return             1  Interrupt status is pending
 527:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 528:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 529:../../ext-src/CMSIS/Include/core_cm0.h **** {
 530:../../ext-src/CMSIS/Include/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
 531:../../ext-src/CMSIS/Include/core_cm0.h **** }
 532:../../ext-src/CMSIS/Include/core_cm0.h **** 
 533:../../ext-src/CMSIS/Include/core_cm0.h **** 
 534:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Set Pending Interrupt
 535:../../ext-src/CMSIS/Include/core_cm0.h **** 
 536:../../ext-src/CMSIS/Include/core_cm0.h ****     This function sets the pending bit for the specified interrupt.
 537:../../ext-src/CMSIS/Include/core_cm0.h ****     The interrupt number cannot be a negative value.
 538:../../ext-src/CMSIS/Include/core_cm0.h **** 
 539:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the interrupt for set pending
 540:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 541:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 542:../../ext-src/CMSIS/Include/core_cm0.h **** {
 543:../../ext-src/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 544:../../ext-src/CMSIS/Include/core_cm0.h **** }
 545:../../ext-src/CMSIS/Include/core_cm0.h **** 
 546:../../ext-src/CMSIS/Include/core_cm0.h **** 
 547:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Clear Pending Interrupt
 548:../../ext-src/CMSIS/Include/core_cm0.h **** 
 549:../../ext-src/CMSIS/Include/core_cm0.h ****     This function clears the pending bit for the specified interrupt.
 550:../../ext-src/CMSIS/Include/core_cm0.h ****     The interrupt number cannot be a negative value.
 551:../../ext-src/CMSIS/Include/core_cm0.h **** 
 552:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
 553:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 554:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 555:../../ext-src/CMSIS/Include/core_cm0.h **** {
 556:../../ext-src/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 557:../../ext-src/CMSIS/Include/core_cm0.h **** }
 558:../../ext-src/CMSIS/Include/core_cm0.h **** 
 559:../../ext-src/CMSIS/Include/core_cm0.h **** 
 560:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Set Interrupt Priority
 561:../../ext-src/CMSIS/Include/core_cm0.h **** 
 562:../../ext-src/CMSIS/Include/core_cm0.h ****     This function sets the priority for the specified interrupt. The interrupt
 563:../../ext-src/CMSIS/Include/core_cm0.h ****     number can be positive to specify an external (device specific)
 564:../../ext-src/CMSIS/Include/core_cm0.h ****     interrupt, or negative to specify an internal (core) interrupt.
 565:../../ext-src/CMSIS/Include/core_cm0.h **** 
 566:../../ext-src/CMSIS/Include/core_cm0.h ****     Note: The priority cannot be set for every core interrupt.
 567:../../ext-src/CMSIS/Include/core_cm0.h **** 
 568:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the interrupt for set priority
 569:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]  priority  Priority to set
 570:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 571:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 572:../../ext-src/CMSIS/Include/core_cm0.h **** {
  25              		.loc 1 572 0
  26              		.cfi_startproc
  27 0000 B0B5     		push	{r4, r5, r7, lr}
  28              		.cfi_def_cfa_offset 16
  29              		.cfi_offset 4, -16
  30              		.cfi_offset 5, -12
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              		.cfi_def_cfa_offset 24
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 021C     		mov	r2, r0
  38 0008 3960     		str	r1, [r7]
  39 000a FB1D     		add	r3, r7, #7
  40 000c 1A70     		strb	r2, [r3]
 573:../../ext-src/CMSIS/Include/core_cm0.h ****   if(IRQn < 0) {
  41              		.loc 1 573 0
  42 000e FB1D     		add	r3, r7, #7
  43 0010 1B78     		ldrb	r3, [r3]
  44 0012 7F2B     		cmp	r3, #127
  45 0014 32D9     		bls	.L2
 574:../../ext-src/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  46              		.loc 1 574 0
  47 0016 3049     		ldr	r1, .L4
  48 0018 FB1D     		add	r3, r7, #7
  49 001a 1B78     		ldrb	r3, [r3]
  50 001c 1A1C     		mov	r2, r3
  51 001e 0F23     		mov	r3, #15
  52 0020 1340     		and	r3, r2
  53 0022 083B     		sub	r3, r3, #8
  54 0024 9808     		lsr	r0, r3, #2
  55 0026 2C4A     		ldr	r2, .L4
  56 0028 FB1D     		add	r3, r7, #7
  57 002a 1B78     		ldrb	r3, [r3]
  58 002c 1C1C     		mov	r4, r3
  59 002e 0F23     		mov	r3, #15
  60 0030 2340     		and	r3, r4
  61 0032 083B     		sub	r3, r3, #8
  62 0034 9B08     		lsr	r3, r3, #2
  63 0036 0633     		add	r3, r3, #6
  64 0038 9B00     		lsl	r3, r3, #2
  65 003a D318     		add	r3, r2, r3
  66 003c 5B68     		ldr	r3, [r3, #4]
  67 003e FA1D     		add	r2, r7, #7
  68 0040 1278     		ldrb	r2, [r2]
  69 0042 141C     		mov	r4, r2
  70 0044 0322     		mov	r2, #3
  71 0046 2240     		and	r2, r4
  72 0048 D200     		lsl	r2, r2, #3
  73 004a FF24     		mov	r4, #255
  74 004c 251C     		mov	r5, r4
  75 004e 9540     		lsl	r5, r5, r2
  76 0050 2A1C     		mov	r2, r5
  77 0052 D243     		mvn	r2, r2
  78 0054 1A40     		and	r2, r3
 575:../../ext-src/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  79              		.loc 1 575 0
  80 0056 3B68     		ldr	r3, [r7]
  81 0058 9C01     		lsl	r4, r3, #6
  82 005a FF23     		mov	r3, #255
  83 005c 1C40     		and	r4, r3
  84 005e FB1D     		add	r3, r7, #7
  85 0060 1B78     		ldrb	r3, [r3]
  86 0062 1D1C     		mov	r5, r3
  87 0064 0323     		mov	r3, #3
  88 0066 2B40     		and	r3, r5
  89 0068 DB00     		lsl	r3, r3, #3
  90 006a 251C     		mov	r5, r4
  91 006c 9D40     		lsl	r5, r5, r3
  92 006e 2B1C     		mov	r3, r5
 574:../../ext-src/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  93              		.loc 1 574 0
  94 0070 1A43     		orr	r2, r3
  95 0072 831D     		add	r3, r0, #6
  96 0074 9B00     		lsl	r3, r3, #2
  97 0076 CB18     		add	r3, r1, r3
  98 0078 5A60     		str	r2, [r3, #4]
  99 007a 29E0     		b	.L1
 100              	.L2:
 576:../../ext-src/CMSIS/Include/core_cm0.h ****   else {
 577:../../ext-src/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 101              		.loc 1 577 0
 102 007c 174B     		ldr	r3, .L4+4
 103 007e FA1D     		add	r2, r7, #7
 104 0080 1278     		ldrb	r2, [r2]
 105 0082 52B2     		sxtb	r2, r2
 106 0084 9208     		lsr	r2, r2, #2
 107 0086 1549     		ldr	r1, .L4+4
 108 0088 F81D     		add	r0, r7, #7
 109 008a 0078     		ldrb	r0, [r0]
 110 008c 40B2     		sxtb	r0, r0
 111 008e 8008     		lsr	r0, r0, #2
 112 0090 C030     		add	r0, r0, #192
 113 0092 8000     		lsl	r0, r0, #2
 114 0094 4158     		ldr	r1, [r0, r1]
 115 0096 F81D     		add	r0, r7, #7
 116 0098 0078     		ldrb	r0, [r0]
 117 009a 041C     		mov	r4, r0
 118 009c 0320     		mov	r0, #3
 119 009e 2040     		and	r0, r4
 120 00a0 C000     		lsl	r0, r0, #3
 121 00a2 FF24     		mov	r4, #255
 122 00a4 251C     		mov	r5, r4
 123 00a6 8540     		lsl	r5, r5, r0
 124 00a8 281C     		mov	r0, r5
 125 00aa C043     		mvn	r0, r0
 126 00ac 0840     		and	r0, r1
 578:../../ext-src/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 127              		.loc 1 578 0
 128 00ae 3968     		ldr	r1, [r7]
 129 00b0 8C01     		lsl	r4, r1, #6
 130 00b2 FF21     		mov	r1, #255
 131 00b4 0C40     		and	r4, r1
 132 00b6 F91D     		add	r1, r7, #7
 133 00b8 0978     		ldrb	r1, [r1]
 134 00ba 0D1C     		mov	r5, r1
 135 00bc 0321     		mov	r1, #3
 136 00be 2940     		and	r1, r5
 137 00c0 C900     		lsl	r1, r1, #3
 138 00c2 251C     		mov	r5, r4
 139 00c4 8D40     		lsl	r5, r5, r1
 140 00c6 291C     		mov	r1, r5
 577:../../ext-src/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 141              		.loc 1 577 0
 142 00c8 0143     		orr	r1, r0
 143 00ca C032     		add	r2, r2, #192
 144 00cc 9200     		lsl	r2, r2, #2
 145 00ce D150     		str	r1, [r2, r3]
 146              	.L1:
 579:../../ext-src/CMSIS/Include/core_cm0.h **** }
 147              		.loc 1 579 0
 148 00d0 BD46     		mov	sp, r7
 149 00d2 02B0     		add	sp, sp, #8
 150              		@ sp needed
 151 00d4 B0BD     		pop	{r4, r5, r7, pc}
 152              	.L5:
 153 00d6 C046     		.align	2
 154              	.L4:
 155 00d8 00ED00E0 		.word	-536810240
 156 00dc 00E100E0 		.word	-536813312
 157              		.cfi_endproc
 158              	.LFE28:
 160              		.section	.text.SysTick_Config,"ax",%progbits
 161              		.align	2
 162              		.code	16
 163              		.thumb_func
 165              	SysTick_Config:
 166              	.LFB31:
 580:../../ext-src/CMSIS/Include/core_cm0.h **** 
 581:../../ext-src/CMSIS/Include/core_cm0.h **** 
 582:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Get Interrupt Priority
 583:../../ext-src/CMSIS/Include/core_cm0.h **** 
 584:../../ext-src/CMSIS/Include/core_cm0.h ****     This function reads the priority for the specified interrupt. The interrupt
 585:../../ext-src/CMSIS/Include/core_cm0.h ****     number can be positive to specify an external (device specific)
 586:../../ext-src/CMSIS/Include/core_cm0.h ****     interrupt, or negative to specify an internal (core) interrupt.
 587:../../ext-src/CMSIS/Include/core_cm0.h **** 
 588:../../ext-src/CMSIS/Include/core_cm0.h ****     The returned priority value is automatically aligned to the implemented
 589:../../ext-src/CMSIS/Include/core_cm0.h ****     priority bits of the microcontroller.
 590:../../ext-src/CMSIS/Include/core_cm0.h **** 
 591:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]   IRQn  Number of the interrupt for get priority
 592:../../ext-src/CMSIS/Include/core_cm0.h ****     \return             Interrupt Priority
 593:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 594:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 595:../../ext-src/CMSIS/Include/core_cm0.h **** {
 596:../../ext-src/CMSIS/Include/core_cm0.h **** 
 597:../../ext-src/CMSIS/Include/core_cm0.h ****   if(IRQn < 0) {
 598:../../ext-src/CMSIS/Include/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 599:../../ext-src/CMSIS/Include/core_cm0.h ****   else {
 600:../../ext-src/CMSIS/Include/core_cm0.h ****     return((uint32_t)((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 601:../../ext-src/CMSIS/Include/core_cm0.h **** }
 602:../../ext-src/CMSIS/Include/core_cm0.h **** 
 603:../../ext-src/CMSIS/Include/core_cm0.h **** 
 604:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  System Reset
 605:../../ext-src/CMSIS/Include/core_cm0.h **** 
 606:../../ext-src/CMSIS/Include/core_cm0.h ****     This function initiate a system reset request to reset the MCU.
 607:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 608:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_SystemReset(void)
 609:../../ext-src/CMSIS/Include/core_cm0.h **** {
 610:../../ext-src/CMSIS/Include/core_cm0.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
 611:../../ext-src/CMSIS/Include/core_cm0.h ****                                                                   buffered write are completed befo
 612:../../ext-src/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 613:../../ext-src/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 614:../../ext-src/CMSIS/Include/core_cm0.h ****   __DSB();                                                     /* Ensure completion of memory acces
 615:../../ext-src/CMSIS/Include/core_cm0.h ****   while(1);                                                    /* wait until reset */
 616:../../ext-src/CMSIS/Include/core_cm0.h **** }
 617:../../ext-src/CMSIS/Include/core_cm0.h **** 
 618:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of CMSIS_Core_NVICFunctions */
 619:../../ext-src/CMSIS/Include/core_cm0.h **** 
 620:../../ext-src/CMSIS/Include/core_cm0.h **** 
 621:../../ext-src/CMSIS/Include/core_cm0.h **** 
 622:../../ext-src/CMSIS/Include/core_cm0.h **** /* ##################################    SysTick function  ########################################
 623:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 624:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
 625:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 626:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 627:../../ext-src/CMSIS/Include/core_cm0.h **** 
 628:../../ext-src/CMSIS/Include/core_cm0.h **** #if (__Vendor_SysTickConfig == 0)
 629:../../ext-src/CMSIS/Include/core_cm0.h **** 
 630:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  System Tick Configuration
 631:../../ext-src/CMSIS/Include/core_cm0.h **** 
 632:../../ext-src/CMSIS/Include/core_cm0.h ****     This function initialises the system tick timer and its interrupt and start the system tick tim
 633:../../ext-src/CMSIS/Include/core_cm0.h ****     Counter is in free running mode to generate periodical interrupts.
 634:../../ext-src/CMSIS/Include/core_cm0.h **** 
 635:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]  ticks  Number of ticks between two interrupts
 636:../../ext-src/CMSIS/Include/core_cm0.h ****     \return          0  Function succeeded
 637:../../ext-src/CMSIS/Include/core_cm0.h ****     \return          1  Function failed
 638:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 639:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 640:../../ext-src/CMSIS/Include/core_cm0.h **** {
 167              		.loc 1 640 0
 168              		.cfi_startproc
 169 0000 80B5     		push	{r7, lr}
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 7, -8
 172              		.cfi_offset 14, -4
 173 0002 82B0     		sub	sp, sp, #8
 174              		.cfi_def_cfa_offset 16
 175 0004 00AF     		add	r7, sp, #0
 176              		.cfi_def_cfa_register 7
 177 0006 7860     		str	r0, [r7, #4]
 641:../../ext-src/CMSIS/Include/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 178              		.loc 1 641 0
 179 0008 7A68     		ldr	r2, [r7, #4]
 180 000a 0E4B     		ldr	r3, .L9
 181 000c 9A42     		cmp	r2, r3
 182 000e 01D9     		bls	.L7
 183              		.loc 1 641 0 is_stmt 0 discriminator 1
 184 0010 0123     		mov	r3, #1
 185 0012 12E0     		b	.L8
 186              	.L7:
 642:../../ext-src/CMSIS/Include/core_cm0.h **** 
 643:../../ext-src/CMSIS/Include/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 187              		.loc 1 643 0 is_stmt 1
 188 0014 0C4B     		ldr	r3, .L9+4
 189 0016 7A68     		ldr	r2, [r7, #4]
 190 0018 1202     		lsl	r2, r2, #8
 191 001a 120A     		lsr	r2, r2, #8
 192 001c 013A     		sub	r2, r2, #1
 193 001e 5A60     		str	r2, [r3, #4]
 644:../../ext-src/CMSIS/Include/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 194              		.loc 1 644 0
 195 0020 0123     		mov	r3, #1
 196 0022 5B42     		neg	r3, r3
 197 0024 181C     		mov	r0, r3
 198 0026 0321     		mov	r1, #3
 199 0028 FFF7FEFF 		bl	NVIC_SetPriority
 645:../../ext-src/CMSIS/Include/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 200              		.loc 1 645 0
 201 002c 064B     		ldr	r3, .L9+4
 202 002e 0022     		mov	r2, #0
 203 0030 9A60     		str	r2, [r3, #8]
 646:../../ext-src/CMSIS/Include/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 204              		.loc 1 646 0
 205 0032 054B     		ldr	r3, .L9+4
 206 0034 0722     		mov	r2, #7
 207 0036 1A60     		str	r2, [r3]
 647:../../ext-src/CMSIS/Include/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   |
 648:../../ext-src/CMSIS/Include/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 649:../../ext-src/CMSIS/Include/core_cm0.h ****   return (0);                                                  /* Function successful */
 208              		.loc 1 649 0
 209 0038 0023     		mov	r3, #0
 210              	.L8:
 650:../../ext-src/CMSIS/Include/core_cm0.h **** }
 211              		.loc 1 650 0
 212 003a 181C     		mov	r0, r3
 213 003c BD46     		mov	sp, r7
 214 003e 02B0     		add	sp, sp, #8
 215              		@ sp needed
 216 0040 80BD     		pop	{r7, pc}
 217              	.L10:
 218 0042 C046     		.align	2
 219              	.L9:
 220 0044 FFFFFF00 		.word	16777215
 221 0048 10E000E0 		.word	-536813552
 222              		.cfi_endproc
 223              	.LFE31:
 225              		.section	.bss.TimingDelay,"aw",%nobits
 226              		.align	2
 229              	TimingDelay:
 230 0000 00000000 		.space	4
 231              		.global	BlinkSpeed
 232              		.section	.bss.BlinkSpeed,"aw",%nobits
 235              	BlinkSpeed:
 236 0000 00       		.space	1
 237              		.global	__aeabi_uidiv
 238              		.section	.text.main,"ax",%progbits
 239              		.align	2
 240              		.global	main
 241              		.code	16
 242              		.thumb_func
 244              	main:
 245              	.LFB32:
 246              		.file 2 "../../src/mains/test/main.c"
   1:../../src/mains/test/main.c **** /**
   2:../../src/mains/test/main.c ****   ******************************************************************************
   3:../../src/mains/test/main.c ****   * @file    main.c
   4:../../src/mains/test/main.c ****   * @author  MCD Application Team
   5:../../src/mains/test/main.c ****   * @version V1.0.0
   6:../../src/mains/test/main.c ****   * @date    23-March-2012
   7:../../src/mains/test/main.c ****   * @brief   Main program body
   8:../../src/mains/test/main.c ****   ******************************************************************************
   9:../../src/mains/test/main.c ****   * @attention
  10:../../src/mains/test/main.c ****   *
  11:../../src/mains/test/main.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  12:../../src/mains/test/main.c ****   *
  13:../../src/mains/test/main.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  14:../../src/mains/test/main.c ****   * You may not use this file except in compliance with the License.
  15:../../src/mains/test/main.c ****   * You may obtain a copy of the License at:
  16:../../src/mains/test/main.c ****   *
  17:../../src/mains/test/main.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  18:../../src/mains/test/main.c ****   *
  19:../../src/mains/test/main.c ****   * Unless required by applicable law or agreed to in writing, software
  20:../../src/mains/test/main.c ****   * distributed under the License is distributed on an "AS IS" BASIS,
  21:../../src/mains/test/main.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:../../src/mains/test/main.c ****   * See the License for the specific language governing permissions and
  23:../../src/mains/test/main.c ****   * limitations under the License.
  24:../../src/mains/test/main.c ****   *
  25:../../src/mains/test/main.c ****   ******************************************************************************
  26:../../src/mains/test/main.c ****   */
  27:../../src/mains/test/main.c **** 
  28:../../src/mains/test/main.c **** /* Includes ------------------------------------------------------------------*/
  29:../../src/mains/test/main.c **** #include "stm32f0xx.h"
  30:../../src/mains/test/main.c **** #include "stm32f0_discovery.h"
  31:../../src/mains/test/main.c **** 
  32:../../src/mains/test/main.c **** /* Exported types ------------------------------------------------------------*/
  33:../../src/mains/test/main.c **** /* Private define ------------------------------------------------------------*/
  34:../../src/mains/test/main.c **** /* Exported constants --------------------------------------------------------*/
  35:../../src/mains/test/main.c **** /* Exported macro ------------------------------------------------------------*/
  36:../../src/mains/test/main.c **** /* Exported functions ------------------------------------------------------- */
  37:../../src/mains/test/main.c **** void TimingDelay_Decrement(void);
  38:../../src/mains/test/main.c **** void Delay(__IO uint32_t nTime);
  39:../../src/mains/test/main.c **** 
  40:../../src/mains/test/main.c **** /** @addtogroup STM32F0-Discovery_Demo
  41:../../src/mains/test/main.c ****   * @{
  42:../../src/mains/test/main.c ****   */
  43:../../src/mains/test/main.c **** 
  44:../../src/mains/test/main.c **** /* Private typedef -----------------------------------------------------------*/
  45:../../src/mains/test/main.c **** /* Private define ------------------------------------------------------------*/
  46:../../src/mains/test/main.c **** /* Private macro -------------------------------------------------------------*/
  47:../../src/mains/test/main.c **** /* Private variables ---------------------------------------------------------*/
  48:../../src/mains/test/main.c **** static __IO uint32_t TimingDelay;
  49:../../src/mains/test/main.c **** uint8_t BlinkSpeed = 0;
  50:../../src/mains/test/main.c **** 
  51:../../src/mains/test/main.c **** /* Private function prototypes -----------------------------------------------*/
  52:../../src/mains/test/main.c **** /* Private functions ---------------------------------------------------------*/
  53:../../src/mains/test/main.c **** 
  54:../../src/mains/test/main.c **** /**
  55:../../src/mains/test/main.c ****   * @brief  Main program.
  56:../../src/mains/test/main.c ****   * @param  None
  57:../../src/mains/test/main.c ****   * @retval None
  58:../../src/mains/test/main.c ****   */
  59:../../src/mains/test/main.c **** int main(void)
  60:../../src/mains/test/main.c **** {
 247              		.loc 2 60 0
 248              		.cfi_startproc
 249 0000 80B5     		push	{r7, lr}
 250              		.cfi_def_cfa_offset 8
 251              		.cfi_offset 7, -8
 252              		.cfi_offset 14, -4
 253 0002 88B0     		sub	sp, sp, #32
 254              		.cfi_def_cfa_offset 40
 255 0004 00AF     		add	r7, sp, #0
 256              		.cfi_def_cfa_register 7
  61:../../src/mains/test/main.c ****   RCC_ClocksTypeDef RCC_Clocks;
  62:../../src/mains/test/main.c **** 
  63:../../src/mains/test/main.c ****   /* Configure LED3 and LED4 on STM32F0-Discovery */
  64:../../src/mains/test/main.c ****   STM_EVAL_LEDInit(LED3);
 257              		.loc 2 64 0
 258 0006 0020     		mov	r0, #0
 259 0008 FFF7FEFF 		bl	STM_EVAL_LEDInit
  65:../../src/mains/test/main.c ****   STM_EVAL_LEDInit(LED4);
 260              		.loc 2 65 0
 261 000c 0120     		mov	r0, #1
 262 000e FFF7FEFF 		bl	STM_EVAL_LEDInit
  66:../../src/mains/test/main.c **** 
  67:../../src/mains/test/main.c ****   /* Initialize User_Button on STM32F0-Discovery */
  68:../../src/mains/test/main.c ****   STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);
 263              		.loc 2 68 0
 264 0012 0020     		mov	r0, #0
 265 0014 0021     		mov	r1, #0
 266 0016 FFF7FEFF 		bl	STM_EVAL_PBInit
  69:../../src/mains/test/main.c **** 
  70:../../src/mains/test/main.c ****   /* SysTick end of count event each 1ms */
  71:../../src/mains/test/main.c ****   RCC_GetClocksFreq(&RCC_Clocks);
 267              		.loc 2 71 0
 268 001a 3B1D     		add	r3, r7, #4
 269 001c 181C     		mov	r0, r3
 270 001e FFF7FEFF 		bl	RCC_GetClocksFreq
  72:../../src/mains/test/main.c ****   SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 271              		.loc 2 72 0
 272 0022 3B1D     		add	r3, r7, #4
 273 0024 5B68     		ldr	r3, [r3, #4]
 274 0026 181C     		mov	r0, r3
 275 0028 FA23     		mov	r3, #250
 276 002a 9900     		lsl	r1, r3, #2
 277 002c FFF7FEFF 		bl	__aeabi_uidiv
 278 0030 031C     		mov	r3, r0
 279 0032 181C     		mov	r0, r3
 280 0034 FFF7FEFF 		bl	SysTick_Config
  73:../../src/mains/test/main.c **** 
  74:../../src/mains/test/main.c ****   /* Initiate Blink Speed variable */
  75:../../src/mains/test/main.c ****   BlinkSpeed = 1;
 281              		.loc 2 75 0
 282 0038 1D4B     		ldr	r3, .L17
 283 003a 0122     		mov	r2, #1
 284 003c 1A70     		strb	r2, [r3]
 285              	.L16:
  76:../../src/mains/test/main.c **** 
  77:../../src/mains/test/main.c ****   while(1)
  78:../../src/mains/test/main.c ****   {
  79:../../src/mains/test/main.c ****     /* Check if the user button is pressed */
  80:../../src/mains/test/main.c ****     if(STM_EVAL_PBGetState(BUTTON_USER)== SET)
 286              		.loc 2 80 0
 287 003e 0020     		mov	r0, #0
 288 0040 FFF7FEFF 		bl	STM_EVAL_PBGetState
 289 0044 031C     		mov	r3, r0
 290 0046 012B     		cmp	r3, #1
 291 0048 17D1     		bne	.L12
  81:../../src/mains/test/main.c ****     {
  82:../../src/mains/test/main.c ****       /* BlinkSpeed: 1 -> 2 -> 0, then re-cycle */
  83:../../src/mains/test/main.c ****       /* Turn on LD4 Blue LED during 1s each time User button is pressed */
  84:../../src/mains/test/main.c ****       STM_EVAL_LEDOn(LED4);
 292              		.loc 2 84 0
 293 004a 0120     		mov	r0, #1
 294 004c FFF7FEFF 		bl	STM_EVAL_LEDOn
  85:../../src/mains/test/main.c **** 
  86:../../src/mains/test/main.c ****       /* wait for 1s */
  87:../../src/mains/test/main.c ****       Delay(1000);
 295              		.loc 2 87 0
 296 0050 FA23     		mov	r3, #250
 297 0052 9B00     		lsl	r3, r3, #2
 298 0054 181C     		mov	r0, r3
 299 0056 FFF7FEFF 		bl	Delay
  88:../../src/mains/test/main.c **** 
  89:../../src/mains/test/main.c ****       /* Turn off LD4 Blue LED after 1s each time User button is pressed */
  90:../../src/mains/test/main.c ****       STM_EVAL_LEDOff(LED4);
 300              		.loc 2 90 0
 301 005a 0120     		mov	r0, #1
 302 005c FFF7FEFF 		bl	STM_EVAL_LEDOff
  91:../../src/mains/test/main.c **** 
  92:../../src/mains/test/main.c ****       /* Increment the blink speed counter */
  93:../../src/mains/test/main.c ****       BlinkSpeed++;
 303              		.loc 2 93 0
 304 0060 134B     		ldr	r3, .L17
 305 0062 1B78     		ldrb	r3, [r3]
 306 0064 0133     		add	r3, r3, #1
 307 0066 DAB2     		uxtb	r2, r3
 308 0068 114B     		ldr	r3, .L17
 309 006a 1A70     		strb	r2, [r3]
  94:../../src/mains/test/main.c **** 
  95:../../src/mains/test/main.c ****       /* Default value for blink speed counter */
  96:../../src/mains/test/main.c ****       if(BlinkSpeed == 3)
 310              		.loc 2 96 0
 311 006c 104B     		ldr	r3, .L17
 312 006e 1B78     		ldrb	r3, [r3]
 313 0070 032B     		cmp	r3, #3
 314 0072 02D1     		bne	.L12
  97:../../src/mains/test/main.c ****       {
  98:../../src/mains/test/main.c ****         BlinkSpeed = 0;
 315              		.loc 2 98 0
 316 0074 0E4B     		ldr	r3, .L17
 317 0076 0022     		mov	r2, #0
 318 0078 1A70     		strb	r2, [r3]
 319              	.L12:
  99:../../src/mains/test/main.c ****       }
 100:../../src/mains/test/main.c ****     }
 101:../../src/mains/test/main.c **** 
 102:../../src/mains/test/main.c ****     /* Test on blink speed */
 103:../../src/mains/test/main.c ****     if(BlinkSpeed == 2)
 320              		.loc 2 103 0
 321 007a 0D4B     		ldr	r3, .L17
 322 007c 1B78     		ldrb	r3, [r3]
 323 007e 022B     		cmp	r3, #2
 324 0080 06D1     		bne	.L13
 104:../../src/mains/test/main.c ****     {
 105:../../src/mains/test/main.c ****       /* LED3 toggles each 100 ms */
 106:../../src/mains/test/main.c ****       STM_EVAL_LEDToggle(LED3);
 325              		.loc 2 106 0
 326 0082 0020     		mov	r0, #0
 327 0084 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 107:../../src/mains/test/main.c **** 
 108:../../src/mains/test/main.c ****       /* maintain LED3 status for 100ms */
 109:../../src/mains/test/main.c ****       Delay(100);
 328              		.loc 2 109 0
 329 0088 6420     		mov	r0, #100
 330 008a FFF7FEFF 		bl	Delay
 331 008e 0EE0     		b	.L14
 332              	.L13:
 110:../../src/mains/test/main.c ****     }
 111:../../src/mains/test/main.c ****     else if(BlinkSpeed == 1)
 333              		.loc 2 111 0
 334 0090 074B     		ldr	r3, .L17
 335 0092 1B78     		ldrb	r3, [r3]
 336 0094 012B     		cmp	r3, #1
 337 0096 06D1     		bne	.L15
 112:../../src/mains/test/main.c ****     {
 113:../../src/mains/test/main.c ****       /* LED3 toggles each 200 ms */
 114:../../src/mains/test/main.c ****       STM_EVAL_LEDToggle(LED3);
 338              		.loc 2 114 0
 339 0098 0020     		mov	r0, #0
 340 009a FFF7FEFF 		bl	STM_EVAL_LEDToggle
 115:../../src/mains/test/main.c **** 
 116:../../src/mains/test/main.c ****       /* maintain LED3 status for 200ms */
 117:../../src/mains/test/main.c ****       Delay(200);
 341              		.loc 2 117 0
 342 009e C820     		mov	r0, #200
 343 00a0 FFF7FEFF 		bl	Delay
 344 00a4 03E0     		b	.L14
 345              	.L15:
 118:../../src/mains/test/main.c ****     }
 119:../../src/mains/test/main.c ****     else
 120:../../src/mains/test/main.c ****     {
 121:../../src/mains/test/main.c ****       /* LED3 Off */
 122:../../src/mains/test/main.c ****       STM_EVAL_LEDOff(LED3);
 346              		.loc 2 122 0
 347 00a6 0020     		mov	r0, #0
 348 00a8 FFF7FEFF 		bl	STM_EVAL_LEDOff
 123:../../src/mains/test/main.c ****     }
 124:../../src/mains/test/main.c ****   }
 349              		.loc 2 124 0
 350 00ac C7E7     		b	.L16
 351              	.L14:
 352 00ae C6E7     		b	.L16
 353              	.L18:
 354              		.align	2
 355              	.L17:
 356 00b0 00000000 		.word	BlinkSpeed
 357              		.cfi_endproc
 358              	.LFE32:
 360              		.section	.text.Delay,"ax",%progbits
 361              		.align	2
 362              		.global	Delay
 363              		.code	16
 364              		.thumb_func
 366              	Delay:
 367              	.LFB33:
 125:../../src/mains/test/main.c **** }
 126:../../src/mains/test/main.c **** 
 127:../../src/mains/test/main.c **** /**
 128:../../src/mains/test/main.c ****   * @brief  Inserts a delay time.
 129:../../src/mains/test/main.c ****   * @param  nTime: specifies the delay time length, in 1 ms.
 130:../../src/mains/test/main.c ****   * @retval None
 131:../../src/mains/test/main.c ****   */
 132:../../src/mains/test/main.c **** void Delay(__IO uint32_t nTime)
 133:../../src/mains/test/main.c **** {
 368              		.loc 2 133 0
 369              		.cfi_startproc
 370 0000 80B5     		push	{r7, lr}
 371              		.cfi_def_cfa_offset 8
 372              		.cfi_offset 7, -8
 373              		.cfi_offset 14, -4
 374 0002 82B0     		sub	sp, sp, #8
 375              		.cfi_def_cfa_offset 16
 376 0004 00AF     		add	r7, sp, #0
 377              		.cfi_def_cfa_register 7
 378 0006 7860     		str	r0, [r7, #4]
 134:../../src/mains/test/main.c ****   TimingDelay = nTime;
 379              		.loc 2 134 0
 380 0008 7A68     		ldr	r2, [r7, #4]
 381 000a 054B     		ldr	r3, .L21
 382 000c 1A60     		str	r2, [r3]
 135:../../src/mains/test/main.c **** 
 136:../../src/mains/test/main.c ****   while(TimingDelay != 0);
 383              		.loc 2 136 0
 384 000e C046     		mov	r8, r8
 385              	.L20:
 386              		.loc 2 136 0 is_stmt 0 discriminator 1
 387 0010 034B     		ldr	r3, .L21
 388 0012 1B68     		ldr	r3, [r3]
 389 0014 002B     		cmp	r3, #0
 390 0016 FBD1     		bne	.L20
 137:../../src/mains/test/main.c **** }
 391              		.loc 2 137 0 is_stmt 1
 392 0018 BD46     		mov	sp, r7
 393 001a 02B0     		add	sp, sp, #8
 394              		@ sp needed
 395 001c 80BD     		pop	{r7, pc}
 396              	.L22:
 397 001e C046     		.align	2
 398              	.L21:
 399 0020 00000000 		.word	TimingDelay
 400              		.cfi_endproc
 401              	.LFE33:
 403              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 404              		.align	2
 405              		.global	TimingDelay_Decrement
 406              		.code	16
 407              		.thumb_func
 409              	TimingDelay_Decrement:
 410              	.LFB34:
 138:../../src/mains/test/main.c **** 
 139:../../src/mains/test/main.c **** /**
 140:../../src/mains/test/main.c ****   * @brief  Decrements the TimingDelay variable.
 141:../../src/mains/test/main.c ****   * @param  None
 142:../../src/mains/test/main.c ****   * @retval None
 143:../../src/mains/test/main.c ****   */
 144:../../src/mains/test/main.c **** void TimingDelay_Decrement(void)
 145:../../src/mains/test/main.c **** {
 411              		.loc 2 145 0
 412              		.cfi_startproc
 413 0000 80B5     		push	{r7, lr}
 414              		.cfi_def_cfa_offset 8
 415              		.cfi_offset 7, -8
 416              		.cfi_offset 14, -4
 417 0002 00AF     		add	r7, sp, #0
 418              		.cfi_def_cfa_register 7
 146:../../src/mains/test/main.c ****   if (TimingDelay != 0x00)
 419              		.loc 2 146 0
 420 0004 054B     		ldr	r3, .L25
 421 0006 1B68     		ldr	r3, [r3]
 422 0008 002B     		cmp	r3, #0
 423 000a 04D0     		beq	.L23
 147:../../src/mains/test/main.c ****   {
 148:../../src/mains/test/main.c ****     TimingDelay--;
 424              		.loc 2 148 0
 425 000c 034B     		ldr	r3, .L25
 426 000e 1B68     		ldr	r3, [r3]
 427 0010 5A1E     		sub	r2, r3, #1
 428 0012 024B     		ldr	r3, .L25
 429 0014 1A60     		str	r2, [r3]
 430              	.L23:
 149:../../src/mains/test/main.c ****   }
 150:../../src/mains/test/main.c **** }
 431              		.loc 2 150 0
 432 0016 BD46     		mov	sp, r7
 433              		@ sp needed
 434 0018 80BD     		pop	{r7, pc}
 435              	.L26:
 436 001a C046     		.align	2
 437              	.L25:
 438 001c 00000000 		.word	TimingDelay
 439              		.cfi_endproc
 440              	.LFE34:
 442              		.section	.text.assert_failed,"ax",%progbits
 443              		.align	2
 444              		.global	assert_failed
 445              		.code	16
 446              		.thumb_func
 448              	assert_failed:
 449              	.LFB35:
 151:../../src/mains/test/main.c **** 
 152:../../src/mains/test/main.c **** #ifdef  USE_FULL_ASSERT
 153:../../src/mains/test/main.c **** 
 154:../../src/mains/test/main.c **** /**
 155:../../src/mains/test/main.c ****   * @brief  Reports the name of the source file and the source line number
 156:../../src/mains/test/main.c ****   *   where the assert_param error has occurred.
 157:../../src/mains/test/main.c ****   * @param  file: pointer to the source file name
 158:../../src/mains/test/main.c ****   * @param  line: assert_param error line source number
 159:../../src/mains/test/main.c ****   * @retval None
 160:../../src/mains/test/main.c ****   */
 161:../../src/mains/test/main.c **** void assert_failed(uint8_t* file, uint32_t line)
 162:../../src/mains/test/main.c **** {
 450              		.loc 2 162 0
 451              		.cfi_startproc
 452 0000 80B5     		push	{r7, lr}
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 7, -8
 455              		.cfi_offset 14, -4
 456 0002 82B0     		sub	sp, sp, #8
 457              		.cfi_def_cfa_offset 16
 458 0004 00AF     		add	r7, sp, #0
 459              		.cfi_def_cfa_register 7
 460 0006 7860     		str	r0, [r7, #4]
 461 0008 3960     		str	r1, [r7]
 462              	.L28:
 163:../../src/mains/test/main.c ****   /* User can add his own implementation to report the file name and line number,
 164:../../src/mains/test/main.c ****      ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 165:../../src/mains/test/main.c **** 
 166:../../src/mains/test/main.c ****   /* Infinite loop */
 167:../../src/mains/test/main.c ****   while (1)
 168:../../src/mains/test/main.c ****   {}
 463              		.loc 2 168 0 discriminator 1
 464 000a FEE7     		b	.L28
 465              		.cfi_endproc
 466              	.LFE35:
 468              		.text
 469              	.Letext0:
 470              		.file 3 "../../ext-src/CMSIS/ST/STM32F0xx/Include/stm32f0xx.h"
 471              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/machine/_default_types
 472              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/stdint.h"
 473              		.file 6 "../../ext-src/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_rcc.h"
 474              		.file 7 "../../ext-src/Utilities/STM32F0-Discovery/stm32f0_discovery.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:18     .text.NVIC_SetPriority:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:22     .text.NVIC_SetPriority:0000000000000000 NVIC_SetPriority
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:155    .text.NVIC_SetPriority:00000000000000d8 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:161    .text.SysTick_Config:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:165    .text.SysTick_Config:0000000000000000 SysTick_Config
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:220    .text.SysTick_Config:0000000000000044 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:226    .bss.TimingDelay:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:229    .bss.TimingDelay:0000000000000000 TimingDelay
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:235    .bss.BlinkSpeed:0000000000000000 BlinkSpeed
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:236    .bss.BlinkSpeed:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:239    .text.main:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:244    .text.main:0000000000000000 main
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:366    .text.Delay:0000000000000000 Delay
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:356    .text.main:00000000000000b0 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:361    .text.Delay:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:399    .text.Delay:0000000000000020 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:404    .text.TimingDelay_Decrement:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:409    .text.TimingDelay_Decrement:0000000000000000 TimingDelay_Decrement
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:438    .text.TimingDelay_Decrement:000000000000001c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:443    .text.assert_failed:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccfaMQMp.s:448    .text.assert_failed:0000000000000000 assert_failed
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.9252205565be9cbc11fa49e4ee70d556
                           .group:0000000000000000 wm4.stm32f0xx.h.54.664bd2bdbb20859ae6a5c66c16d4ee5a
                           .group:0000000000000000 wm4.core_cm0.h.32.41c1bd92799bc17b3c8424dd5c622427
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cm0.h.130.eea61816b4c7004601b0935484a214ea
                           .group:0000000000000000 wm4.stm32f0xx.h.226.38dd78fa77e64690c744af5bf4bffc7b
                           .group:0000000000000000 wm4.stm32f0xx_cec.h.80.d17e4ea90700c26010f339885be92ac0
                           .group:0000000000000000 wm4.stm32f0xx_crc.h.31.48fbd36307d848f32978567b16118557
                           .group:0000000000000000 wm4.stm32f0xx_comp.h.31.a640b8c7673f3e181cfd826dce70b6e2
                           .group:0000000000000000 wm4.stm32f0xx_dac.h.31.3e178ad0888f70df8fbc4c999d855b3e
                           .group:0000000000000000 wm4.stm32f0xx_dbgmcu.h.31.282da985c6ed8dd33417cf074ecfdf63
                           .group:0000000000000000 wm4.stm32f0xx_dma.h.31.68def2497939cb34c3f292e0c507724a
                           .group:0000000000000000 wm4.stm32f0xx_exti.h.31.81a00331ef3e014ed4dafe9e9baacca3
                           .group:0000000000000000 wm4.stm32f0xx_flash.h.31.60d92ed32439cfb92572ec2678e2be21
                           .group:0000000000000000 wm4.stm32f0xx_gpio.h.31.df5c3a39b21131ade11d30b7e1580be6
                           .group:0000000000000000 wm4.stm32f0xx_syscfg.h.31.f98c72ea26c47fccafefd977b75786d3
                           .group:0000000000000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:0000000000000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:0000000000000000 wm4.stm32f0xx_pwr.h.31.5b469253a65db741700e0b45f396c99d
                           .group:0000000000000000 wm4.stm32f0xx_rcc.h.31.bc2f5dd9e2f518d727a1e0ce497a42e6
                           .group:0000000000000000 wm4.stm32f0xx_rtc.h.31.bc9d631913a743746cf54f04d4efbf7b
                           .group:0000000000000000 wm4.stm32f0xx_spi.h.31.5b4d0d36c03feb5b081143cdba79744d
                           .group:0000000000000000 wm4.stm32f0xx_tim.h.31.21b4d7229c685868595d751757b51e1b
                           .group:0000000000000000 wm4.stm32f0xx_usart.h.31.8abae79a1c4f266d08faf5996370b48f
                           .group:0000000000000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:0000000000000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6
                           .group:0000000000000000 wm4.stm32f0_discovery.h.31.e789d35d5b8d932521435944555b7e70

UNDEFINED SYMBOLS
__aeabi_uidiv
STM_EVAL_LEDInit
STM_EVAL_PBInit
RCC_GetClocksFreq
STM_EVAL_PBGetState
STM_EVAL_LEDOn
STM_EVAL_LEDOff
STM_EVAL_LEDToggle
