   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_flash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata
  18              		.align	2
  19              	.LC0:
  20 0000 2E2E2F2E 		.ascii	"../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f"
  20      2E2F6578 
  20      742D7372 
  20      632F5354 
  20      4D333246 
  21 0033 3078785F 		.ascii	"0xx_flash.c\000"
  21      666C6173 
  21      682E6300 
  22 003f 00       		.section	.text.FLASH_SetLatency,"ax",%progbits
  23              		.align	2
  24              		.global	FLASH_SetLatency
  25              		.code	16
  26              		.thumb_func
  28              	FLASH_SetLatency:
  29              	.LFB32:
  30              		.file 1 "../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c"
   1:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
   2:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   ******************************************************************************
   3:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @file    stm32f0xx_flash.c
   4:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @author  MCD Application Team
   5:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @version V1.0.0
   6:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @date    23-March-2012
   7:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          functionalities of the FLASH peripheral:
   9:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *            - FLASH Interface configuration
  10:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *            - FLASH Memory Programming
  11:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *            - Option Bytes Programming
  12:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *            - Interrupts and flags management
  13:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *
  14:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *  @verbatim
  15:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  ===============================================================================
  16:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****                     ##### How to use this driver #####
  17:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  ===============================================================================
  18:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     [..] This driver provides functions to configure and program the Flash 
  19:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****          memory of all STM32F0xx devices. These functions are split in 4 groups
  20:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****          (#) FLASH Interface configuration functions: this group includes the 
  21:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              management of following features:
  22:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Set the latency
  23:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Enable/Disable the prefetch buffer
  24:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
  25:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****          (#) FLASH Memory Programming functions: this group includes all needed 
  26:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              functions to erase and program the main memory:
  27:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Lock and Unlock the Flash interface.
  28:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Erase function: Erase Page, erase all pages.
  29:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Program functions: Half Word and Word write.
  30:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
  31:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****          (#) FLASH Option Bytes Programming functions: this group includes all 
  32:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              needed functions to:
  33:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Lock and Unlock the Flash Option bytes.
  34:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Launch the Option Bytes loader
  35:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Erase the Option Bytes
  36:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++)Set/Reset the write protection
  37:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Set the Read protection Level
  38:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Program the user option Bytes
  39:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Set/Reset the BOOT1 bit
  40:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Enable/Disable the VDDA Analog Monitoring
  41:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Get the user option bytes
  42:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Get the Write protection
  43:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Get the read protection status
  44:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
  45:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****          (#) FLASH Interrupts and flag management functions: this group includes 
  46:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              all needed functions to:
  47:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Enable/Disable the flash interrupt sources
  48:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Get flags status
  49:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Clear flags
  50:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Get Flash operation status
  51:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              (++) Wait for last flash operation
  52:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
  53:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  @endverbatim
  54:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
  55:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   ******************************************************************************
  56:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @attention
  57:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *
  58:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  59:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *
  60:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  61:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * You may not use this file except in compliance with the License.
  62:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * You may obtain a copy of the License at:
  63:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *
  64:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  65:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *
  66:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * Unless required by applicable law or agreed to in writing, software 
  67:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  68:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  69:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * See the License for the specific language governing permissions and
  70:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * limitations under the License.
  71:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *
  72:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   ******************************************************************************
  73:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
  74:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
  75:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /* Includes ------------------------------------------------------------------*/
  76:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** #include "stm32f0xx_flash.h"
  77:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
  78:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  79:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @{
  80:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
  81:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
  82:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /** @defgroup FLASH 
  83:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief FLASH driver modules
  84:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @{
  85:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */ 
  86:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
  87:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /* Private typedef -----------------------------------------------------------*/
  88:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /* Private define ------------------------------------------------------------*/
  89:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Private macro -------------------------------------------------------------*/
  90:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /* Private variables ---------------------------------------------------------*/
  91:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /* Private function prototypes -----------------------------------------------*/
  92:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /* Private functions ---------------------------------------------------------*/
  93:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  
  94:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /** @defgroup FLASH_Private_Functions
  95:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @{
  96:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */ 
  97:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
  98:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /** @defgroup FLASH_Group1 FLASH Interface configuration functions
  99:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *  @brief   FLASH Interface configuration functions 
 100:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  *
 101:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** @verbatim   
 102:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  ===============================================================================
 103:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****                ##### FLASH Interface configuration functions #####
 104:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  ===============================================================================
 105:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 106:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     [..] FLASH_Interface configuration_Functions, includes the following functions:
 107:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) void FLASH_SetLatency(uint32_t FLASH_Latency):
 108:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     [..] To correctly read data from Flash memory, the number of wait states (LATENCY) 
 109:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****      must be correctly programmed according to the frequency of the CPU clock (HCLK) 
 110:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     [..]
 111:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         +--------------------------------------------- +
 112:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         |  Wait states  |   HCLK clock frequency (MHz) |
 113:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         |---------------|------------------------------|
 114:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         |0WS(1CPU cycle)|       0 < HCLK <= 24         |
 115:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         |---------------|------------------------------|
 116:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         |1WS(2CPU cycle)|       24 < HCLK <= 48        |
 117:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         +----------------------------------------------+
 118:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     [..]
 119:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) void FLASH_PrefetchBufferCmd(FunctionalState NewState);
 120:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     [..]
 121:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****      All these functions don't need the unlock sequence.
 122:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 123:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** @endverbatim
 124:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @{
 125:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 126:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 127:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 128:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Sets the code latency value.
 129:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  FLASH_Latency: specifies the FLASH Latency value.
 130:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *   This parameter can be one of the following values:
 131:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *     @arg FLASH_Latency_0: FLASH Zero Latency cycle
 132:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *     @arg FLASH_Latency_1: FLASH One Latency cycle
 133:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval None
 134:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 135:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** void FLASH_SetLatency(uint32_t FLASH_Latency)
 136:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
  31              		.loc 1 136 0
  32              		.cfi_startproc
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 137:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****    uint32_t tmpreg = 0;
  42              		.loc 1 137 0
  43 0008 0023     		mov	r3, #0
  44 000a FB60     		str	r3, [r7, #12]
 138:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 139:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
 140:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  45              		.loc 1 140 0
  46 000c 7B68     		ldr	r3, [r7, #4]
  47 000e 002B     		cmp	r3, #0
  48 0010 07D0     		beq	.L2
  49              		.loc 1 140 0 is_stmt 0 discriminator 1
  50 0012 7B68     		ldr	r3, [r7, #4]
  51 0014 012B     		cmp	r3, #1
  52 0016 04D0     		beq	.L2
  53 0018 0A4B     		ldr	r3, .L3
  54 001a 181C     		mov	r0, r3
  55 001c 8C21     		mov	r1, #140
  56 001e FFF7FEFF 		bl	assert_failed
  57              	.L2:
 141:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 142:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Read the ACR register */
 143:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   tmpreg = FLASH->ACR;  
  58              		.loc 1 143 0 is_stmt 1
  59 0022 094B     		ldr	r3, .L3+4
  60 0024 1B68     		ldr	r3, [r3]
  61 0026 FB60     		str	r3, [r7, #12]
 144:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 145:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Sets the Latency value */
 146:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
  62              		.loc 1 146 0
  63 0028 FB68     		ldr	r3, [r7, #12]
  64 002a 0122     		mov	r2, #1
  65 002c 9343     		bic	r3, r2
  66 002e FB60     		str	r3, [r7, #12]
 147:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   tmpreg |= FLASH_Latency;
  67              		.loc 1 147 0
  68 0030 FA68     		ldr	r2, [r7, #12]
  69 0032 7B68     		ldr	r3, [r7, #4]
  70 0034 1343     		orr	r3, r2
  71 0036 FB60     		str	r3, [r7, #12]
 148:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 149:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Write the ACR register */
 150:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH->ACR = tmpreg;
  72              		.loc 1 150 0
  73 0038 034B     		ldr	r3, .L3+4
  74 003a FA68     		ldr	r2, [r7, #12]
  75 003c 1A60     		str	r2, [r3]
 151:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
  76              		.loc 1 151 0
  77 003e BD46     		mov	sp, r7
  78 0040 04B0     		add	sp, sp, #16
  79              		@ sp needed
  80 0042 80BD     		pop	{r7, pc}
  81              	.L4:
  82              		.align	2
  83              	.L3:
  84 0044 00000000 		.word	.LC0
  85 0048 00200240 		.word	1073881088
  86              		.cfi_endproc
  87              	.LFE32:
  89              		.section	.text.FLASH_PrefetchBufferCmd,"ax",%progbits
  90              		.align	2
  91              		.global	FLASH_PrefetchBufferCmd
  92              		.code	16
  93              		.thumb_func
  95              	FLASH_PrefetchBufferCmd:
  96              	.LFB33:
 152:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 153:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 154:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Enables or disables the Prefetch Buffer.
 155:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  NewState: new state of the FLASH prefetch buffer.
 156:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         This parameter can be: ENABLE or DISABLE. 
 157:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval None
 158:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 159:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 160:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
  97              		.loc 1 160 0
  98              		.cfi_startproc
  99 0000 80B5     		push	{r7, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 103 0002 82B0     		sub	sp, sp, #8
 104              		.cfi_def_cfa_offset 16
 105 0004 00AF     		add	r7, sp, #0
 106              		.cfi_def_cfa_register 7
 107 0006 021C     		mov	r2, r0
 108 0008 FB1D     		add	r3, r7, #7
 109 000a 1A70     		strb	r2, [r3]
 161:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
 162:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 110              		.loc 1 162 0
 111 000c FB1D     		add	r3, r7, #7
 112 000e 1B78     		ldrb	r3, [r3]
 113 0010 002B     		cmp	r3, #0
 114 0012 08D0     		beq	.L6
 115              		.loc 1 162 0 is_stmt 0 discriminator 1
 116 0014 FB1D     		add	r3, r7, #7
 117 0016 1B78     		ldrb	r3, [r3]
 118 0018 012B     		cmp	r3, #1
 119 001a 04D0     		beq	.L6
 120 001c 0C4B     		ldr	r3, .L9
 121 001e 181C     		mov	r0, r3
 122 0020 A221     		mov	r1, #162
 123 0022 FFF7FEFF 		bl	assert_failed
 124              	.L6:
 163:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 164:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(NewState != DISABLE)
 125              		.loc 1 164 0 is_stmt 1
 126 0026 FB1D     		add	r3, r7, #7
 127 0028 1B78     		ldrb	r3, [r3]
 128 002a 002B     		cmp	r3, #0
 129 002c 06D0     		beq	.L7
 165:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 166:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 130              		.loc 1 166 0
 131 002e 094B     		ldr	r3, .L9+4
 132 0030 084A     		ldr	r2, .L9+4
 133 0032 1268     		ldr	r2, [r2]
 134 0034 1021     		mov	r1, #16
 135 0036 0A43     		orr	r2, r1
 136 0038 1A60     		str	r2, [r3]
 137 003a 05E0     		b	.L5
 138              	.L7:
 167:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 168:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   else
 169:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 170:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
 139              		.loc 1 170 0
 140 003c 054B     		ldr	r3, .L9+4
 141 003e 054A     		ldr	r2, .L9+4
 142 0040 1268     		ldr	r2, [r2]
 143 0042 1021     		mov	r1, #16
 144 0044 8A43     		bic	r2, r1
 145 0046 1A60     		str	r2, [r3]
 146              	.L5:
 171:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 172:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 147              		.loc 1 172 0
 148 0048 BD46     		mov	sp, r7
 149 004a 02B0     		add	sp, sp, #8
 150              		@ sp needed
 151 004c 80BD     		pop	{r7, pc}
 152              	.L10:
 153 004e C046     		.align	2
 154              	.L9:
 155 0050 00000000 		.word	.LC0
 156 0054 00200240 		.word	1073881088
 157              		.cfi_endproc
 158              	.LFE33:
 160              		.section	.text.FLASH_GetPrefetchBufferStatus,"ax",%progbits
 161              		.align	2
 162              		.global	FLASH_GetPrefetchBufferStatus
 163              		.code	16
 164              		.thumb_func
 166              	FLASH_GetPrefetchBufferStatus:
 167              	.LFB34:
 173:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 174:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 175:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Checks whether the FLASH Prefetch Buffer status is set or not.
 176:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  None
 177:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Prefetch Buffer Status (SET or RESET).
 178:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 179:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FlagStatus FLASH_GetPrefetchBufferStatus(void)
 180:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 168              		.loc 1 180 0
 169              		.cfi_startproc
 170 0000 80B5     		push	{r7, lr}
 171              		.cfi_def_cfa_offset 8
 172              		.cfi_offset 7, -8
 173              		.cfi_offset 14, -4
 174 0002 82B0     		sub	sp, sp, #8
 175              		.cfi_def_cfa_offset 16
 176 0004 00AF     		add	r7, sp, #0
 177              		.cfi_def_cfa_register 7
 181:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FlagStatus bitstatus = RESET;
 178              		.loc 1 181 0
 179 0006 FB1D     		add	r3, r7, #7
 180 0008 0022     		mov	r2, #0
 181 000a 1A70     		strb	r2, [r3]
 182:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 183:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if ((FLASH->ACR & FLASH_ACR_PRFTBS) != (uint32_t)RESET)
 182              		.loc 1 183 0
 183 000c 084B     		ldr	r3, .L15
 184 000e 1A68     		ldr	r2, [r3]
 185 0010 2023     		mov	r3, #32
 186 0012 1340     		and	r3, r2
 187 0014 03D0     		beq	.L12
 184:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 185:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     bitstatus = SET;
 188              		.loc 1 185 0
 189 0016 FB1D     		add	r3, r7, #7
 190 0018 0122     		mov	r2, #1
 191 001a 1A70     		strb	r2, [r3]
 192 001c 02E0     		b	.L13
 193              	.L12:
 186:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 187:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   else
 188:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 189:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     bitstatus = RESET;
 194              		.loc 1 189 0
 195 001e FB1D     		add	r3, r7, #7
 196 0020 0022     		mov	r2, #0
 197 0022 1A70     		strb	r2, [r3]
 198              	.L13:
 190:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 191:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
 192:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return bitstatus; 
 199              		.loc 1 192 0
 200 0024 FB1D     		add	r3, r7, #7
 201 0026 1B78     		ldrb	r3, [r3]
 193:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 202              		.loc 1 193 0
 203 0028 181C     		mov	r0, r3
 204 002a BD46     		mov	sp, r7
 205 002c 02B0     		add	sp, sp, #8
 206              		@ sp needed
 207 002e 80BD     		pop	{r7, pc}
 208              	.L16:
 209              		.align	2
 210              	.L15:
 211 0030 00200240 		.word	1073881088
 212              		.cfi_endproc
 213              	.LFE34:
 215              		.section	.text.FLASH_Unlock,"ax",%progbits
 216              		.align	2
 217              		.global	FLASH_Unlock
 218              		.code	16
 219              		.thumb_func
 221              	FLASH_Unlock:
 222              	.LFB35:
 194:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 195:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 196:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @}
 197:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 198:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 199:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /** @defgroup FLASH_Group2 FLASH Memory Programming functions
 200:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  *  @brief   FLASH Memory Programming functions
 201:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  *
 202:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** @verbatim   
 203:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  ===============================================================================
 204:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****                 ##### FLASH Memory Programming functions #####
 205:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  ===============================================================================
 206:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 207:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     [..] The FLASH Memory Programming functions, includes the following functions:
 208:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) void FLASH_Unlock(void);
 209:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) void FLASH_Lock(void);
 210:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) FLASH_Status FLASH_ErasePage(uint32_t Page_Address);
 211:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) FLASH_Status FLASH_EraseAllPages(void);
 212:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data);
 213:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data);
 214:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 215:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     [..] Any operation of erase or program should follow these steps:
 216:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        
 217:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (#) Call the FLASH_Unlock() function to enable the flash control register and 
 218:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****            program memory access
 219:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (#) Call the desired function to erase page or program data
 220:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (#) Call the FLASH_Lock() to disable the flash program memory access 
 221:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       (recommended to protect the FLASH memory against possible unwanted operation)
 222:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 223:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** @endverbatim
 224:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @{
 225:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 226:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 227:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 228:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Unlocks the FLASH control register and program memory access.
 229:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  None
 230:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval None
 231:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 232:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** void FLASH_Unlock(void)
 233:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 223              		.loc 1 233 0
 224              		.cfi_startproc
 225 0000 80B5     		push	{r7, lr}
 226              		.cfi_def_cfa_offset 8
 227              		.cfi_offset 7, -8
 228              		.cfi_offset 14, -4
 229 0002 00AF     		add	r7, sp, #0
 230              		.cfi_def_cfa_register 7
 234:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 231              		.loc 1 234 0
 232 0004 064B     		ldr	r3, .L19
 233 0006 1A69     		ldr	r2, [r3, #16]
 234 0008 8023     		mov	r3, #128
 235 000a 1340     		and	r3, r2
 236 000c 05D0     		beq	.L17
 235:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 236:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Unlocking the program memory access */
 237:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->KEYR = FLASH_FKEY1;
 237              		.loc 1 237 0
 238 000e 044B     		ldr	r3, .L19
 239 0010 044A     		ldr	r2, .L19+4
 240 0012 5A60     		str	r2, [r3, #4]
 238:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->KEYR = FLASH_FKEY2;
 241              		.loc 1 238 0
 242 0014 024B     		ldr	r3, .L19
 243 0016 044A     		ldr	r2, .L19+8
 244 0018 5A60     		str	r2, [r3, #4]
 245              	.L17:
 239:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 240:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 246              		.loc 1 240 0
 247 001a BD46     		mov	sp, r7
 248              		@ sp needed
 249 001c 80BD     		pop	{r7, pc}
 250              	.L20:
 251 001e C046     		.align	2
 252              	.L19:
 253 0020 00200240 		.word	1073881088
 254 0024 23016745 		.word	1164378403
 255 0028 AB89EFCD 		.word	-839939669
 256              		.cfi_endproc
 257              	.LFE35:
 259              		.section	.text.FLASH_Lock,"ax",%progbits
 260              		.align	2
 261              		.global	FLASH_Lock
 262              		.code	16
 263              		.thumb_func
 265              	FLASH_Lock:
 266              	.LFB36:
 241:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 242:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 243:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Locks the Program memory access.
 244:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  None
 245:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval None
 246:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 247:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** void FLASH_Lock(void)
 248:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 267              		.loc 1 248 0
 268              		.cfi_startproc
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 00AF     		add	r7, sp, #0
 274              		.cfi_def_cfa_register 7
 249:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Set the LOCK Bit to lock the FLASH control register and program memory access */
 250:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 275              		.loc 1 250 0
 276 0004 034B     		ldr	r3, .L22
 277 0006 034A     		ldr	r2, .L22
 278 0008 1269     		ldr	r2, [r2, #16]
 279 000a 8021     		mov	r1, #128
 280 000c 0A43     		orr	r2, r1
 281 000e 1A61     		str	r2, [r3, #16]
 251:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 282              		.loc 1 251 0
 283 0010 BD46     		mov	sp, r7
 284              		@ sp needed
 285 0012 80BD     		pop	{r7, pc}
 286              	.L23:
 287              		.align	2
 288              	.L22:
 289 0014 00200240 		.word	1073881088
 290              		.cfi_endproc
 291              	.LFE36:
 293              		.section	.text.FLASH_ErasePage,"ax",%progbits
 294              		.align	2
 295              		.global	FLASH_ErasePage
 296              		.code	16
 297              		.thumb_func
 299              	FLASH_ErasePage:
 300              	.LFB37:
 252:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 253:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 254:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Erases a specified page in program memory.
 255:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @note    To correctly run this function, the FLASH_Unlock() function
 256:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *           must be called before.
 257:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          Call the FLASH_Lock() to disable the flash memory access 
 258:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)
 259:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  Page_Address: The page address in program memory to be erased.
 260:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @note   A Page is erased in the Program memory only if the address to load 
 261:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         is the start address of a page (multiple of 1024 bytes).
 262:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Status: The returned value can be: 
 263:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 264:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 265:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
 266:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 301              		.loc 1 266 0
 302              		.cfi_startproc
 303 0000 90B5     		push	{r4, r7, lr}
 304              		.cfi_def_cfa_offset 12
 305              		.cfi_offset 4, -12
 306              		.cfi_offset 7, -8
 307              		.cfi_offset 14, -4
 308 0002 85B0     		sub	sp, sp, #20
 309              		.cfi_def_cfa_offset 32
 310 0004 00AF     		add	r7, sp, #0
 311              		.cfi_def_cfa_register 7
 312 0006 7860     		str	r0, [r7, #4]
 267:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 313              		.loc 1 267 0
 314 0008 3B1C     		mov	r3, r7
 315 000a 0F33     		add	r3, r3, #15
 316 000c 0422     		mov	r2, #4
 317 000e 1A70     		strb	r2, [r3]
 268:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 269:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
 270:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 318              		.loc 1 270 0
 319 0010 7A68     		ldr	r2, [r7, #4]
 320 0012 204B     		ldr	r3, .L29
 321 0014 9A42     		cmp	r2, r3
 322 0016 03D9     		bls	.L25
 323              		.loc 1 270 0 is_stmt 0 discriminator 2
 324 0018 7A68     		ldr	r2, [r7, #4]
 325 001a 1F4B     		ldr	r3, .L29+4
 326 001c 9A42     		cmp	r2, r3
 327 001e 06D9     		bls	.L26
 328              	.L25:
 329              		.loc 1 270 0 discriminator 1
 330 0020 1E4A     		ldr	r2, .L29+8
 331 0022 8723     		mov	r3, #135
 332 0024 5B00     		lsl	r3, r3, #1
 333 0026 101C     		mov	r0, r2
 334 0028 191C     		mov	r1, r3
 335 002a FFF7FEFF 		bl	assert_failed
 336              	.L26:
 271:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  
 272:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Wait for last operation to be completed */
 273:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 337              		.loc 1 273 0 is_stmt 1
 338 002e 3C1C     		mov	r4, r7
 339 0030 0F34     		add	r4, r4, #15
 340 0032 B023     		mov	r3, #176
 341 0034 1B03     		lsl	r3, r3, #12
 342 0036 181C     		mov	r0, r3
 343 0038 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 344 003c 031C     		mov	r3, r0
 345 003e 2370     		strb	r3, [r4]
 274:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 275:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 346              		.loc 1 275 0
 347 0040 3B1C     		mov	r3, r7
 348 0042 0F33     		add	r3, r3, #15
 349 0044 1B78     		ldrb	r3, [r3]
 350 0046 042B     		cmp	r3, #4
 351 0048 1DD1     		bne	.L27
 276:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   { 
 277:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* If the previous operation is completed, proceed to erase the page */
 278:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_PER;
 352              		.loc 1 278 0
 353 004a 154B     		ldr	r3, .L29+12
 354 004c 144A     		ldr	r2, .L29+12
 355 004e 1269     		ldr	r2, [r2, #16]
 356 0050 0221     		mov	r1, #2
 357 0052 0A43     		orr	r2, r1
 358 0054 1A61     		str	r2, [r3, #16]
 279:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->AR  = Page_Address;
 359              		.loc 1 279 0
 360 0056 124B     		ldr	r3, .L29+12
 361 0058 7A68     		ldr	r2, [r7, #4]
 362 005a 5A61     		str	r2, [r3, #20]
 280:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 363              		.loc 1 280 0
 364 005c 104B     		ldr	r3, .L29+12
 365 005e 104A     		ldr	r2, .L29+12
 366 0060 1269     		ldr	r2, [r2, #16]
 367 0062 4021     		mov	r1, #64
 368 0064 0A43     		orr	r2, r1
 369 0066 1A61     		str	r2, [r3, #16]
 281:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 282:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Wait for last operation to be completed */
 283:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 370              		.loc 1 283 0
 371 0068 3C1C     		mov	r4, r7
 372 006a 0F34     		add	r4, r4, #15
 373 006c B023     		mov	r3, #176
 374 006e 1B03     		lsl	r3, r3, #12
 375 0070 181C     		mov	r0, r3
 376 0072 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 377 0076 031C     		mov	r3, r0
 378 0078 2370     		strb	r3, [r4]
 284:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 285:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Disable the PER Bit */
 286:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR &= ~FLASH_CR_PER;
 379              		.loc 1 286 0
 380 007a 094B     		ldr	r3, .L29+12
 381 007c 084A     		ldr	r2, .L29+12
 382 007e 1269     		ldr	r2, [r2, #16]
 383 0080 0221     		mov	r1, #2
 384 0082 8A43     		bic	r2, r1
 385 0084 1A61     		str	r2, [r3, #16]
 386              	.L27:
 287:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 288:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 289:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the Erase Status */
 290:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 387              		.loc 1 290 0
 388 0086 3B1C     		mov	r3, r7
 389 0088 0F33     		add	r3, r3, #15
 390 008a 1B78     		ldrb	r3, [r3]
 291:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 391              		.loc 1 291 0
 392 008c 181C     		mov	r0, r3
 393 008e BD46     		mov	sp, r7
 394 0090 05B0     		add	sp, sp, #20
 395              		@ sp needed
 396 0092 90BD     		pop	{r4, r7, pc}
 397              	.L30:
 398              		.align	2
 399              	.L29:
 400 0094 FFFFFF07 		.word	134217727
 401 0098 FFFF0008 		.word	134283263
 402 009c 00000000 		.word	.LC0
 403 00a0 00200240 		.word	1073881088
 404              		.cfi_endproc
 405              	.LFE37:
 407              		.section	.text.FLASH_EraseAllPages,"ax",%progbits
 408              		.align	2
 409              		.global	FLASH_EraseAllPages
 410              		.code	16
 411              		.thumb_func
 413              	FLASH_EraseAllPages:
 414              	.LFB38:
 292:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 293:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 294:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Erases all FLASH pages.
 295:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @note    To correctly run this function, the FLASH_Unlock() function
 296:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *           must be called before.
 297:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          Call the FLASH_Lock() to disable the flash memory access 
 298:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)
 299:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  None
 300:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 301:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 302:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 303:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_EraseAllPages(void)
 304:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 415              		.loc 1 304 0
 416              		.cfi_startproc
 417 0000 90B5     		push	{r4, r7, lr}
 418              		.cfi_def_cfa_offset 12
 419              		.cfi_offset 4, -12
 420              		.cfi_offset 7, -8
 421              		.cfi_offset 14, -4
 422 0002 83B0     		sub	sp, sp, #12
 423              		.cfi_def_cfa_offset 24
 424 0004 00AF     		add	r7, sp, #0
 425              		.cfi_def_cfa_register 7
 305:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 426              		.loc 1 305 0
 427 0006 FB1D     		add	r3, r7, #7
 428 0008 0422     		mov	r2, #4
 429 000a 1A70     		strb	r2, [r3]
 306:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 307:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Wait for last operation to be completed */
 308:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 430              		.loc 1 308 0
 431 000c FC1D     		add	r4, r7, #7
 432 000e B023     		mov	r3, #176
 433 0010 1B03     		lsl	r3, r3, #12
 434 0012 181C     		mov	r0, r3
 435 0014 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 436 0018 031C     		mov	r3, r0
 437 001a 2370     		strb	r3, [r4]
 309:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 310:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 438              		.loc 1 310 0
 439 001c FB1D     		add	r3, r7, #7
 440 001e 1B78     		ldrb	r3, [r3]
 441 0020 042B     		cmp	r3, #4
 442 0022 19D1     		bne	.L32
 311:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 312:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 313:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****      FLASH->CR |= FLASH_CR_MER;
 443              		.loc 1 313 0
 444 0024 0F4B     		ldr	r3, .L34
 445 0026 0F4A     		ldr	r2, .L34
 446 0028 1269     		ldr	r2, [r2, #16]
 447 002a 0421     		mov	r1, #4
 448 002c 0A43     		orr	r2, r1
 449 002e 1A61     		str	r2, [r3, #16]
 314:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 450              		.loc 1 314 0
 451 0030 0C4B     		ldr	r3, .L34
 452 0032 0C4A     		ldr	r2, .L34
 453 0034 1269     		ldr	r2, [r2, #16]
 454 0036 4021     		mov	r1, #64
 455 0038 0A43     		orr	r2, r1
 456 003a 1A61     		str	r2, [r3, #16]
 315:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 316:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Wait for last operation to be completed */
 317:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 457              		.loc 1 317 0
 458 003c FC1D     		add	r4, r7, #7
 459 003e B023     		mov	r3, #176
 460 0040 1B03     		lsl	r3, r3, #12
 461 0042 181C     		mov	r0, r3
 462 0044 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 463 0048 031C     		mov	r3, r0
 464 004a 2370     		strb	r3, [r4]
 318:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 319:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Disable the MER Bit */
 320:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR &= ~FLASH_CR_MER;
 465              		.loc 1 320 0
 466 004c 054B     		ldr	r3, .L34
 467 004e 054A     		ldr	r2, .L34
 468 0050 1269     		ldr	r2, [r2, #16]
 469 0052 0421     		mov	r1, #4
 470 0054 8A43     		bic	r2, r1
 471 0056 1A61     		str	r2, [r3, #16]
 472              	.L32:
 321:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 322:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 323:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the Erase Status */
 324:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 473              		.loc 1 324 0
 474 0058 FB1D     		add	r3, r7, #7
 475 005a 1B78     		ldrb	r3, [r3]
 325:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 476              		.loc 1 325 0
 477 005c 181C     		mov	r0, r3
 478 005e BD46     		mov	sp, r7
 479 0060 03B0     		add	sp, sp, #12
 480              		@ sp needed
 481 0062 90BD     		pop	{r4, r7, pc}
 482              	.L35:
 483              		.align	2
 484              	.L34:
 485 0064 00200240 		.word	1073881088
 486              		.cfi_endproc
 487              	.LFE38:
 489              		.section	.text.FLASH_ProgramWord,"ax",%progbits
 490              		.align	2
 491              		.global	FLASH_ProgramWord
 492              		.code	16
 493              		.thumb_func
 495              	FLASH_ProgramWord:
 496              	.LFB39:
 326:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 327:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 328:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Programs a word at a specified address.
 329:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @note    To correctly run this function, the FLASH_Unlock() function
 330:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *           must be called before.
 331:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          Call the FLASH_Lock() to disable the flash memory access 
 332:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)
 333:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 334:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 335:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 336:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
 337:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 338:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 339:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 497              		.loc 1 339 0
 498              		.cfi_startproc
 499 0000 90B5     		push	{r4, r7, lr}
 500              		.cfi_def_cfa_offset 12
 501              		.cfi_offset 4, -12
 502              		.cfi_offset 7, -8
 503              		.cfi_offset 14, -4
 504 0002 85B0     		sub	sp, sp, #20
 505              		.cfi_def_cfa_offset 32
 506 0004 00AF     		add	r7, sp, #0
 507              		.cfi_def_cfa_register 7
 508 0006 7860     		str	r0, [r7, #4]
 509 0008 3960     		str	r1, [r7]
 340:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 510              		.loc 1 340 0
 511 000a 3B1C     		mov	r3, r7
 512 000c 0F33     		add	r3, r3, #15
 513 000e 0422     		mov	r2, #4
 514 0010 1A70     		strb	r2, [r3]
 341:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   __IO uint32_t tmp = 0;
 515              		.loc 1 341 0
 516 0012 0023     		mov	r3, #0
 517 0014 BB60     		str	r3, [r7, #8]
 342:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 343:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
 344:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 518              		.loc 1 344 0
 519 0016 7A68     		ldr	r2, [r7, #4]
 520 0018 2C4B     		ldr	r3, .L42
 521 001a 9A42     		cmp	r2, r3
 522 001c 03D9     		bls	.L37
 523              		.loc 1 344 0 is_stmt 0 discriminator 2
 524 001e 7A68     		ldr	r2, [r7, #4]
 525 0020 2B4B     		ldr	r3, .L42+4
 526 0022 9A42     		cmp	r2, r3
 527 0024 06D9     		bls	.L38
 528              	.L37:
 529              		.loc 1 344 0 discriminator 1
 530 0026 2B4A     		ldr	r2, .L42+8
 531 0028 AC23     		mov	r3, #172
 532 002a 5B00     		lsl	r3, r3, #1
 533 002c 101C     		mov	r0, r2
 534 002e 191C     		mov	r1, r3
 535 0030 FFF7FEFF 		bl	assert_failed
 536              	.L38:
 345:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 346:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Wait for last operation to be completed */
 347:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 537              		.loc 1 347 0 is_stmt 1
 538 0034 3C1C     		mov	r4, r7
 539 0036 0F34     		add	r4, r4, #15
 540 0038 B023     		mov	r3, #176
 541 003a 1B03     		lsl	r3, r3, #12
 542 003c 181C     		mov	r0, r3
 543 003e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 544 0042 031C     		mov	r3, r0
 545 0044 2370     		strb	r3, [r4]
 348:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 349:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 546              		.loc 1 349 0
 547 0046 3B1C     		mov	r3, r7
 548 0048 0F33     		add	r3, r3, #15
 549 004a 1B78     		ldrb	r3, [r3]
 550 004c 042B     		cmp	r3, #4
 551 004e 35D1     		bne	.L39
 350:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 351:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* If the previous operation is completed, proceed to program the new first 
 352:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     half word */
 353:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 552              		.loc 1 353 0
 553 0050 214B     		ldr	r3, .L42+12
 554 0052 214A     		ldr	r2, .L42+12
 555 0054 1269     		ldr	r2, [r2, #16]
 556 0056 0121     		mov	r1, #1
 557 0058 0A43     		orr	r2, r1
 558 005a 1A61     		str	r2, [r3, #16]
 354:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 355:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     *(__IO uint16_t*)Address = (uint16_t)Data;
 559              		.loc 1 355 0
 560 005c 7B68     		ldr	r3, [r7, #4]
 561 005e 3A68     		ldr	r2, [r7]
 562 0060 92B2     		uxth	r2, r2
 563 0062 1A80     		strh	r2, [r3]
 356:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 357:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Wait for last operation to be completed */
 358:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 564              		.loc 1 358 0
 565 0064 3C1C     		mov	r4, r7
 566 0066 0F34     		add	r4, r4, #15
 567 0068 B023     		mov	r3, #176
 568 006a 1B03     		lsl	r3, r3, #12
 569 006c 181C     		mov	r0, r3
 570 006e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 571 0072 031C     		mov	r3, r0
 572 0074 2370     		strb	r3, [r4]
 359:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  
 360:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if(status == FLASH_COMPLETE)
 573              		.loc 1 360 0
 574 0076 3B1C     		mov	r3, r7
 575 0078 0F33     		add	r3, r3, #15
 576 007a 1B78     		ldrb	r3, [r3]
 577 007c 042B     		cmp	r3, #4
 578 007e 17D1     		bne	.L40
 361:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 362:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* If the previous operation is completed, proceed to program the new second 
 363:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       half word */
 364:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       tmp = Address + 2;
 579              		.loc 1 364 0
 580 0080 7B68     		ldr	r3, [r7, #4]
 581 0082 0233     		add	r3, r3, #2
 582 0084 BB60     		str	r3, [r7, #8]
 365:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 366:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       *(__IO uint16_t*) tmp = Data >> 16;
 583              		.loc 1 366 0
 584 0086 BB68     		ldr	r3, [r7, #8]
 585 0088 3A68     		ldr	r2, [r7]
 586 008a 120C     		lsr	r2, r2, #16
 587 008c 92B2     		uxth	r2, r2
 588 008e 1A80     		strh	r2, [r3]
 367:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 368:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* Wait for last operation to be completed */
 369:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 589              		.loc 1 369 0
 590 0090 3C1C     		mov	r4, r7
 591 0092 0F34     		add	r4, r4, #15
 592 0094 B023     		mov	r3, #176
 593 0096 1B03     		lsl	r3, r3, #12
 594 0098 181C     		mov	r0, r3
 595 009a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 596 009e 031C     		mov	r3, r0
 597 00a0 2370     		strb	r3, [r4]
 370:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         
 371:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* Disable the PG Bit */
 372:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR &= ~FLASH_CR_PG;
 598              		.loc 1 372 0
 599 00a2 0D4B     		ldr	r3, .L42+12
 600 00a4 0C4A     		ldr	r2, .L42+12
 601 00a6 1269     		ldr	r2, [r2, #16]
 602 00a8 0121     		mov	r1, #1
 603 00aa 8A43     		bic	r2, r1
 604 00ac 1A61     		str	r2, [r3, #16]
 605 00ae 05E0     		b	.L39
 606              	.L40:
 373:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 374:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     else
 375:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 376:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* Disable the PG Bit */
 377:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR &= ~FLASH_CR_PG;
 607              		.loc 1 377 0
 608 00b0 094B     		ldr	r3, .L42+12
 609 00b2 094A     		ldr	r2, .L42+12
 610 00b4 1269     		ldr	r2, [r2, #16]
 611 00b6 0121     		mov	r1, #1
 612 00b8 8A43     		bic	r2, r1
 613 00ba 1A61     		str	r2, [r3, #16]
 614              	.L39:
 378:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 379:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 380:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****    
 381:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the Program Status */
 382:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 615              		.loc 1 382 0
 616 00bc 3B1C     		mov	r3, r7
 617 00be 0F33     		add	r3, r3, #15
 618 00c0 1B78     		ldrb	r3, [r3]
 383:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 619              		.loc 1 383 0
 620 00c2 181C     		mov	r0, r3
 621 00c4 BD46     		mov	sp, r7
 622 00c6 05B0     		add	sp, sp, #20
 623              		@ sp needed
 624 00c8 90BD     		pop	{r4, r7, pc}
 625              	.L43:
 626 00ca C046     		.align	2
 627              	.L42:
 628 00cc FFFFFF07 		.word	134217727
 629 00d0 FFFF0008 		.word	134283263
 630 00d4 00000000 		.word	.LC0
 631 00d8 00200240 		.word	1073881088
 632              		.cfi_endproc
 633              	.LFE39:
 635              		.section	.text.FLASH_ProgramHalfWord,"ax",%progbits
 636              		.align	2
 637              		.global	FLASH_ProgramHalfWord
 638              		.code	16
 639              		.thumb_func
 641              	FLASH_ProgramHalfWord:
 642              	.LFB40:
 384:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 385:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 386:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Programs a half word at a specified address.
 387:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @note    To correctly run this function, the FLASH_Unlock() function
 388:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *           must be called before.
 389:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          Call the FLASH_Lock() to disable the flash memory access 
 390:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)
 391:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 392:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 393:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 394:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
 395:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 396:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 397:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 643              		.loc 1 397 0
 644              		.cfi_startproc
 645 0000 90B5     		push	{r4, r7, lr}
 646              		.cfi_def_cfa_offset 12
 647              		.cfi_offset 4, -12
 648              		.cfi_offset 7, -8
 649              		.cfi_offset 14, -4
 650 0002 85B0     		sub	sp, sp, #20
 651              		.cfi_def_cfa_offset 32
 652 0004 00AF     		add	r7, sp, #0
 653              		.cfi_def_cfa_register 7
 654 0006 7860     		str	r0, [r7, #4]
 655 0008 0A1C     		mov	r2, r1
 656 000a BB1C     		add	r3, r7, #2
 657 000c 1A80     		strh	r2, [r3]
 398:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 658              		.loc 1 398 0
 659 000e 3B1C     		mov	r3, r7
 660 0010 0F33     		add	r3, r3, #15
 661 0012 0422     		mov	r2, #4
 662 0014 1A70     		strb	r2, [r3]
 399:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 400:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
 401:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 663              		.loc 1 401 0
 664 0016 7A68     		ldr	r2, [r7, #4]
 665 0018 1D4B     		ldr	r3, .L49
 666 001a 9A42     		cmp	r2, r3
 667 001c 03D9     		bls	.L45
 668              		.loc 1 401 0 is_stmt 0 discriminator 2
 669 001e 7A68     		ldr	r2, [r7, #4]
 670 0020 1C4B     		ldr	r3, .L49+4
 671 0022 9A42     		cmp	r2, r3
 672 0024 06D9     		bls	.L46
 673              	.L45:
 674              		.loc 1 401 0 discriminator 1
 675 0026 1C4A     		ldr	r2, .L49+8
 676 0028 9223     		mov	r3, #146
 677 002a FF33     		add	r3, r3, #255
 678 002c 101C     		mov	r0, r2
 679 002e 191C     		mov	r1, r3
 680 0030 FFF7FEFF 		bl	assert_failed
 681              	.L46:
 402:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 403:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Wait for last operation to be completed */
 404:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 682              		.loc 1 404 0 is_stmt 1
 683 0034 3C1C     		mov	r4, r7
 684 0036 0F34     		add	r4, r4, #15
 685 0038 B023     		mov	r3, #176
 686 003a 1B03     		lsl	r3, r3, #12
 687 003c 181C     		mov	r0, r3
 688 003e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 689 0042 031C     		mov	r3, r0
 690 0044 2370     		strb	r3, [r4]
 405:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 406:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 691              		.loc 1 406 0
 692 0046 3B1C     		mov	r3, r7
 693 0048 0F33     		add	r3, r3, #15
 694 004a 1B78     		ldrb	r3, [r3]
 695 004c 042B     		cmp	r3, #4
 696 004e 18D1     		bne	.L47
 407:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 408:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* If the previous operation is completed, proceed to program the new data */
 409:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 697              		.loc 1 409 0
 698 0050 124B     		ldr	r3, .L49+12
 699 0052 124A     		ldr	r2, .L49+12
 700 0054 1269     		ldr	r2, [r2, #16]
 701 0056 0121     		mov	r1, #1
 702 0058 0A43     		orr	r2, r1
 703 005a 1A61     		str	r2, [r3, #16]
 410:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 411:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     *(__IO uint16_t*)Address = Data;
 704              		.loc 1 411 0
 705 005c 7B68     		ldr	r3, [r7, #4]
 706 005e BA1C     		add	r2, r7, #2
 707 0060 1288     		ldrh	r2, [r2]
 708 0062 1A80     		strh	r2, [r3]
 412:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 413:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Wait for last operation to be completed */
 414:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 709              		.loc 1 414 0
 710 0064 3C1C     		mov	r4, r7
 711 0066 0F34     		add	r4, r4, #15
 712 0068 B023     		mov	r3, #176
 713 006a 1B03     		lsl	r3, r3, #12
 714 006c 181C     		mov	r0, r3
 715 006e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 716 0072 031C     		mov	r3, r0
 717 0074 2370     		strb	r3, [r4]
 415:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 416:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Disable the PG Bit */
 417:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR &= ~FLASH_CR_PG;
 718              		.loc 1 417 0
 719 0076 094B     		ldr	r3, .L49+12
 720 0078 084A     		ldr	r2, .L49+12
 721 007a 1269     		ldr	r2, [r2, #16]
 722 007c 0121     		mov	r1, #1
 723 007e 8A43     		bic	r2, r1
 724 0080 1A61     		str	r2, [r3, #16]
 725              	.L47:
 418:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   } 
 419:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 420:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the Program Status */
 421:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 726              		.loc 1 421 0
 727 0082 3B1C     		mov	r3, r7
 728 0084 0F33     		add	r3, r3, #15
 729 0086 1B78     		ldrb	r3, [r3]
 422:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 730              		.loc 1 422 0
 731 0088 181C     		mov	r0, r3
 732 008a BD46     		mov	sp, r7
 733 008c 05B0     		add	sp, sp, #20
 734              		@ sp needed
 735 008e 90BD     		pop	{r4, r7, pc}
 736              	.L50:
 737              		.align	2
 738              	.L49:
 739 0090 FFFFFF07 		.word	134217727
 740 0094 FFFF0008 		.word	134283263
 741 0098 00000000 		.word	.LC0
 742 009c 00200240 		.word	1073881088
 743              		.cfi_endproc
 744              	.LFE40:
 746              		.section	.text.FLASH_OB_Unlock,"ax",%progbits
 747              		.align	2
 748              		.global	FLASH_OB_Unlock
 749              		.code	16
 750              		.thumb_func
 752              	FLASH_OB_Unlock:
 753              	.LFB41:
 423:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 424:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 425:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @}
 426:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 427:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 428:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /** @defgroup FLASH_Group3 Option Bytes Programming functions
 429:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  *  @brief   Option Bytes Programming functions 
 430:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  *
 431:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** @verbatim   
 432:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  ===============================================================================
 433:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****                 ##### Option Bytes Programming functions #####
 434:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  ===============================================================================
 435:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 436:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     [..] The FLASH_Option Bytes Programming_functions, includes the following functions:
 437:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) void FLASH_OB_Unlock(void);
 438:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) void FLASH_OB_Lock(void);
 439:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) void FLASH_OB_Launch(void);
 440:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) FLASH_Status FLASH_OB_Erase(void);
 441:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) FLASH_Status FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState);
 442:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP);
 443:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY);
 444:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1);
 445:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG);
 446:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER);
 447:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 	   (+) FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data);
 448:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) uint8_t FLASH_OB_GetUser(void);
 449:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) uint32_t FLASH_OB_GetWRP(void);
 450:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        (+) FlagStatus FLASH_OB_GetRDP(void);
 451:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 452:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     [..] Any operation of erase or program should follow these steps:
 453:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 454:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****    (#) Call the FLASH_OB_Unlock() function to enable the Option Bytes registers access
 455:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 456:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****    (#) Call one or several functions to program the desired option bytes 
 457:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       (++) FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP) => to set the desired read Protection Le
 458:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       (++) FLASH_Status FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState) 
 459:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****            => to Enable/Disable the desired sector write protection
 460:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       (++) FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY) 
 461:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****            => to configure the user option Bytes: IWDG, STOP and the Standby.
 462:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       (++) FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
 463:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****            => to set or reset BOOT1 
 464:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       (++) FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG) 
 465:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****            => to enable or disable the VDDA Analog Monitoring 			 
 466:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       (++) You can write all User Options bytes at once using a single function
 467:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****            by calling FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
 468:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 	  (++) FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data) to program the 
 469:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 	       two half word in the option bytes
 470:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 471:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****    (#) Once all needed option bytes to be programmed are correctly written, call the
 472:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH_OB_Launch(void) function to launch the Option Bytes programming process.
 473:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 474:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****    (#) Call the FLASH_OB_Lock() to disable the Option Bytes registers access (recommended
 475:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       to protect the option Bytes against possible unwanted operations)
 476:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 477:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** @endverbatim
 478:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @{
 479:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 480:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 481:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 482:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Unlocks the option bytes block access.
 483:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  None
 484:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval None
 485:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 486:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** void FLASH_OB_Unlock(void)
 487:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 754              		.loc 1 487 0
 755              		.cfi_startproc
 756 0000 80B5     		push	{r7, lr}
 757              		.cfi_def_cfa_offset 8
 758              		.cfi_offset 7, -8
 759              		.cfi_offset 14, -4
 760 0002 00AF     		add	r7, sp, #0
 761              		.cfi_def_cfa_register 7
 488:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
 762              		.loc 1 488 0
 763 0004 064B     		ldr	r3, .L53
 764 0006 1A69     		ldr	r2, [r3, #16]
 765 0008 8023     		mov	r3, #128
 766 000a 9B00     		lsl	r3, r3, #2
 767 000c 1340     		and	r3, r2
 768 000e 05D1     		bne	.L51
 489:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   { 
 490:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Unlocking the option bytes block access */
 491:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPTKEY1;
 769              		.loc 1 491 0
 770 0010 034B     		ldr	r3, .L53
 771 0012 044A     		ldr	r2, .L53+4
 772 0014 9A60     		str	r2, [r3, #8]
 492:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPTKEY2;
 773              		.loc 1 492 0
 774 0016 024B     		ldr	r3, .L53
 775 0018 034A     		ldr	r2, .L53+8
 776 001a 9A60     		str	r2, [r3, #8]
 777              	.L51:
 493:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 494:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 778              		.loc 1 494 0
 779 001c BD46     		mov	sp, r7
 780              		@ sp needed
 781 001e 80BD     		pop	{r7, pc}
 782              	.L54:
 783              		.align	2
 784              	.L53:
 785 0020 00200240 		.word	1073881088
 786 0024 23016745 		.word	1164378403
 787 0028 AB89EFCD 		.word	-839939669
 788              		.cfi_endproc
 789              	.LFE41:
 791              		.section	.text.FLASH_OB_Lock,"ax",%progbits
 792              		.align	2
 793              		.global	FLASH_OB_Lock
 794              		.code	16
 795              		.thumb_func
 797              	FLASH_OB_Lock:
 798              	.LFB42:
 495:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 496:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 497:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Locks the option bytes block access.
 498:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  None
 499:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval None
 500:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 501:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** void FLASH_OB_Lock(void)
 502:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 799              		.loc 1 502 0
 800              		.cfi_startproc
 801 0000 80B5     		push	{r7, lr}
 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0002 00AF     		add	r7, sp, #0
 806              		.cfi_def_cfa_register 7
 503:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Set the OPTWREN Bit to lock the option bytes block access */
 504:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH->CR &= ~FLASH_CR_OPTWRE;
 807              		.loc 1 504 0
 808 0004 034B     		ldr	r3, .L56
 809 0006 034A     		ldr	r2, .L56
 810 0008 1169     		ldr	r1, [r2, #16]
 811 000a 034A     		ldr	r2, .L56+4
 812 000c 0A40     		and	r2, r1
 813 000e 1A61     		str	r2, [r3, #16]
 505:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 814              		.loc 1 505 0
 815 0010 BD46     		mov	sp, r7
 816              		@ sp needed
 817 0012 80BD     		pop	{r7, pc}
 818              	.L57:
 819              		.align	2
 820              	.L56:
 821 0014 00200240 		.word	1073881088
 822 0018 FFFDFFFF 		.word	-513
 823              		.cfi_endproc
 824              	.LFE42:
 826              		.section	.text.FLASH_OB_Launch,"ax",%progbits
 827              		.align	2
 828              		.global	FLASH_OB_Launch
 829              		.code	16
 830              		.thumb_func
 832              	FLASH_OB_Launch:
 833              	.LFB43:
 506:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 507:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 508:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Launch the option byte loading.
 509:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  None
 510:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval None
 511:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 512:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** void FLASH_OB_Launch(void)
 513:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 834              		.loc 1 513 0
 835              		.cfi_startproc
 836 0000 80B5     		push	{r7, lr}
 837              		.cfi_def_cfa_offset 8
 838              		.cfi_offset 7, -8
 839              		.cfi_offset 14, -4
 840 0002 00AF     		add	r7, sp, #0
 841              		.cfi_def_cfa_register 7
 514:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Set the OBL_Launch bit to launch the option byte loading */
 515:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH->CR |= FLASH_CR_OBL_LAUNCH;
 842              		.loc 1 515 0
 843 0004 044B     		ldr	r3, .L59
 844 0006 044A     		ldr	r2, .L59
 845 0008 1269     		ldr	r2, [r2, #16]
 846 000a 8021     		mov	r1, #128
 847 000c 8901     		lsl	r1, r1, #6
 848 000e 0A43     		orr	r2, r1
 849 0010 1A61     		str	r2, [r3, #16]
 516:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 850              		.loc 1 516 0
 851 0012 BD46     		mov	sp, r7
 852              		@ sp needed
 853 0014 80BD     		pop	{r7, pc}
 854              	.L60:
 855 0016 C046     		.align	2
 856              	.L59:
 857 0018 00200240 		.word	1073881088
 858              		.cfi_endproc
 859              	.LFE43:
 861              		.section	.text.FLASH_OB_Erase,"ax",%progbits
 862              		.align	2
 863              		.global	FLASH_OB_Erase
 864              		.code	16
 865              		.thumb_func
 867              	FLASH_OB_Erase:
 868              	.LFB44:
 517:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 518:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 519:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Erases the FLASH option bytes.
 520:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @note    To correctly run this function, the FLASH_OB_Unlock() function
 521:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *           must be called before.
 522:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          Call the FLASH_OB_Lock() to disable the flash control register access and the option b
 523:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)
 524:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @note   This functions erases all option bytes except the Read protection (RDP).
 525:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  None
 526:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 527:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 528:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 529:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_OB_Erase(void)
 530:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 869              		.loc 1 530 0
 870              		.cfi_startproc
 871 0000 90B5     		push	{r4, r7, lr}
 872              		.cfi_def_cfa_offset 12
 873              		.cfi_offset 4, -12
 874              		.cfi_offset 7, -8
 875              		.cfi_offset 14, -4
 876 0002 83B0     		sub	sp, sp, #12
 877              		.cfi_def_cfa_offset 24
 878 0004 00AF     		add	r7, sp, #0
 879              		.cfi_def_cfa_register 7
 531:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   uint16_t rdptmp = OB_RDP_Level_0;
 880              		.loc 1 531 0
 881 0006 BB1D     		add	r3, r7, #6
 882 0008 AA22     		mov	r2, #170
 883 000a 1A80     		strh	r2, [r3]
 532:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 533:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 884              		.loc 1 533 0
 885 000c 7B1D     		add	r3, r7, #5
 886 000e 0422     		mov	r2, #4
 887 0010 1A70     		strb	r2, [r3]
 534:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 535:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Get the actual read protection Option Byte value */ 
 536:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(FLASH_OB_GetRDP() != RESET)
 888              		.loc 1 536 0
 889 0012 FFF7FEFF 		bl	FLASH_OB_GetRDP
 890 0016 031C     		mov	r3, r0
 891 0018 002B     		cmp	r3, #0
 892 001a 02D0     		beq	.L62
 537:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 538:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     rdptmp = 0x00;  
 893              		.loc 1 538 0
 894 001c BB1D     		add	r3, r7, #6
 895 001e 0022     		mov	r2, #0
 896 0020 1A80     		strh	r2, [r3]
 897              	.L62:
 539:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 540:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 541:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Wait for last operation to be completed */
 542:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 898              		.loc 1 542 0
 899 0022 7C1D     		add	r4, r7, #5
 900 0024 B023     		mov	r3, #176
 901 0026 1B03     		lsl	r3, r3, #12
 902 0028 181C     		mov	r0, r3
 903 002a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 904 002e 031C     		mov	r3, r0
 905 0030 2370     		strb	r3, [r4]
 543:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 544:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 906              		.loc 1 544 0
 907 0032 7B1D     		add	r3, r7, #5
 908 0034 1B78     		ldrb	r3, [r3]
 909 0036 042B     		cmp	r3, #4
 910 0038 44D1     		bne	.L63
 545:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {   
 546:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* If the previous operation is completed, proceed to erase the option bytes */
 547:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_OPTER;
 911              		.loc 1 547 0
 912 003a 254B     		ldr	r3, .L67
 913 003c 244A     		ldr	r2, .L67
 914 003e 1269     		ldr	r2, [r2, #16]
 915 0040 2021     		mov	r1, #32
 916 0042 0A43     		orr	r2, r1
 917 0044 1A61     		str	r2, [r3, #16]
 548:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 918              		.loc 1 548 0
 919 0046 224B     		ldr	r3, .L67
 920 0048 214A     		ldr	r2, .L67
 921 004a 1269     		ldr	r2, [r2, #16]
 922 004c 4021     		mov	r1, #64
 923 004e 0A43     		orr	r2, r1
 924 0050 1A61     		str	r2, [r3, #16]
 549:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 550:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Wait for last operation to be completed */
 551:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 925              		.loc 1 551 0
 926 0052 7C1D     		add	r4, r7, #5
 927 0054 B023     		mov	r3, #176
 928 0056 1B03     		lsl	r3, r3, #12
 929 0058 181C     		mov	r0, r3
 930 005a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 931 005e 031C     		mov	r3, r0
 932 0060 2370     		strb	r3, [r4]
 552:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 553:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if(status == FLASH_COMPLETE)
 933              		.loc 1 553 0
 934 0062 7B1D     		add	r3, r7, #5
 935 0064 1B78     		ldrb	r3, [r3]
 936 0066 042B     		cmp	r3, #4
 937 0068 22D1     		bne	.L64
 554:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 555:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* If the erase operation is completed, disable the OPTER Bit */
 556:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTER;
 938              		.loc 1 556 0
 939 006a 194B     		ldr	r3, .L67
 940 006c 184A     		ldr	r2, .L67
 941 006e 1269     		ldr	r2, [r2, #16]
 942 0070 2021     		mov	r1, #32
 943 0072 8A43     		bic	r2, r1
 944 0074 1A61     		str	r2, [r3, #16]
 557:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        
 558:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* Enable the Option Bytes Programming operation */
 559:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR |= FLASH_CR_OPTPG;
 945              		.loc 1 559 0
 946 0076 164B     		ldr	r3, .L67
 947 0078 154A     		ldr	r2, .L67
 948 007a 1269     		ldr	r2, [r2, #16]
 949 007c 1021     		mov	r1, #16
 950 007e 0A43     		orr	r2, r1
 951 0080 1A61     		str	r2, [r3, #16]
 560:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 561:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* Restore the last read protection Option Byte value */
 562:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       OB->RDP = (uint16_t)rdptmp; 
 952              		.loc 1 562 0
 953 0082 144B     		ldr	r3, .L67+4
 954 0084 BA1D     		add	r2, r7, #6
 955 0086 1288     		ldrh	r2, [r2]
 956 0088 1A80     		strh	r2, [r3]
 563:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 564:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* Wait for last operation to be completed */
 565:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 957              		.loc 1 565 0
 958 008a 7C1D     		add	r4, r7, #5
 959 008c B023     		mov	r3, #176
 960 008e 1B03     		lsl	r3, r3, #12
 961 0090 181C     		mov	r0, r3
 962 0092 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 963 0096 031C     		mov	r3, r0
 964 0098 2370     		strb	r3, [r4]
 566:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  
 567:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       if(status != FLASH_TIMEOUT)
 965              		.loc 1 567 0
 966 009a 7B1D     		add	r3, r7, #5
 967 009c 1B78     		ldrb	r3, [r3]
 968 009e 052B     		cmp	r3, #5
 969 00a0 10D0     		beq	.L63
 568:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       {
 569:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         /* if the program operation is completed, disable the OPTPG Bit */
 570:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         FLASH->CR &= ~FLASH_CR_OPTPG;
 970              		.loc 1 570 0
 971 00a2 0B4B     		ldr	r3, .L67
 972 00a4 0A4A     		ldr	r2, .L67
 973 00a6 1269     		ldr	r2, [r2, #16]
 974 00a8 1021     		mov	r1, #16
 975 00aa 8A43     		bic	r2, r1
 976 00ac 1A61     		str	r2, [r3, #16]
 977 00ae 09E0     		b	.L63
 978              	.L64:
 571:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       }
 572:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 573:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     else
 574:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 575:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       if (status != FLASH_TIMEOUT)
 979              		.loc 1 575 0
 980 00b0 7B1D     		add	r3, r7, #5
 981 00b2 1B78     		ldrb	r3, [r3]
 982 00b4 052B     		cmp	r3, #5
 983 00b6 05D0     		beq	.L63
 576:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       {
 577:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         /* Disable the OPTPG Bit */
 578:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         FLASH->CR &= ~FLASH_CR_OPTPG;
 984              		.loc 1 578 0
 985 00b8 054B     		ldr	r3, .L67
 986 00ba 054A     		ldr	r2, .L67
 987 00bc 1269     		ldr	r2, [r2, #16]
 988 00be 1021     		mov	r1, #16
 989 00c0 8A43     		bic	r2, r1
 990 00c2 1A61     		str	r2, [r3, #16]
 991              	.L63:
 579:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       }
 580:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }  
 581:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 582:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the erase status */
 583:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 992              		.loc 1 583 0
 993 00c4 7B1D     		add	r3, r7, #5
 994 00c6 1B78     		ldrb	r3, [r3]
 584:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 995              		.loc 1 584 0
 996 00c8 181C     		mov	r0, r3
 997 00ca BD46     		mov	sp, r7
 998 00cc 03B0     		add	sp, sp, #12
 999              		@ sp needed
 1000 00ce 90BD     		pop	{r4, r7, pc}
 1001              	.L68:
 1002              		.align	2
 1003              	.L67:
 1004 00d0 00200240 		.word	1073881088
 1005 00d4 00F8FF1F 		.word	536868864
 1006              		.cfi_endproc
 1007              	.LFE44:
 1009              		.section	.text.FLASH_OB_EnableWRP,"ax",%progbits
 1010              		.align	2
 1011              		.global	FLASH_OB_EnableWRP
 1012              		.code	16
 1013              		.thumb_func
 1015              	FLASH_OB_EnableWRP:
 1016              	.LFB45:
 585:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 586:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 587:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Write protects the desired pages
 588:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @note    To correctly run this function, the FLASH_OB_Unlock() function
 589:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *           must be called before.
 590:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          Call the FLASH_OB_Lock() to disable the flash control register access and the option b
 591:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)
 592:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  OB_WRP: specifies the address of the pages to be write protected.
 593:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         This parameter can be:
 594:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_WRP_Pages0to3..OB_WRP_Pages60to63
 595:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_WRP_AllPages
 596:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Status: The returned value can be: 
 597:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 598:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 599:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP)
 600:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 1017              		.loc 1 600 0
 1018              		.cfi_startproc
 1019 0000 90B5     		push	{r4, r7, lr}
 1020              		.cfi_def_cfa_offset 12
 1021              		.cfi_offset 4, -12
 1022              		.cfi_offset 7, -8
 1023              		.cfi_offset 14, -4
 1024 0002 85B0     		sub	sp, sp, #20
 1025              		.cfi_def_cfa_offset 32
 1026 0004 00AF     		add	r7, sp, #0
 1027              		.cfi_def_cfa_register 7
 1028 0006 7860     		str	r0, [r7, #4]
 601:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF;
 1029              		.loc 1 601 0
 1030 0008 3B1C     		mov	r3, r7
 1031 000a 0C33     		add	r3, r3, #12
 1032 000c 0122     		mov	r2, #1
 1033 000e 5242     		neg	r2, r2
 1034 0010 1A80     		strh	r2, [r3]
 1035 0012 3B1C     		mov	r3, r7
 1036 0014 0A33     		add	r3, r3, #10
 1037 0016 0122     		mov	r2, #1
 1038 0018 5242     		neg	r2, r2
 1039 001a 1A80     		strh	r2, [r3]
 602:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 603:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1040              		.loc 1 603 0
 1041 001c 3B1C     		mov	r3, r7
 1042 001e 0F33     		add	r3, r3, #15
 1043 0020 0422     		mov	r2, #4
 1044 0022 1A70     		strb	r2, [r3]
 604:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 605:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
 606:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
 1045              		.loc 1 606 0
 1046 0024 7B68     		ldr	r3, [r7, #4]
 1047 0026 002B     		cmp	r3, #0
 1048 0028 05D1     		bne	.L70
 1049              		.loc 1 606 0 is_stmt 0 discriminator 1
 1050 002a 344A     		ldr	r2, .L75
 1051 002c 344B     		ldr	r3, .L75+4
 1052 002e 101C     		mov	r0, r2
 1053 0030 191C     		mov	r1, r3
 1054 0032 FFF7FEFF 		bl	assert_failed
 1055              	.L70:
 607:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 608:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   OB_WRP = (uint32_t)(~OB_WRP);
 1056              		.loc 1 608 0 is_stmt 1
 1057 0036 7B68     		ldr	r3, [r7, #4]
 1058 0038 DB43     		mvn	r3, r3
 1059 003a 7B60     		str	r3, [r7, #4]
 609:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
 1060              		.loc 1 609 0
 1061 003c 7B68     		ldr	r3, [r7, #4]
 1062 003e 99B2     		uxth	r1, r3
 1063 0040 3B1C     		mov	r3, r7
 1064 0042 0C33     		add	r3, r3, #12
 1065 0044 FF22     		mov	r2, #255
 1066 0046 0A40     		and	r2, r1
 1067 0048 1A80     		strh	r2, [r3]
 610:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8);
 1068              		.loc 1 610 0
 1069 004a 7A68     		ldr	r2, [r7, #4]
 1070 004c FF23     		mov	r3, #255
 1071 004e 1B02     		lsl	r3, r3, #8
 1072 0050 1340     		and	r3, r2
 1073 0052 1A0A     		lsr	r2, r3, #8
 1074 0054 3B1C     		mov	r3, r7
 1075 0056 0A33     		add	r3, r3, #10
 1076 0058 1A80     		strh	r2, [r3]
 611:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 612:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Wait for last operation to be completed */
 613:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1077              		.loc 1 613 0
 1078 005a 3C1C     		mov	r4, r7
 1079 005c 0F34     		add	r4, r4, #15
 1080 005e B023     		mov	r3, #176
 1081 0060 1B03     		lsl	r3, r3, #12
 1082 0062 181C     		mov	r0, r3
 1083 0064 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1084 0068 031C     		mov	r3, r0
 1085 006a 2370     		strb	r3, [r4]
 614:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 615:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 1086              		.loc 1 615 0
 1087 006c 3B1C     		mov	r3, r7
 1088 006e 0F33     		add	r3, r3, #15
 1089 0070 1B78     		ldrb	r3, [r3]
 1090 0072 042B     		cmp	r3, #4
 1091 0074 3BD1     		bne	.L71
 616:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 617:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG;
 1092              		.loc 1 617 0
 1093 0076 234B     		ldr	r3, .L75+8
 1094 0078 224A     		ldr	r2, .L75+8
 1095 007a 1269     		ldr	r2, [r2, #16]
 1096 007c 1021     		mov	r1, #16
 1097 007e 0A43     		orr	r2, r1
 1098 0080 1A61     		str	r2, [r3, #16]
 618:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 619:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if(WRP0_Data != 0xFF)
 1099              		.loc 1 619 0
 1100 0082 3B1C     		mov	r3, r7
 1101 0084 0C33     		add	r3, r3, #12
 1102 0086 1B88     		ldrh	r3, [r3]
 1103 0088 FF2B     		cmp	r3, #255
 1104 008a 0DD0     		beq	.L72
 620:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 621:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       OB->WRP0 = WRP0_Data;
 1105              		.loc 1 621 0
 1106 008c 1E4B     		ldr	r3, .L75+12
 1107 008e 3A1C     		mov	r2, r7
 1108 0090 0C32     		add	r2, r2, #12
 1109 0092 1288     		ldrh	r2, [r2]
 1110 0094 1A81     		strh	r2, [r3, #8]
 622:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       
 623:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* Wait for last operation to be completed */
 624:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1111              		.loc 1 624 0
 1112 0096 3C1C     		mov	r4, r7
 1113 0098 0F34     		add	r4, r4, #15
 1114 009a B023     		mov	r3, #176
 1115 009c 1B03     		lsl	r3, r3, #12
 1116 009e 181C     		mov	r0, r3
 1117 00a0 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1118 00a4 031C     		mov	r3, r0
 1119 00a6 2370     		strb	r3, [r4]
 1120              	.L72:
 625:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 626:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 1121              		.loc 1 626 0
 1122 00a8 3B1C     		mov	r3, r7
 1123 00aa 0F33     		add	r3, r3, #15
 1124 00ac 1B78     		ldrb	r3, [r3]
 1125 00ae 042B     		cmp	r3, #4
 1126 00b0 12D1     		bne	.L73
 1127              		.loc 1 626 0 is_stmt 0 discriminator 1
 1128 00b2 3B1C     		mov	r3, r7
 1129 00b4 0A33     		add	r3, r3, #10
 1130 00b6 1B88     		ldrh	r3, [r3]
 1131 00b8 FF2B     		cmp	r3, #255
 1132 00ba 0DD0     		beq	.L73
 627:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 628:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       OB->WRP1 = WRP1_Data;
 1133              		.loc 1 628 0 is_stmt 1
 1134 00bc 124B     		ldr	r3, .L75+12
 1135 00be 3A1C     		mov	r2, r7
 1136 00c0 0A32     		add	r2, r2, #10
 1137 00c2 1288     		ldrh	r2, [r2]
 1138 00c4 5A81     		strh	r2, [r3, #10]
 629:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       
 630:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* Wait for last operation to be completed */
 631:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1139              		.loc 1 631 0
 1140 00c6 3C1C     		mov	r4, r7
 1141 00c8 0F34     		add	r4, r4, #15
 1142 00ca B023     		mov	r3, #176
 1143 00cc 1B03     		lsl	r3, r3, #12
 1144 00ce 181C     		mov	r0, r3
 1145 00d0 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1146 00d4 031C     		mov	r3, r0
 1147 00d6 2370     		strb	r3, [r4]
 1148              	.L73:
 632:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 633:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****           
 634:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if(status != FLASH_TIMEOUT)
 1149              		.loc 1 634 0
 1150 00d8 3B1C     		mov	r3, r7
 1151 00da 0F33     		add	r3, r3, #15
 1152 00dc 1B78     		ldrb	r3, [r3]
 1153 00de 052B     		cmp	r3, #5
 1154 00e0 05D0     		beq	.L71
 635:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 636:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 637:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 1155              		.loc 1 637 0
 1156 00e2 084B     		ldr	r3, .L75+8
 1157 00e4 074A     		ldr	r2, .L75+8
 1158 00e6 1269     		ldr	r2, [r2, #16]
 1159 00e8 1021     		mov	r1, #16
 1160 00ea 8A43     		bic	r2, r1
 1161 00ec 1A61     		str	r2, [r3, #16]
 1162              	.L71:
 638:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 639:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   } 
 640:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the write protection operation Status */
 641:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 1163              		.loc 1 641 0
 1164 00ee 3B1C     		mov	r3, r7
 1165 00f0 0F33     		add	r3, r3, #15
 1166 00f2 1B78     		ldrb	r3, [r3]
 642:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 1167              		.loc 1 642 0
 1168 00f4 181C     		mov	r0, r3
 1169 00f6 BD46     		mov	sp, r7
 1170 00f8 05B0     		add	sp, sp, #20
 1171              		@ sp needed
 1172 00fa 90BD     		pop	{r4, r7, pc}
 1173              	.L76:
 1174              		.align	2
 1175              	.L75:
 1176 00fc 00000000 		.word	.LC0
 1177 0100 5E020000 		.word	606
 1178 0104 00200240 		.word	1073881088
 1179 0108 00F8FF1F 		.word	536868864
 1180              		.cfi_endproc
 1181              	.LFE45:
 1183              		.section	.text.FLASH_OB_RDPConfig,"ax",%progbits
 1184              		.align	2
 1185              		.global	FLASH_OB_RDPConfig
 1186              		.code	16
 1187              		.thumb_func
 1189              	FLASH_OB_RDPConfig:
 1190              	.LFB46:
 643:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 644:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 645:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Enables or disables the read out protection.
 646:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @note    To correctly run this function, the FLASH_OB_Unlock() function
 647:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *           must be called before.
 648:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          Call the FLASH_OB_Lock() to disable the flash control register access and the option b
 649:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)
 650:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  FLASH_ReadProtection_Level: specifies the read protection level. 
 651:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *   This parameter can be:
 652:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *     @arg OB_RDP_Level_0: No protection
 653:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *     @arg OB_RDP_Level_1: Read protection of the memory
 654:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *     @arg OB_RDP_Level_2: Chip protection
 655:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Status: The returned value can be: 
 656:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 657:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 658:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP)
 659:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 1191              		.loc 1 659 0
 1192              		.cfi_startproc
 1193 0000 90B5     		push	{r4, r7, lr}
 1194              		.cfi_def_cfa_offset 12
 1195              		.cfi_offset 4, -12
 1196              		.cfi_offset 7, -8
 1197              		.cfi_offset 14, -4
 1198 0002 85B0     		sub	sp, sp, #20
 1199              		.cfi_def_cfa_offset 32
 1200 0004 00AF     		add	r7, sp, #0
 1201              		.cfi_def_cfa_register 7
 1202 0006 021C     		mov	r2, r0
 1203 0008 FB1D     		add	r3, r7, #7
 1204 000a 1A70     		strb	r2, [r3]
 660:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1205              		.loc 1 660 0
 1206 000c 3B1C     		mov	r3, r7
 1207 000e 0F33     		add	r3, r3, #15
 1208 0010 0422     		mov	r2, #4
 1209 0012 1A70     		strb	r2, [r3]
 661:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 662:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
 663:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_OB_RDP(OB_RDP));
 1210              		.loc 1 663 0
 1211 0014 FB1D     		add	r3, r7, #7
 1212 0016 1B78     		ldrb	r3, [r3]
 1213 0018 AA2B     		cmp	r3, #170
 1214 001a 09D0     		beq	.L78
 1215              		.loc 1 663 0 is_stmt 0 discriminator 1
 1216 001c FB1D     		add	r3, r7, #7
 1217 001e 1B78     		ldrb	r3, [r3]
 1218 0020 BB2B     		cmp	r3, #187
 1219 0022 05D0     		beq	.L78
 1220 0024 324A     		ldr	r2, .L83
 1221 0026 334B     		ldr	r3, .L83+4
 1222 0028 101C     		mov	r0, r2
 1223 002a 191C     		mov	r1, r3
 1224 002c FFF7FEFF 		bl	assert_failed
 1225              	.L78:
 664:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1226              		.loc 1 664 0 is_stmt 1
 1227 0030 3C1C     		mov	r4, r7
 1228 0032 0F34     		add	r4, r4, #15
 1229 0034 B023     		mov	r3, #176
 1230 0036 1B03     		lsl	r3, r3, #12
 1231 0038 181C     		mov	r0, r3
 1232 003a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1233 003e 031C     		mov	r3, r0
 1234 0040 2370     		strb	r3, [r4]
 665:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 666:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 1235              		.loc 1 666 0
 1236 0042 3B1C     		mov	r3, r7
 1237 0044 0F33     		add	r3, r3, #15
 1238 0046 1B78     		ldrb	r3, [r3]
 1239 0048 042B     		cmp	r3, #4
 1240 004a 4AD1     		bne	.L79
 667:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 668:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_OPTER;
 1241              		.loc 1 668 0
 1242 004c 2A4B     		ldr	r3, .L83+8
 1243 004e 2A4A     		ldr	r2, .L83+8
 1244 0050 1269     		ldr	r2, [r2, #16]
 1245 0052 2021     		mov	r1, #32
 1246 0054 0A43     		orr	r2, r1
 1247 0056 1A61     		str	r2, [r3, #16]
 669:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 1248              		.loc 1 669 0
 1249 0058 274B     		ldr	r3, .L83+8
 1250 005a 274A     		ldr	r2, .L83+8
 1251 005c 1269     		ldr	r2, [r2, #16]
 1252 005e 4021     		mov	r1, #64
 1253 0060 0A43     		orr	r2, r1
 1254 0062 1A61     		str	r2, [r3, #16]
 670:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 671:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Wait for last operation to be completed */
 672:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1255              		.loc 1 672 0
 1256 0064 3C1C     		mov	r4, r7
 1257 0066 0F34     		add	r4, r4, #15
 1258 0068 B023     		mov	r3, #176
 1259 006a 1B03     		lsl	r3, r3, #12
 1260 006c 181C     		mov	r0, r3
 1261 006e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1262 0072 031C     		mov	r3, r0
 1263 0074 2370     		strb	r3, [r4]
 673:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 674:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if(status == FLASH_COMPLETE)
 1264              		.loc 1 674 0
 1265 0076 3B1C     		mov	r3, r7
 1266 0078 0F33     		add	r3, r3, #15
 1267 007a 1B78     		ldrb	r3, [r3]
 1268 007c 042B     		cmp	r3, #4
 1269 007e 25D1     		bne	.L80
 675:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 676:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* If the erase operation is completed, disable the OPTER Bit */
 677:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTER;
 1270              		.loc 1 677 0
 1271 0080 1D4B     		ldr	r3, .L83+8
 1272 0082 1D4A     		ldr	r2, .L83+8
 1273 0084 1269     		ldr	r2, [r2, #16]
 1274 0086 2021     		mov	r1, #32
 1275 0088 8A43     		bic	r2, r1
 1276 008a 1A61     		str	r2, [r3, #16]
 678:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       
 679:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* Enable the Option Bytes Programming operation */
 680:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR |= FLASH_CR_OPTPG;
 1277              		.loc 1 680 0
 1278 008c 1A4B     		ldr	r3, .L83+8
 1279 008e 1A4A     		ldr	r2, .L83+8
 1280 0090 1269     		ldr	r2, [r2, #16]
 1281 0092 1021     		mov	r1, #16
 1282 0094 0A43     		orr	r2, r1
 1283 0096 1A61     		str	r2, [r3, #16]
 681:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****        
 682:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       OB->RDP = OB_RDP;
 1284              		.loc 1 682 0
 1285 0098 184B     		ldr	r3, .L83+12
 1286 009a FA1D     		add	r2, r7, #7
 1287 009c 1278     		ldrb	r2, [r2]
 1288 009e 92B2     		uxth	r2, r2
 1289 00a0 1A80     		strh	r2, [r3]
 683:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 684:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* Wait for last operation to be completed */
 685:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
 1290              		.loc 1 685 0
 1291 00a2 3C1C     		mov	r4, r7
 1292 00a4 0F34     		add	r4, r4, #15
 1293 00a6 B023     		mov	r3, #176
 1294 00a8 1B03     		lsl	r3, r3, #12
 1295 00aa 181C     		mov	r0, r3
 1296 00ac FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1297 00b0 031C     		mov	r3, r0
 1298 00b2 2370     		strb	r3, [r4]
 686:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 687:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       if(status != FLASH_TIMEOUT)
 1299              		.loc 1 687 0
 1300 00b4 3B1C     		mov	r3, r7
 1301 00b6 0F33     		add	r3, r3, #15
 1302 00b8 1B78     		ldrb	r3, [r3]
 1303 00ba 052B     		cmp	r3, #5
 1304 00bc 11D0     		beq	.L79
 688:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       {
 689:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         /* if the program operation is completed, disable the OPTPG Bit */
 690:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         FLASH->CR &= ~FLASH_CR_OPTPG;
 1305              		.loc 1 690 0
 1306 00be 0E4B     		ldr	r3, .L83+8
 1307 00c0 0D4A     		ldr	r2, .L83+8
 1308 00c2 1269     		ldr	r2, [r2, #16]
 1309 00c4 1021     		mov	r1, #16
 1310 00c6 8A43     		bic	r2, r1
 1311 00c8 1A61     		str	r2, [r3, #16]
 1312 00ca 0AE0     		b	.L79
 1313              	.L80:
 691:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       }
 692:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 693:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     else 
 694:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 695:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       if(status != FLASH_TIMEOUT)
 1314              		.loc 1 695 0
 1315 00cc 3B1C     		mov	r3, r7
 1316 00ce 0F33     		add	r3, r3, #15
 1317 00d0 1B78     		ldrb	r3, [r3]
 1318 00d2 052B     		cmp	r3, #5
 1319 00d4 05D0     		beq	.L79
 696:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       {
 697:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         /* Disable the OPTER Bit */
 698:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         FLASH->CR &= ~FLASH_CR_OPTER;
 1320              		.loc 1 698 0
 1321 00d6 084B     		ldr	r3, .L83+8
 1322 00d8 074A     		ldr	r2, .L83+8
 1323 00da 1269     		ldr	r2, [r2, #16]
 1324 00dc 2021     		mov	r1, #32
 1325 00de 8A43     		bic	r2, r1
 1326 00e0 1A61     		str	r2, [r3, #16]
 1327              	.L79:
 699:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       }
 700:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 701:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 702:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the protection operation Status */
 703:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 1328              		.loc 1 703 0
 1329 00e2 3B1C     		mov	r3, r7
 1330 00e4 0F33     		add	r3, r3, #15
 1331 00e6 1B78     		ldrb	r3, [r3]
 704:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 1332              		.loc 1 704 0
 1333 00e8 181C     		mov	r0, r3
 1334 00ea BD46     		mov	sp, r7
 1335 00ec 05B0     		add	sp, sp, #20
 1336              		@ sp needed
 1337 00ee 90BD     		pop	{r4, r7, pc}
 1338              	.L84:
 1339              		.align	2
 1340              	.L83:
 1341 00f0 00000000 		.word	.LC0
 1342 00f4 97020000 		.word	663
 1343 00f8 00200240 		.word	1073881088
 1344 00fc 00F8FF1F 		.word	536868864
 1345              		.cfi_endproc
 1346              	.LFE46:
 1348              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 1349              		.align	2
 1350              		.global	FLASH_OB_UserConfig
 1351              		.code	16
 1352              		.thumb_func
 1354              	FLASH_OB_UserConfig:
 1355              	.LFB47:
 705:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 706:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 707:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.
 708:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @note    To correctly run this function, the FLASH_OB_Unlock() function
 709:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *           must be called before.
 710:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          Call the FLASH_OB_Lock() to disable the flash control register access and the option b
 711:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)
 712:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  OB_IWDG: Selects the WDG mode
 713:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         This parameter can be one of the following values:
 714:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_IWDG_SW: Software WDG selected
 715:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_IWDG_HW: Hardware WDG selected
 716:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  OB_STOP: Reset event when entering STOP mode.
 717:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         This parameter can be one of the following values:
 718:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_STOP_NoRST: No reset generated when entering in STOP
 719:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_STOP_RST: Reset generated when entering in STOP
 720:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  OB_STDBY: Reset event when entering Standby mode.
 721:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         This parameter can be one of the following values:
 722:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
 723:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_STDBY_RST: Reset generated when entering in STANDBY
 724:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Status: The returned value can be: 
 725:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 726:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 727:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
 728:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 1356              		.loc 1 728 0
 1357              		.cfi_startproc
 1358 0000 90B5     		push	{r4, r7, lr}
 1359              		.cfi_def_cfa_offset 12
 1360              		.cfi_offset 4, -12
 1361              		.cfi_offset 7, -8
 1362              		.cfi_offset 14, -4
 1363 0002 85B0     		sub	sp, sp, #20
 1364              		.cfi_def_cfa_offset 32
 1365 0004 00AF     		add	r7, sp, #0
 1366              		.cfi_def_cfa_register 7
 1367 0006 FB1D     		add	r3, r7, #7
 1368 0008 1870     		strb	r0, [r3]
 1369 000a BB1D     		add	r3, r7, #6
 1370 000c 1970     		strb	r1, [r3]
 1371 000e 7B1D     		add	r3, r7, #5
 1372 0010 1A70     		strb	r2, [r3]
 729:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1373              		.loc 1 729 0
 1374 0012 3B1C     		mov	r3, r7
 1375 0014 0F33     		add	r3, r3, #15
 1376 0016 0422     		mov	r2, #4
 1377 0018 1A70     		strb	r2, [r3]
 730:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 731:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
 732:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
 1378              		.loc 1 732 0
 1379 001a FB1D     		add	r3, r7, #7
 1380 001c 1B78     		ldrb	r3, [r3]
 1381 001e 012B     		cmp	r3, #1
 1382 0020 0AD0     		beq	.L86
 1383              		.loc 1 732 0 is_stmt 0 discriminator 1
 1384 0022 FB1D     		add	r3, r7, #7
 1385 0024 1B78     		ldrb	r3, [r3]
 1386 0026 002B     		cmp	r3, #0
 1387 0028 06D0     		beq	.L86
 1388 002a 314A     		ldr	r2, .L91
 1389 002c B723     		mov	r3, #183
 1390 002e 9B00     		lsl	r3, r3, #2
 1391 0030 101C     		mov	r0, r2
 1392 0032 191C     		mov	r1, r3
 1393 0034 FFF7FEFF 		bl	assert_failed
 1394              	.L86:
 733:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
 1395              		.loc 1 733 0 is_stmt 1
 1396 0038 BB1D     		add	r3, r7, #6
 1397 003a 1B78     		ldrb	r3, [r3]
 1398 003c 022B     		cmp	r3, #2
 1399 003e 09D0     		beq	.L87
 1400              		.loc 1 733 0 is_stmt 0 discriminator 1
 1401 0040 BB1D     		add	r3, r7, #6
 1402 0042 1B78     		ldrb	r3, [r3]
 1403 0044 002B     		cmp	r3, #0
 1404 0046 05D0     		beq	.L87
 1405 0048 294A     		ldr	r2, .L91
 1406 004a 2A4B     		ldr	r3, .L91+4
 1407 004c 101C     		mov	r0, r2
 1408 004e 191C     		mov	r1, r3
 1409 0050 FFF7FEFF 		bl	assert_failed
 1410              	.L87:
 734:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
 1411              		.loc 1 734 0 is_stmt 1
 1412 0054 7B1D     		add	r3, r7, #5
 1413 0056 1B78     		ldrb	r3, [r3]
 1414 0058 042B     		cmp	r3, #4
 1415 005a 09D0     		beq	.L88
 1416              		.loc 1 734 0 is_stmt 0 discriminator 1
 1417 005c 7B1D     		add	r3, r7, #5
 1418 005e 1B78     		ldrb	r3, [r3]
 1419 0060 002B     		cmp	r3, #0
 1420 0062 05D0     		beq	.L88
 1421 0064 224A     		ldr	r2, .L91
 1422 0066 244B     		ldr	r3, .L91+8
 1423 0068 101C     		mov	r0, r2
 1424 006a 191C     		mov	r1, r3
 1425 006c FFF7FEFF 		bl	assert_failed
 1426              	.L88:
 735:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 736:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Wait for last operation to be completed */
 737:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1427              		.loc 1 737 0 is_stmt 1
 1428 0070 3C1C     		mov	r4, r7
 1429 0072 0F34     		add	r4, r4, #15
 1430 0074 B023     		mov	r3, #176
 1431 0076 1B03     		lsl	r3, r3, #12
 1432 0078 181C     		mov	r0, r3
 1433 007a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1434 007e 031C     		mov	r3, r0
 1435 0080 2370     		strb	r3, [r4]
 738:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 739:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 1436              		.loc 1 739 0
 1437 0082 3B1C     		mov	r3, r7
 1438 0084 0F33     		add	r3, r3, #15
 1439 0086 1B78     		ldrb	r3, [r3]
 1440 0088 042B     		cmp	r3, #4
 1441 008a 29D1     		bne	.L89
 740:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 741:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Enable the Option Bytes Programming operation */
 742:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 1442              		.loc 1 742 0
 1443 008c 1B4B     		ldr	r3, .L91+12
 1444 008e 1B4A     		ldr	r2, .L91+12
 1445 0090 1269     		ldr	r2, [r2, #16]
 1446 0092 1021     		mov	r1, #16
 1447 0094 0A43     		orr	r2, r1
 1448 0096 1A61     		str	r2, [r3, #16]
 743:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 744:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     OB->USER = (uint16_t)((uint16_t)(OB_IWDG | OB_STOP) | (uint16_t)(OB_STDBY | 0xF8));
 1449              		.loc 1 744 0
 1450 0098 194B     		ldr	r3, .L91+16
 1451 009a F91D     		add	r1, r7, #7
 1452 009c BA1D     		add	r2, r7, #6
 1453 009e 0978     		ldrb	r1, [r1]
 1454 00a0 1278     		ldrb	r2, [r2]
 1455 00a2 0A43     		orr	r2, r1
 1456 00a4 D1B2     		uxtb	r1, r2
 1457 00a6 7A1D     		add	r2, r7, #5
 1458 00a8 1278     		ldrb	r2, [r2]
 1459 00aa 0A43     		orr	r2, r1
 1460 00ac D2B2     		uxtb	r2, r2
 1461 00ae 0821     		mov	r1, #8
 1462 00b0 4942     		neg	r1, r1
 1463 00b2 0A43     		orr	r2, r1
 1464 00b4 D2B2     		uxtb	r2, r2
 1465 00b6 5A80     		strh	r2, [r3, #2]
 745:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 746:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Wait for last operation to be completed */
 747:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1466              		.loc 1 747 0
 1467 00b8 3C1C     		mov	r4, r7
 1468 00ba 0F34     		add	r4, r4, #15
 1469 00bc B023     		mov	r3, #176
 1470 00be 1B03     		lsl	r3, r3, #12
 1471 00c0 181C     		mov	r0, r3
 1472 00c2 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1473 00c6 031C     		mov	r3, r0
 1474 00c8 2370     		strb	r3, [r4]
 748:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 749:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if(status != FLASH_TIMEOUT)
 1475              		.loc 1 749 0
 1476 00ca 3B1C     		mov	r3, r7
 1477 00cc 0F33     		add	r3, r3, #15
 1478 00ce 1B78     		ldrb	r3, [r3]
 1479 00d0 052B     		cmp	r3, #5
 1480 00d2 05D0     		beq	.L89
 750:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 751:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* If the program operation is completed, disable the OPTPG Bit */
 752:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 1481              		.loc 1 752 0
 1482 00d4 094B     		ldr	r3, .L91+12
 1483 00d6 094A     		ldr	r2, .L91+12
 1484 00d8 1269     		ldr	r2, [r2, #16]
 1485 00da 1021     		mov	r1, #16
 1486 00dc 8A43     		bic	r2, r1
 1487 00de 1A61     		str	r2, [r3, #16]
 1488              	.L89:
 753:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 754:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }    
 755:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the Option Byte program Status */
 756:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 1489              		.loc 1 756 0
 1490 00e0 3B1C     		mov	r3, r7
 1491 00e2 0F33     		add	r3, r3, #15
 1492 00e4 1B78     		ldrb	r3, [r3]
 757:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 1493              		.loc 1 757 0
 1494 00e6 181C     		mov	r0, r3
 1495 00e8 BD46     		mov	sp, r7
 1496 00ea 05B0     		add	sp, sp, #20
 1497              		@ sp needed
 1498 00ec 90BD     		pop	{r4, r7, pc}
 1499              	.L92:
 1500 00ee C046     		.align	2
 1501              	.L91:
 1502 00f0 00000000 		.word	.LC0
 1503 00f4 DD020000 		.word	733
 1504 00f8 DE020000 		.word	734
 1505 00fc 00200240 		.word	1073881088
 1506 0100 00F8FF1F 		.word	536868864
 1507              		.cfi_endproc
 1508              	.LFE47:
 1510              		.section	.text.FLASH_OB_BOOTConfig,"ax",%progbits
 1511              		.align	2
 1512              		.global	FLASH_OB_BOOTConfig
 1513              		.code	16
 1514              		.thumb_func
 1516              	FLASH_OB_BOOTConfig:
 1517              	.LFB48:
 758:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 759:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 760:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Sets or resets the BOOT1.
 761:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  OB_BOOT1: Set or Reset the BOOT1.
 762:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         This parameter can be one of the following values:
 763:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_BOOT1_RESET: BOOT1 Reset
 764:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_BOOT1_SET: BOOT1 Set
 765:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval None
 766:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 767:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
 768:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 1518              		.loc 1 768 0
 1519              		.cfi_startproc
 1520 0000 90B5     		push	{r4, r7, lr}
 1521              		.cfi_def_cfa_offset 12
 1522              		.cfi_offset 4, -12
 1523              		.cfi_offset 7, -8
 1524              		.cfi_offset 14, -4
 1525 0002 85B0     		sub	sp, sp, #20
 1526              		.cfi_def_cfa_offset 32
 1527 0004 00AF     		add	r7, sp, #0
 1528              		.cfi_def_cfa_register 7
 1529 0006 021C     		mov	r2, r0
 1530 0008 FB1D     		add	r3, r7, #7
 1531 000a 1A70     		strb	r2, [r3]
 769:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1532              		.loc 1 769 0
 1533 000c 3B1C     		mov	r3, r7
 1534 000e 0F33     		add	r3, r3, #15
 1535 0010 0422     		mov	r2, #4
 1536 0012 1A70     		strb	r2, [r3]
 770:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 771:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
 772:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_OB_BOOT1(OB_BOOT1));
 1537              		.loc 1 772 0
 1538 0014 FB1D     		add	r3, r7, #7
 1539 0016 1B78     		ldrb	r3, [r3]
 1540 0018 002B     		cmp	r3, #0
 1541 001a 0AD0     		beq	.L94
 1542              		.loc 1 772 0 is_stmt 0 discriminator 1
 1543 001c FB1D     		add	r3, r7, #7
 1544 001e 1B78     		ldrb	r3, [r3]
 1545 0020 102B     		cmp	r3, #16
 1546 0022 06D0     		beq	.L94
 1547 0024 1E4A     		ldr	r2, .L97
 1548 0026 C123     		mov	r3, #193
 1549 0028 9B00     		lsl	r3, r3, #2
 1550 002a 101C     		mov	r0, r2
 1551 002c 191C     		mov	r1, r3
 1552 002e FFF7FEFF 		bl	assert_failed
 1553              	.L94:
 773:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 774:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Wait for last operation to be completed */
 775:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1554              		.loc 1 775 0 is_stmt 1
 1555 0032 3C1C     		mov	r4, r7
 1556 0034 0F34     		add	r4, r4, #15
 1557 0036 B023     		mov	r3, #176
 1558 0038 1B03     		lsl	r3, r3, #12
 1559 003a 181C     		mov	r0, r3
 1560 003c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1561 0040 031C     		mov	r3, r0
 1562 0042 2370     		strb	r3, [r4]
 776:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 777:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 1563              		.loc 1 777 0
 1564 0044 3B1C     		mov	r3, r7
 1565 0046 0F33     		add	r3, r3, #15
 1566 0048 1B78     		ldrb	r3, [r3]
 1567 004a 042B     		cmp	r3, #4
 1568 004c 21D1     		bne	.L95
 778:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {  
 779:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Enable the Option Bytes Programming operation */
 780:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG;
 1569              		.loc 1 780 0
 1570 004e 154B     		ldr	r3, .L97+4
 1571 0050 144A     		ldr	r2, .L97+4
 1572 0052 1269     		ldr	r2, [r2, #16]
 1573 0054 1021     		mov	r1, #16
 1574 0056 0A43     		orr	r2, r1
 1575 0058 1A61     		str	r2, [r3, #16]
 781:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 782:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     OB->USER = OB_BOOT1 | 0xEF;
 1576              		.loc 1 782 0
 1577 005a 134B     		ldr	r3, .L97+8
 1578 005c FA1D     		add	r2, r7, #7
 1579 005e 1278     		ldrb	r2, [r2]
 1580 0060 1121     		mov	r1, #17
 1581 0062 4942     		neg	r1, r1
 1582 0064 0A43     		orr	r2, r1
 1583 0066 D2B2     		uxtb	r2, r2
 1584 0068 5A80     		strh	r2, [r3, #2]
 783:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 784:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Wait for last operation to be completed */
 785:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1585              		.loc 1 785 0
 1586 006a 3C1C     		mov	r4, r7
 1587 006c 0F34     		add	r4, r4, #15
 1588 006e B023     		mov	r3, #176
 1589 0070 1B03     		lsl	r3, r3, #12
 1590 0072 181C     		mov	r0, r3
 1591 0074 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1592 0078 031C     		mov	r3, r0
 1593 007a 2370     		strb	r3, [r4]
 786:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 787:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if(status != FLASH_TIMEOUT)
 1594              		.loc 1 787 0
 1595 007c 3B1C     		mov	r3, r7
 1596 007e 0F33     		add	r3, r3, #15
 1597 0080 1B78     		ldrb	r3, [r3]
 1598 0082 052B     		cmp	r3, #5
 1599 0084 05D0     		beq	.L95
 788:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 789:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* If the program operation is completed, disable the OPTPG Bit */
 790:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 1600              		.loc 1 790 0
 1601 0086 074B     		ldr	r3, .L97+4
 1602 0088 064A     		ldr	r2, .L97+4
 1603 008a 1269     		ldr	r2, [r2, #16]
 1604 008c 1021     		mov	r1, #16
 1605 008e 8A43     		bic	r2, r1
 1606 0090 1A61     		str	r2, [r3, #16]
 1607              	.L95:
 791:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 792:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 793:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the Option Byte program Status */
 794:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 1608              		.loc 1 794 0
 1609 0092 3B1C     		mov	r3, r7
 1610 0094 0F33     		add	r3, r3, #15
 1611 0096 1B78     		ldrb	r3, [r3]
 795:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 1612              		.loc 1 795 0
 1613 0098 181C     		mov	r0, r3
 1614 009a BD46     		mov	sp, r7
 1615 009c 05B0     		add	sp, sp, #20
 1616              		@ sp needed
 1617 009e 90BD     		pop	{r4, r7, pc}
 1618              	.L98:
 1619              		.align	2
 1620              	.L97:
 1621 00a0 00000000 		.word	.LC0
 1622 00a4 00200240 		.word	1073881088
 1623 00a8 00F8FF1F 		.word	536868864
 1624              		.cfi_endproc
 1625              	.LFE48:
 1627              		.section	.text.FLASH_OB_VDDAConfig,"ax",%progbits
 1628              		.align	2
 1629              		.global	FLASH_OB_VDDAConfig
 1630              		.code	16
 1631              		.thumb_func
 1633              	FLASH_OB_VDDAConfig:
 1634              	.LFB49:
 796:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 797:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 798:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Sets or resets the analogue monitoring on VDDA Power source.
 799:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  OB_VDDA_ANALOG: Selects the analog monitoring on VDDA Power source.
 800:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         This parameter can be one of the following values:
 801:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_VDDA_ANALOG_ON: Analog monitoring on VDDA Power source ON
 802:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source OFF
 803:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval None
 804:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 805:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG)
 806:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 1635              		.loc 1 806 0
 1636              		.cfi_startproc
 1637 0000 90B5     		push	{r4, r7, lr}
 1638              		.cfi_def_cfa_offset 12
 1639              		.cfi_offset 4, -12
 1640              		.cfi_offset 7, -8
 1641              		.cfi_offset 14, -4
 1642 0002 85B0     		sub	sp, sp, #20
 1643              		.cfi_def_cfa_offset 32
 1644 0004 00AF     		add	r7, sp, #0
 1645              		.cfi_def_cfa_register 7
 1646 0006 021C     		mov	r2, r0
 1647 0008 FB1D     		add	r3, r7, #7
 1648 000a 1A70     		strb	r2, [r3]
 807:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1649              		.loc 1 807 0
 1650 000c 3B1C     		mov	r3, r7
 1651 000e 0F33     		add	r3, r3, #15
 1652 0010 0422     		mov	r2, #4
 1653 0012 1A70     		strb	r2, [r3]
 808:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 809:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
 810:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));
 1654              		.loc 1 810 0
 1655 0014 FB1D     		add	r3, r7, #7
 1656 0016 1B78     		ldrb	r3, [r3]
 1657 0018 002B     		cmp	r3, #0
 1658 001a 09D0     		beq	.L100
 1659              		.loc 1 810 0 is_stmt 0 discriminator 1
 1660 001c FB1D     		add	r3, r7, #7
 1661 001e 1B78     		ldrb	r3, [r3]
 1662 0020 202B     		cmp	r3, #32
 1663 0022 05D0     		beq	.L100
 1664 0024 1E4A     		ldr	r2, .L103
 1665 0026 1F4B     		ldr	r3, .L103+4
 1666 0028 101C     		mov	r0, r2
 1667 002a 191C     		mov	r1, r3
 1668 002c FFF7FEFF 		bl	assert_failed
 1669              	.L100:
 811:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 812:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Wait for last operation to be completed */
 813:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1670              		.loc 1 813 0 is_stmt 1
 1671 0030 3C1C     		mov	r4, r7
 1672 0032 0F34     		add	r4, r4, #15
 1673 0034 B023     		mov	r3, #176
 1674 0036 1B03     		lsl	r3, r3, #12
 1675 0038 181C     		mov	r0, r3
 1676 003a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1677 003e 031C     		mov	r3, r0
 1678 0040 2370     		strb	r3, [r4]
 814:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 815:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 1679              		.loc 1 815 0
 1680 0042 3B1C     		mov	r3, r7
 1681 0044 0F33     		add	r3, r3, #15
 1682 0046 1B78     		ldrb	r3, [r3]
 1683 0048 042B     		cmp	r3, #4
 1684 004a 21D1     		bne	.L101
 816:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {  
 817:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Enable the Option Bytes Programming operation */
 818:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 1685              		.loc 1 818 0
 1686 004c 164B     		ldr	r3, .L103+8
 1687 004e 164A     		ldr	r2, .L103+8
 1688 0050 1269     		ldr	r2, [r2, #16]
 1689 0052 1021     		mov	r1, #16
 1690 0054 0A43     		orr	r2, r1
 1691 0056 1A61     		str	r2, [r3, #16]
 819:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 820:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     OB->USER = OB_VDDA_ANALOG | 0xDF;
 1692              		.loc 1 820 0
 1693 0058 144B     		ldr	r3, .L103+12
 1694 005a FA1D     		add	r2, r7, #7
 1695 005c 1278     		ldrb	r2, [r2]
 1696 005e 2121     		mov	r1, #33
 1697 0060 4942     		neg	r1, r1
 1698 0062 0A43     		orr	r2, r1
 1699 0064 D2B2     		uxtb	r2, r2
 1700 0066 5A80     		strh	r2, [r3, #2]
 821:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 822:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Wait for last operation to be completed */
 823:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1701              		.loc 1 823 0
 1702 0068 3C1C     		mov	r4, r7
 1703 006a 0F34     		add	r4, r4, #15
 1704 006c B023     		mov	r3, #176
 1705 006e 1B03     		lsl	r3, r3, #12
 1706 0070 181C     		mov	r0, r3
 1707 0072 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1708 0076 031C     		mov	r3, r0
 1709 0078 2370     		strb	r3, [r4]
 824:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 825:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if(status != FLASH_TIMEOUT)
 1710              		.loc 1 825 0
 1711 007a 3B1C     		mov	r3, r7
 1712 007c 0F33     		add	r3, r3, #15
 1713 007e 1B78     		ldrb	r3, [r3]
 1714 0080 052B     		cmp	r3, #5
 1715 0082 05D0     		beq	.L101
 826:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 827:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 828:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 1716              		.loc 1 828 0
 1717 0084 084B     		ldr	r3, .L103+8
 1718 0086 084A     		ldr	r2, .L103+8
 1719 0088 1269     		ldr	r2, [r2, #16]
 1720 008a 1021     		mov	r1, #16
 1721 008c 8A43     		bic	r2, r1
 1722 008e 1A61     		str	r2, [r3, #16]
 1723              	.L101:
 829:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 830:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 831:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the Option Byte program Status */
 832:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 1724              		.loc 1 832 0
 1725 0090 3B1C     		mov	r3, r7
 1726 0092 0F33     		add	r3, r3, #15
 1727 0094 1B78     		ldrb	r3, [r3]
 833:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 1728              		.loc 1 833 0
 1729 0096 181C     		mov	r0, r3
 1730 0098 BD46     		mov	sp, r7
 1731 009a 05B0     		add	sp, sp, #20
 1732              		@ sp needed
 1733 009c 90BD     		pop	{r4, r7, pc}
 1734              	.L104:
 1735 009e C046     		.align	2
 1736              	.L103:
 1737 00a0 00000000 		.word	.LC0
 1738 00a4 2A030000 		.word	810
 1739 00a8 00200240 		.word	1073881088
 1740 00ac 00F8FF1F 		.word	536868864
 1741              		.cfi_endproc
 1742              	.LFE49:
 1744              		.section	.text.FLASH_OB_SRAMParityConfig,"ax",%progbits
 1745              		.align	2
 1746              		.global	FLASH_OB_SRAMParityConfig
 1747              		.code	16
 1748              		.thumb_func
 1750              	FLASH_OB_SRAMParityConfig:
 1751              	.LFB50:
 834:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 835:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 836:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Sets or resets the SRAM parity.
 837:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  OB_SRAM_Parity: Set or Reset the SRAM parity enable bit.
 838:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         This parameter can be one of the following values:
 839:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_SRAM_PARITY_SET: Set SRAM parity.
 840:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_SRAM_PARITY_RESET: Reset SRAM parity.
 841:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval None
 842:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 843:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_OB_SRAMParityConfig(uint8_t OB_SRAM_Parity)
 844:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 1752              		.loc 1 844 0
 1753              		.cfi_startproc
 1754 0000 90B5     		push	{r4, r7, lr}
 1755              		.cfi_def_cfa_offset 12
 1756              		.cfi_offset 4, -12
 1757              		.cfi_offset 7, -8
 1758              		.cfi_offset 14, -4
 1759 0002 85B0     		sub	sp, sp, #20
 1760              		.cfi_def_cfa_offset 32
 1761 0004 00AF     		add	r7, sp, #0
 1762              		.cfi_def_cfa_register 7
 1763 0006 021C     		mov	r2, r0
 1764 0008 FB1D     		add	r3, r7, #7
 1765 000a 1A70     		strb	r2, [r3]
 845:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1766              		.loc 1 845 0
 1767 000c 3B1C     		mov	r3, r7
 1768 000e 0F33     		add	r3, r3, #15
 1769 0010 0422     		mov	r2, #4
 1770 0012 1A70     		strb	r2, [r3]
 846:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 847:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
 848:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_OB_SRAM_PARITY(OB_SRAM_Parity));
 1771              		.loc 1 848 0
 1772 0014 FB1D     		add	r3, r7, #7
 1773 0016 1B78     		ldrb	r3, [r3]
 1774 0018 002B     		cmp	r3, #0
 1775 001a 0AD0     		beq	.L106
 1776              		.loc 1 848 0 is_stmt 0 discriminator 1
 1777 001c FB1D     		add	r3, r7, #7
 1778 001e 1B78     		ldrb	r3, [r3]
 1779 0020 402B     		cmp	r3, #64
 1780 0022 06D0     		beq	.L106
 1781 0024 1E4A     		ldr	r2, .L109
 1782 0026 D423     		mov	r3, #212
 1783 0028 9B00     		lsl	r3, r3, #2
 1784 002a 101C     		mov	r0, r2
 1785 002c 191C     		mov	r1, r3
 1786 002e FFF7FEFF 		bl	assert_failed
 1787              	.L106:
 849:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 850:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Wait for last operation to be completed */
 851:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1788              		.loc 1 851 0 is_stmt 1
 1789 0032 3C1C     		mov	r4, r7
 1790 0034 0F34     		add	r4, r4, #15
 1791 0036 B023     		mov	r3, #176
 1792 0038 1B03     		lsl	r3, r3, #12
 1793 003a 181C     		mov	r0, r3
 1794 003c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1795 0040 031C     		mov	r3, r0
 1796 0042 2370     		strb	r3, [r4]
 852:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 853:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 1797              		.loc 1 853 0
 1798 0044 3B1C     		mov	r3, r7
 1799 0046 0F33     		add	r3, r3, #15
 1800 0048 1B78     		ldrb	r3, [r3]
 1801 004a 042B     		cmp	r3, #4
 1802 004c 21D1     		bne	.L107
 854:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {  
 855:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Enable the Option Bytes Programming operation */
 856:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 1803              		.loc 1 856 0
 1804 004e 154B     		ldr	r3, .L109+4
 1805 0050 144A     		ldr	r2, .L109+4
 1806 0052 1269     		ldr	r2, [r2, #16]
 1807 0054 1021     		mov	r1, #16
 1808 0056 0A43     		orr	r2, r1
 1809 0058 1A61     		str	r2, [r3, #16]
 857:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 858:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     OB->USER = OB_SRAM_Parity | 0xBF;
 1810              		.loc 1 858 0
 1811 005a 134B     		ldr	r3, .L109+8
 1812 005c FA1D     		add	r2, r7, #7
 1813 005e 1278     		ldrb	r2, [r2]
 1814 0060 4121     		mov	r1, #65
 1815 0062 4942     		neg	r1, r1
 1816 0064 0A43     		orr	r2, r1
 1817 0066 D2B2     		uxtb	r2, r2
 1818 0068 5A80     		strh	r2, [r3, #2]
 859:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 860:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Wait for last operation to be completed */
 861:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1819              		.loc 1 861 0
 1820 006a 3C1C     		mov	r4, r7
 1821 006c 0F34     		add	r4, r4, #15
 1822 006e B023     		mov	r3, #176
 1823 0070 1B03     		lsl	r3, r3, #12
 1824 0072 181C     		mov	r0, r3
 1825 0074 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1826 0078 031C     		mov	r3, r0
 1827 007a 2370     		strb	r3, [r4]
 862:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 863:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if(status != FLASH_TIMEOUT)
 1828              		.loc 1 863 0
 1829 007c 3B1C     		mov	r3, r7
 1830 007e 0F33     		add	r3, r3, #15
 1831 0080 1B78     		ldrb	r3, [r3]
 1832 0082 052B     		cmp	r3, #5
 1833 0084 05D0     		beq	.L107
 864:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 865:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 866:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 1834              		.loc 1 866 0
 1835 0086 074B     		ldr	r3, .L109+4
 1836 0088 064A     		ldr	r2, .L109+4
 1837 008a 1269     		ldr	r2, [r2, #16]
 1838 008c 1021     		mov	r1, #16
 1839 008e 8A43     		bic	r2, r1
 1840 0090 1A61     		str	r2, [r3, #16]
 1841              	.L107:
 867:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 868:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 869:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the Option Byte program Status */
 870:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 1842              		.loc 1 870 0
 1843 0092 3B1C     		mov	r3, r7
 1844 0094 0F33     		add	r3, r3, #15
 1845 0096 1B78     		ldrb	r3, [r3]
 871:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 1846              		.loc 1 871 0
 1847 0098 181C     		mov	r0, r3
 1848 009a BD46     		mov	sp, r7
 1849 009c 05B0     		add	sp, sp, #20
 1850              		@ sp needed
 1851 009e 90BD     		pop	{r4, r7, pc}
 1852              	.L110:
 1853              		.align	2
 1854              	.L109:
 1855 00a0 00000000 		.word	.LC0
 1856 00a4 00200240 		.word	1073881088
 1857 00a8 00F8FF1F 		.word	536868864
 1858              		.cfi_endproc
 1859              	.LFE50:
 1861              		.section	.text.FLASH_OB_WriteUser,"ax",%progbits
 1862              		.align	2
 1863              		.global	FLASH_OB_WriteUser
 1864              		.code	16
 1865              		.thumb_func
 1867              	FLASH_OB_WriteUser:
 1868              	.LFB51:
 872:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 873:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 874:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW, RST_STOP, RST_STDBY,
 875:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         BOOT1 and VDDA ANALOG monitoring.
 876:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @note    To correctly run this function, the FLASH_OB_Unlock() function
 877:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *           must be called before.
 878:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          Call the FLASH_OB_Lock() to disable the flash control register access and the option b
 879:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)
 880:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  OB_USER: Selects all user option bytes
 881:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         This parameter is a combination of the following values:
 882:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_IWDG_SW / OB_IWDG_HW: Software / Hardware WDG selected
 883:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_STOP_NoRST / OB_STOP_RST: No reset / Reset generated when entering in STOP
 884:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_STDBY_NoRST / OB_STDBY_RST: No reset / Reset generated when entering in STA
 885:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_BOOT1_RESET / OB_BOOT1_SET: BOOT1 Reset / Set
 886:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_VDDA_ANALOG_ON / OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source
 887:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg OB_SRAM_PARITY_SET / OB_SRAM_PARITY_RESET: SRAM Parity SET / RESET   
 888:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Status: The returned value can be: 
 889:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 890:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 891:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
 892:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 1869              		.loc 1 892 0
 1870              		.cfi_startproc
 1871 0000 90B5     		push	{r4, r7, lr}
 1872              		.cfi_def_cfa_offset 12
 1873              		.cfi_offset 4, -12
 1874              		.cfi_offset 7, -8
 1875              		.cfi_offset 14, -4
 1876 0002 85B0     		sub	sp, sp, #20
 1877              		.cfi_def_cfa_offset 32
 1878 0004 00AF     		add	r7, sp, #0
 1879              		.cfi_def_cfa_register 7
 1880 0006 021C     		mov	r2, r0
 1881 0008 FB1D     		add	r3, r7, #7
 1882 000a 1A70     		strb	r2, [r3]
 893:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1883              		.loc 1 893 0
 1884 000c 3B1C     		mov	r3, r7
 1885 000e 0F33     		add	r3, r3, #15
 1886 0010 0422     		mov	r2, #4
 1887 0012 1A70     		strb	r2, [r3]
 894:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 895:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Wait for last operation to be completed */
 896:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1888              		.loc 1 896 0
 1889 0014 3C1C     		mov	r4, r7
 1890 0016 0F34     		add	r4, r4, #15
 1891 0018 B023     		mov	r3, #176
 1892 001a 1B03     		lsl	r3, r3, #12
 1893 001c 181C     		mov	r0, r3
 1894 001e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1895 0022 031C     		mov	r3, r0
 1896 0024 2370     		strb	r3, [r4]
 897:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 898:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 1897              		.loc 1 898 0
 1898 0026 3B1C     		mov	r3, r7
 1899 0028 0F33     		add	r3, r3, #15
 1900 002a 1B78     		ldrb	r3, [r3]
 1901 002c 042B     		cmp	r3, #4
 1902 002e 21D1     		bne	.L112
 899:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 900:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Enable the Option Bytes Programming operation */
 901:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 1903              		.loc 1 901 0
 1904 0030 144B     		ldr	r3, .L114
 1905 0032 144A     		ldr	r2, .L114
 1906 0034 1269     		ldr	r2, [r2, #16]
 1907 0036 1021     		mov	r1, #16
 1908 0038 0A43     		orr	r2, r1
 1909 003a 1A61     		str	r2, [r3, #16]
 902:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 903:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     OB->USER = OB_USER | 0x88;
 1910              		.loc 1 903 0
 1911 003c 124B     		ldr	r3, .L114+4
 1912 003e FA1D     		add	r2, r7, #7
 1913 0040 1278     		ldrb	r2, [r2]
 1914 0042 7821     		mov	r1, #120
 1915 0044 4942     		neg	r1, r1
 1916 0046 0A43     		orr	r2, r1
 1917 0048 D2B2     		uxtb	r2, r2
 1918 004a 5A80     		strh	r2, [r3, #2]
 904:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 905:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Wait for last operation to be completed */
 906:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 1919              		.loc 1 906 0
 1920 004c 3C1C     		mov	r4, r7
 1921 004e 0F34     		add	r4, r4, #15
 1922 0050 B023     		mov	r3, #176
 1923 0052 1B03     		lsl	r3, r3, #12
 1924 0054 181C     		mov	r0, r3
 1925 0056 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1926 005a 031C     		mov	r3, r0
 1927 005c 2370     		strb	r3, [r4]
 907:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 908:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if(status != FLASH_TIMEOUT)
 1928              		.loc 1 908 0
 1929 005e 3B1C     		mov	r3, r7
 1930 0060 0F33     		add	r3, r3, #15
 1931 0062 1B78     		ldrb	r3, [r3]
 1932 0064 052B     		cmp	r3, #5
 1933 0066 05D0     		beq	.L112
 909:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 910:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* If the program operation is completed, disable the OPTPG Bit */
 911:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 1934              		.loc 1 911 0
 1935 0068 064B     		ldr	r3, .L114
 1936 006a 064A     		ldr	r2, .L114
 1937 006c 1269     		ldr	r2, [r2, #16]
 1938 006e 1021     		mov	r1, #16
 1939 0070 8A43     		bic	r2, r1
 1940 0072 1A61     		str	r2, [r3, #16]
 1941              	.L112:
 912:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 913:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }    
 914:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the Option Byte program Status */
 915:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 1942              		.loc 1 915 0
 1943 0074 3B1C     		mov	r3, r7
 1944 0076 0F33     		add	r3, r3, #15
 1945 0078 1B78     		ldrb	r3, [r3]
 916:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 917:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 1946              		.loc 1 917 0
 1947 007a 181C     		mov	r0, r3
 1948 007c BD46     		mov	sp, r7
 1949 007e 05B0     		add	sp, sp, #20
 1950              		@ sp needed
 1951 0080 90BD     		pop	{r4, r7, pc}
 1952              	.L115:
 1953 0082 C046     		.align	2
 1954              	.L114:
 1955 0084 00200240 		.word	1073881088
 1956 0088 00F8FF1F 		.word	536868864
 1957              		.cfi_endproc
 1958              	.LFE51:
 1960              		.section	.text.FLASH_ProgramOptionByteData,"ax",%progbits
 1961              		.align	2
 1962              		.global	FLASH_ProgramOptionByteData
 1963              		.code	16
 1964              		.thumb_func
 1966              	FLASH_ProgramOptionByteData:
 1967              	.LFB52:
 918:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 919:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 920:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Programs a half word at a specified Option Byte Data address.
 921:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @note    To correctly run this function, the FLASH_OB_Unlock() function
 922:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *           must be called before.
 923:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          Call the FLASH_OB_Lock() to disable the flash control register access and the option b
 924:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *          (recommended to protect the FLASH memory against possible unwanted operation)
 925:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 926:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *   This parameter can be 0x1FFFF804 or 0x1FFFF806. 
 927:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 928:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 929:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 930:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 931:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
 932:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 1968              		.loc 1 932 0
 1969              		.cfi_startproc
 1970 0000 90B5     		push	{r4, r7, lr}
 1971              		.cfi_def_cfa_offset 12
 1972              		.cfi_offset 4, -12
 1973              		.cfi_offset 7, -8
 1974              		.cfi_offset 14, -4
 1975 0002 85B0     		sub	sp, sp, #20
 1976              		.cfi_def_cfa_offset 32
 1977 0004 00AF     		add	r7, sp, #0
 1978              		.cfi_def_cfa_register 7
 1979 0006 7860     		str	r0, [r7, #4]
 1980 0008 0A1C     		mov	r2, r1
 1981 000a FB1C     		add	r3, r7, #3
 1982 000c 1A70     		strb	r2, [r3]
 933:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1983              		.loc 1 933 0
 1984 000e 3B1C     		mov	r3, r7
 1985 0010 0F33     		add	r3, r3, #15
 1986 0012 0422     		mov	r2, #4
 1987 0014 1A70     		strb	r2, [r3]
 934:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
 935:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_OB_DATA_ADDRESS(Address));
 1988              		.loc 1 935 0
 1989 0016 7A68     		ldr	r2, [r7, #4]
 1990 0018 204B     		ldr	r3, .L120
 1991 001a 9A42     		cmp	r2, r3
 1992 001c 09D0     		beq	.L117
 1993              		.loc 1 935 0 is_stmt 0 discriminator 1
 1994 001e 7A68     		ldr	r2, [r7, #4]
 1995 0020 1F4B     		ldr	r3, .L120+4
 1996 0022 9A42     		cmp	r2, r3
 1997 0024 05D0     		beq	.L117
 1998 0026 1F4A     		ldr	r2, .L120+8
 1999 0028 1F4B     		ldr	r3, .L120+12
 2000 002a 101C     		mov	r0, r2
 2001 002c 191C     		mov	r1, r3
 2002 002e FFF7FEFF 		bl	assert_failed
 2003              	.L117:
 936:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 2004              		.loc 1 936 0 is_stmt 1
 2005 0032 3C1C     		mov	r4, r7
 2006 0034 0F34     		add	r4, r4, #15
 2007 0036 B023     		mov	r3, #176
 2008 0038 1B03     		lsl	r3, r3, #12
 2009 003a 181C     		mov	r0, r3
 2010 003c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 2011 0040 031C     		mov	r3, r0
 2012 0042 2370     		strb	r3, [r4]
 937:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 938:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(status == FLASH_COMPLETE)
 2013              		.loc 1 938 0
 2014 0044 3B1C     		mov	r3, r7
 2015 0046 0F33     		add	r3, r3, #15
 2016 0048 1B78     		ldrb	r3, [r3]
 2017 004a 042B     		cmp	r3, #4
 2018 004c 1ED1     		bne	.L118
 939:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 940:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Enables the Option Bytes Programming operation */
 941:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_CR_OPTPG; 
 2019              		.loc 1 941 0
 2020 004e 174B     		ldr	r3, .L120+16
 2021 0050 164A     		ldr	r2, .L120+16
 2022 0052 1269     		ldr	r2, [r2, #16]
 2023 0054 1021     		mov	r1, #16
 2024 0056 0A43     		orr	r2, r1
 2025 0058 1A61     		str	r2, [r3, #16]
 942:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     *(__IO uint16_t*)Address = Data;
 2026              		.loc 1 942 0
 2027 005a 7B68     		ldr	r3, [r7, #4]
 2028 005c FA1C     		add	r2, r7, #3
 2029 005e 1278     		ldrb	r2, [r2]
 2030 0060 92B2     		uxth	r2, r2
 2031 0062 1A80     		strh	r2, [r3]
 943:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 944:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Wait for last operation to be completed */
 945:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 2032              		.loc 1 945 0
 2033 0064 3C1C     		mov	r4, r7
 2034 0066 0F34     		add	r4, r4, #15
 2035 0068 B023     		mov	r3, #176
 2036 006a 1B03     		lsl	r3, r3, #12
 2037 006c 181C     		mov	r0, r3
 2038 006e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 2039 0072 031C     		mov	r3, r0
 2040 0074 2370     		strb	r3, [r4]
 946:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     
 947:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if(status != FLASH_TIMEOUT)
 2041              		.loc 1 947 0
 2042 0076 3B1C     		mov	r3, r7
 2043 0078 0F33     		add	r3, r3, #15
 2044 007a 1B78     		ldrb	r3, [r3]
 2045 007c 052B     		cmp	r3, #5
 2046 007e 05D0     		beq	.L118
 948:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
 949:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       /* If the program operation is completed, disable the OPTPG Bit */
 950:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASH->CR &= ~FLASH_CR_OPTPG;
 2047              		.loc 1 950 0
 2048 0080 0A4B     		ldr	r3, .L120+16
 2049 0082 0A4A     		ldr	r2, .L120+16
 2050 0084 1269     		ldr	r2, [r2, #16]
 2051 0086 1021     		mov	r1, #16
 2052 0088 8A43     		bic	r2, r1
 2053 008a 1A61     		str	r2, [r3, #16]
 2054              	.L118:
 951:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
 952:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 953:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the Option Byte Data Program Status */
 954:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 2055              		.loc 1 954 0
 2056 008c 3B1C     		mov	r3, r7
 2057 008e 0F33     		add	r3, r3, #15
 2058 0090 1B78     		ldrb	r3, [r3]
 955:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 2059              		.loc 1 955 0
 2060 0092 181C     		mov	r0, r3
 2061 0094 BD46     		mov	sp, r7
 2062 0096 05B0     		add	sp, sp, #20
 2063              		@ sp needed
 2064 0098 90BD     		pop	{r4, r7, pc}
 2065              	.L121:
 2066 009a C046     		.align	2
 2067              	.L120:
 2068 009c 04F8FF1F 		.word	536868868
 2069 00a0 06F8FF1F 		.word	536868870
 2070 00a4 00000000 		.word	.LC0
 2071 00a8 A7030000 		.word	935
 2072 00ac 00200240 		.word	1073881088
 2073              		.cfi_endproc
 2074              	.LFE52:
 2076              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
 2077              		.align	2
 2078              		.global	FLASH_OB_GetUser
 2079              		.code	16
 2080              		.thumb_func
 2082              	FLASH_OB_GetUser:
 2083              	.LFB53:
 956:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 957:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 958:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Returns the FLASH User Option Bytes values.
 959:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  None
 960:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval The FLASH User Option Bytes .
 961:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 962:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** uint8_t FLASH_OB_GetUser(void)
 963:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 2084              		.loc 1 963 0
 2085              		.cfi_startproc
 2086 0000 80B5     		push	{r7, lr}
 2087              		.cfi_def_cfa_offset 8
 2088              		.cfi_offset 7, -8
 2089              		.cfi_offset 14, -4
 2090 0002 00AF     		add	r7, sp, #0
 2091              		.cfi_def_cfa_register 7
 964:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the User Option Byte */
 965:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return (uint8_t)(FLASH->OBR >> 8);
 2092              		.loc 1 965 0
 2093 0004 034B     		ldr	r3, .L124
 2094 0006 DB69     		ldr	r3, [r3, #28]
 2095 0008 1B0A     		lsr	r3, r3, #8
 2096 000a DBB2     		uxtb	r3, r3
 966:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 2097              		.loc 1 966 0
 2098 000c 181C     		mov	r0, r3
 2099 000e BD46     		mov	sp, r7
 2100              		@ sp needed
 2101 0010 80BD     		pop	{r7, pc}
 2102              	.L125:
 2103 0012 C046     		.align	2
 2104              	.L124:
 2105 0014 00200240 		.word	1073881088
 2106              		.cfi_endproc
 2107              	.LFE53:
 2109              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
 2110              		.align	2
 2111              		.global	FLASH_OB_GetWRP
 2112              		.code	16
 2113              		.thumb_func
 2115              	FLASH_OB_GetWRP:
 2116              	.LFB54:
 967:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 968:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 969:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
 970:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  None
 971:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval The FLASH Write Protection Option Bytes value
 972:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 973:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** uint32_t FLASH_OB_GetWRP(void)
 974:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 2117              		.loc 1 974 0
 2118              		.cfi_startproc
 2119 0000 80B5     		push	{r7, lr}
 2120              		.cfi_def_cfa_offset 8
 2121              		.cfi_offset 7, -8
 2122              		.cfi_offset 14, -4
 2123 0002 00AF     		add	r7, sp, #0
 2124              		.cfi_def_cfa_register 7
 975:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the FLASH write protection Register value */
 976:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return (uint32_t)(FLASH->WRPR);
 2125              		.loc 1 976 0
 2126 0004 024B     		ldr	r3, .L128
 2127 0006 1B6A     		ldr	r3, [r3, #32]
 977:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 2128              		.loc 1 977 0
 2129 0008 181C     		mov	r0, r3
 2130 000a BD46     		mov	sp, r7
 2131              		@ sp needed
 2132 000c 80BD     		pop	{r7, pc}
 2133              	.L129:
 2134 000e C046     		.align	2
 2135              	.L128:
 2136 0010 00200240 		.word	1073881088
 2137              		.cfi_endproc
 2138              	.LFE54:
 2140              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 2141              		.align	2
 2142              		.global	FLASH_OB_GetRDP
 2143              		.code	16
 2144              		.thumb_func
 2146              	FLASH_OB_GetRDP:
 2147              	.LFB55:
 978:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 979:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
 980:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Checks whether the FLASH Read out Protection Status is set or not.
 981:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  None
 982:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH ReadOut Protection Status(SET or RESET)
 983:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
 984:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FlagStatus FLASH_OB_GetRDP(void)
 985:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 2148              		.loc 1 985 0
 2149              		.cfi_startproc
 2150 0000 80B5     		push	{r7, lr}
 2151              		.cfi_def_cfa_offset 8
 2152              		.cfi_offset 7, -8
 2153              		.cfi_offset 14, -4
 2154 0002 82B0     		sub	sp, sp, #8
 2155              		.cfi_def_cfa_offset 16
 2156 0004 00AF     		add	r7, sp, #0
 2157              		.cfi_def_cfa_register 7
 986:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FlagStatus readstatus = RESET;
 2158              		.loc 1 986 0
 2159 0006 FB1D     		add	r3, r7, #7
 2160 0008 0022     		mov	r2, #0
 2161 000a 1A70     		strb	r2, [r3]
 987:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
 988:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
 2162              		.loc 1 988 0
 2163 000c 094B     		ldr	r3, .L134
 2164 000e DB69     		ldr	r3, [r3, #28]
 2165 0010 DBB2     		uxtb	r3, r3
 2166 0012 1A1C     		mov	r2, r3
 2167 0014 0623     		mov	r3, #6
 2168 0016 1340     		and	r3, r2
 2169 0018 03D0     		beq	.L131
 989:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 990:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     readstatus = SET;
 2170              		.loc 1 990 0
 2171 001a FB1D     		add	r3, r7, #7
 2172 001c 0122     		mov	r2, #1
 2173 001e 1A70     		strb	r2, [r3]
 2174 0020 02E0     		b	.L132
 2175              	.L131:
 991:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 992:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   else
 993:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
 994:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     readstatus = RESET;
 2176              		.loc 1 994 0
 2177 0022 FB1D     		add	r3, r7, #7
 2178 0024 0022     		mov	r2, #0
 2179 0026 1A70     		strb	r2, [r3]
 2180              	.L132:
 995:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
 996:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return readstatus;
 2181              		.loc 1 996 0
 2182 0028 FB1D     		add	r3, r7, #7
 2183 002a 1B78     		ldrb	r3, [r3]
 997:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 2184              		.loc 1 997 0
 2185 002c 181C     		mov	r0, r3
 2186 002e BD46     		mov	sp, r7
 2187 0030 02B0     		add	sp, sp, #8
 2188              		@ sp needed
 2189 0032 80BD     		pop	{r7, pc}
 2190              	.L135:
 2191              		.align	2
 2192              	.L134:
 2193 0034 00200240 		.word	1073881088
 2194              		.cfi_endproc
 2195              	.LFE55:
 2197              		.section	.text.FLASH_ITConfig,"ax",%progbits
 2198              		.align	2
 2199              		.global	FLASH_ITConfig
 2200              		.code	16
 2201              		.thumb_func
 2203              	FLASH_ITConfig:
 2204              	.LFB56:
 998:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
 999:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
1000:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @}
1001:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
1002:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
1003:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /** @defgroup FLASH_Group4 Interrupts and flags management functions
1004:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  *  @brief   Interrupts and flags management functions
1005:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  *
1006:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** @verbatim   
1007:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  ===============================================================================
1008:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****              ##### Interrupts and flags management functions #####
1009:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****  ===============================================================================  
1010:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
1011:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** @endverbatim
1012:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @{
1013:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
1014:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
1015:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
1016:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Enables or disables the specified FLASH interrupts.
1017:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or 
1018:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         disabled.
1019:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         This parameter can be any combination of the following values:
1020:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg FLASH_IT_EOP: FLASH end of programming Interrupt
1021:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg FLASH_IT_ERR: FLASH Error Interrupt
1022:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval None 
1023:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
1024:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
1025:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 2205              		.loc 1 1025 0
 2206              		.cfi_startproc
 2207 0000 80B5     		push	{r7, lr}
 2208              		.cfi_def_cfa_offset 8
 2209              		.cfi_offset 7, -8
 2210              		.cfi_offset 14, -4
 2211 0002 82B0     		sub	sp, sp, #8
 2212              		.cfi_def_cfa_offset 16
 2213 0004 00AF     		add	r7, sp, #0
 2214              		.cfi_def_cfa_register 7
 2215 0006 7860     		str	r0, [r7, #4]
 2216 0008 0A1C     		mov	r2, r1
 2217 000a FB1C     		add	r3, r7, #3
 2218 000c 1A70     		strb	r2, [r3]
1026:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
1027:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
 2219              		.loc 1 1027 0
 2220 000e 7A68     		ldr	r2, [r7, #4]
 2221 0010 174B     		ldr	r3, .L142
 2222 0012 1340     		and	r3, r2
 2223 0014 02D1     		bne	.L137
 2224              		.loc 1 1027 0 is_stmt 0 discriminator 2
 2225 0016 7B68     		ldr	r3, [r7, #4]
 2226 0018 002B     		cmp	r3, #0
 2227 001a 05D1     		bne	.L138
 2228              	.L137:
 2229              		.loc 1 1027 0 discriminator 1
 2230 001c 154A     		ldr	r2, .L142+4
 2231 001e 164B     		ldr	r3, .L142+8
 2232 0020 101C     		mov	r0, r2
 2233 0022 191C     		mov	r1, r3
 2234 0024 FFF7FEFF 		bl	assert_failed
 2235              	.L138:
1028:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2236              		.loc 1 1028 0 is_stmt 1
 2237 0028 FB1C     		add	r3, r7, #3
 2238 002a 1B78     		ldrb	r3, [r3]
 2239 002c 002B     		cmp	r3, #0
 2240 002e 09D0     		beq	.L139
 2241              		.loc 1 1028 0 is_stmt 0 discriminator 1
 2242 0030 FB1C     		add	r3, r7, #3
 2243 0032 1B78     		ldrb	r3, [r3]
 2244 0034 012B     		cmp	r3, #1
 2245 0036 05D0     		beq	.L139
 2246 0038 0E4A     		ldr	r2, .L142+4
 2247 003a 104B     		ldr	r3, .L142+12
 2248 003c 101C     		mov	r0, r2
 2249 003e 191C     		mov	r1, r3
 2250 0040 FFF7FEFF 		bl	assert_failed
 2251              	.L139:
1029:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
1030:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(NewState != DISABLE)
 2252              		.loc 1 1030 0 is_stmt 1
 2253 0044 FB1C     		add	r3, r7, #3
 2254 0046 1B78     		ldrb	r3, [r3]
 2255 0048 002B     		cmp	r3, #0
 2256 004a 06D0     		beq	.L140
1031:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
1032:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Enable the interrupt sources */
1033:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR |= FLASH_IT;
 2257              		.loc 1 1033 0
 2258 004c 0C4B     		ldr	r3, .L142+16
 2259 004e 0C4A     		ldr	r2, .L142+16
 2260 0050 1169     		ldr	r1, [r2, #16]
 2261 0052 7A68     		ldr	r2, [r7, #4]
 2262 0054 0A43     		orr	r2, r1
 2263 0056 1A61     		str	r2, [r3, #16]
 2264 0058 06E0     		b	.L136
 2265              	.L140:
1034:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
1035:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   else
1036:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
1037:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     /* Disable the interrupt sources */
1038:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASH->CR &= ~(uint32_t)FLASH_IT;
 2266              		.loc 1 1038 0
 2267 005a 094B     		ldr	r3, .L142+16
 2268 005c 084A     		ldr	r2, .L142+16
 2269 005e 1269     		ldr	r2, [r2, #16]
 2270 0060 7968     		ldr	r1, [r7, #4]
 2271 0062 C943     		mvn	r1, r1
 2272 0064 0A40     		and	r2, r1
 2273 0066 1A61     		str	r2, [r3, #16]
 2274              	.L136:
1039:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
1040:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 2275              		.loc 1 1040 0
 2276 0068 BD46     		mov	sp, r7
 2277 006a 02B0     		add	sp, sp, #8
 2278              		@ sp needed
 2279 006c 80BD     		pop	{r7, pc}
 2280              	.L143:
 2281 006e C046     		.align	2
 2282              	.L142:
 2283 0070 FFEBFFFF 		.word	-5121
 2284 0074 00000000 		.word	.LC0
 2285 0078 03040000 		.word	1027
 2286 007c 04040000 		.word	1028
 2287 0080 00200240 		.word	1073881088
 2288              		.cfi_endproc
 2289              	.LFE56:
 2291              		.section	.text.FLASH_GetFlagStatus,"ax",%progbits
 2292              		.align	2
 2293              		.global	FLASH_GetFlagStatus
 2294              		.code	16
 2295              		.thumb_func
 2297              	FLASH_GetFlagStatus:
 2298              	.LFB57:
1041:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
1042:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
1043:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Checks whether the specified FLASH flag is set or not.
1044:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flag to check.
1045:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         This parameter can be one of the following values:
1046:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg FLASH_FLAG_BSY: FLASH write/erase operations in progress flag 
1047:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg FLASH_FLAG_PGERR: FLASH Programming error flag flag
1048:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
1049:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg FLASH_FLAG_EOP: FLASH End of Programming flag
1050:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval The new state of FLASH_FLAG (SET or RESET).
1051:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
1052:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
1053:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 2299              		.loc 1 1053 0
 2300              		.cfi_startproc
 2301 0000 80B5     		push	{r7, lr}
 2302              		.cfi_def_cfa_offset 8
 2303              		.cfi_offset 7, -8
 2304              		.cfi_offset 14, -4
 2305 0002 84B0     		sub	sp, sp, #16
 2306              		.cfi_def_cfa_offset 24
 2307 0004 00AF     		add	r7, sp, #0
 2308              		.cfi_def_cfa_register 7
 2309 0006 7860     		str	r0, [r7, #4]
1054:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FlagStatus bitstatus = RESET;
 2310              		.loc 1 1054 0
 2311 0008 3B1C     		mov	r3, r7
 2312 000a 0F33     		add	r3, r3, #15
 2313 000c 0022     		mov	r2, #0
 2314 000e 1A70     		strb	r2, [r3]
1055:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
1056:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
1057:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
 2315              		.loc 1 1057 0
 2316 0010 7B68     		ldr	r3, [r7, #4]
 2317 0012 012B     		cmp	r3, #1
 2318 0014 0ED0     		beq	.L145
 2319              		.loc 1 1057 0 is_stmt 0 discriminator 1
 2320 0016 7B68     		ldr	r3, [r7, #4]
 2321 0018 042B     		cmp	r3, #4
 2322 001a 0BD0     		beq	.L145
 2323 001c 7B68     		ldr	r3, [r7, #4]
 2324 001e 102B     		cmp	r3, #16
 2325 0020 08D0     		beq	.L145
 2326 0022 7B68     		ldr	r3, [r7, #4]
 2327 0024 202B     		cmp	r3, #32
 2328 0026 05D0     		beq	.L145
 2329 0028 0D4A     		ldr	r2, .L149
 2330 002a 0E4B     		ldr	r3, .L149+4
 2331 002c 101C     		mov	r0, r2
 2332 002e 191C     		mov	r1, r3
 2333 0030 FFF7FEFF 		bl	assert_failed
 2334              	.L145:
1058:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
1059:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 2335              		.loc 1 1059 0 is_stmt 1
 2336 0034 0C4B     		ldr	r3, .L149+8
 2337 0036 DB68     		ldr	r3, [r3, #12]
 2338 0038 7A68     		ldr	r2, [r7, #4]
 2339 003a 1340     		and	r3, r2
 2340 003c 04D0     		beq	.L146
1060:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
1061:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     bitstatus = SET;
 2341              		.loc 1 1061 0
 2342 003e 3B1C     		mov	r3, r7
 2343 0040 0F33     		add	r3, r3, #15
 2344 0042 0122     		mov	r2, #1
 2345 0044 1A70     		strb	r2, [r3]
 2346 0046 03E0     		b	.L147
 2347              	.L146:
1062:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
1063:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   else
1064:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
1065:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     bitstatus = RESET;
 2348              		.loc 1 1065 0
 2349 0048 3B1C     		mov	r3, r7
 2350 004a 0F33     		add	r3, r3, #15
 2351 004c 0022     		mov	r2, #0
 2352 004e 1A70     		strb	r2, [r3]
 2353              	.L147:
1066:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
1067:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the new state of FLASH_FLAG (SET or RESET) */
1068:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return bitstatus; 
 2354              		.loc 1 1068 0
 2355 0050 3B1C     		mov	r3, r7
 2356 0052 0F33     		add	r3, r3, #15
 2357 0054 1B78     		ldrb	r3, [r3]
1069:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 2358              		.loc 1 1069 0
 2359 0056 181C     		mov	r0, r3
 2360 0058 BD46     		mov	sp, r7
 2361 005a 04B0     		add	sp, sp, #16
 2362              		@ sp needed
 2363 005c 80BD     		pop	{r7, pc}
 2364              	.L150:
 2365 005e C046     		.align	2
 2366              	.L149:
 2367 0060 00000000 		.word	.LC0
 2368 0064 21040000 		.word	1057
 2369 0068 00200240 		.word	1073881088
 2370              		.cfi_endproc
 2371              	.LFE57:
 2373              		.section	.text.FLASH_ClearFlag,"ax",%progbits
 2374              		.align	2
 2375              		.global	FLASH_ClearFlag
 2376              		.code	16
 2377              		.thumb_func
 2379              	FLASH_ClearFlag:
 2380              	.LFB58:
1070:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
1071:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
1072:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Clears the FLASH's pending flags.
1073:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flags to clear.
1074:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         This parameter can be any combination of the following values:
1075:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg FLASH_FLAG_PGERR: FLASH Programming error flag flag
1076:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
1077:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *             @arg FLASH_FLAG_EOP: FLASH End of Programming flag
1078:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval None
1079:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
1080:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** void FLASH_ClearFlag(uint32_t FLASH_FLAG)
1081:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 2381              		.loc 1 1081 0
 2382              		.cfi_startproc
 2383 0000 80B5     		push	{r7, lr}
 2384              		.cfi_def_cfa_offset 8
 2385              		.cfi_offset 7, -8
 2386              		.cfi_offset 14, -4
 2387 0002 82B0     		sub	sp, sp, #8
 2388              		.cfi_def_cfa_offset 16
 2389 0004 00AF     		add	r7, sp, #0
 2390              		.cfi_def_cfa_register 7
 2391 0006 7860     		str	r0, [r7, #4]
1082:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check the parameters */
1083:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
 2392              		.loc 1 1083 0
 2393 0008 7B68     		ldr	r3, [r7, #4]
 2394 000a 3C22     		mov	r2, #60
 2395 000c 9343     		bic	r3, r2
 2396 000e 02D1     		bne	.L152
 2397              		.loc 1 1083 0 is_stmt 0 discriminator 2
 2398 0010 7B68     		ldr	r3, [r7, #4]
 2399 0012 002B     		cmp	r3, #0
 2400 0014 05D1     		bne	.L153
 2401              	.L152:
 2402              		.loc 1 1083 0 discriminator 1
 2403 0016 064A     		ldr	r2, .L154
 2404 0018 064B     		ldr	r3, .L154+4
 2405 001a 101C     		mov	r0, r2
 2406 001c 191C     		mov	r1, r3
 2407 001e FFF7FEFF 		bl	assert_failed
 2408              	.L153:
1084:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
1085:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Clear the flags */
1086:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH->SR = FLASH_FLAG;
 2409              		.loc 1 1086 0 is_stmt 1
 2410 0022 054B     		ldr	r3, .L154+8
 2411 0024 7A68     		ldr	r2, [r7, #4]
 2412 0026 DA60     		str	r2, [r3, #12]
1087:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 2413              		.loc 1 1087 0
 2414 0028 BD46     		mov	sp, r7
 2415 002a 02B0     		add	sp, sp, #8
 2416              		@ sp needed
 2417 002c 80BD     		pop	{r7, pc}
 2418              	.L155:
 2419 002e C046     		.align	2
 2420              	.L154:
 2421 0030 00000000 		.word	.LC0
 2422 0034 3B040000 		.word	1083
 2423 0038 00200240 		.word	1073881088
 2424              		.cfi_endproc
 2425              	.LFE58:
 2427              		.section	.text.FLASH_GetStatus,"ax",%progbits
 2428              		.align	2
 2429              		.global	FLASH_GetStatus
 2430              		.code	16
 2431              		.thumb_func
 2433              	FLASH_GetStatus:
 2434              	.LFB59:
1088:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
1089:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
1090:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Returns the FLASH Status.
1091:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  None
1092:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Status: The returned value can be: 
1093:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
1094:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
1095:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_GetStatus(void)
1096:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** {
 2435              		.loc 1 1096 0
 2436              		.cfi_startproc
 2437 0000 80B5     		push	{r7, lr}
 2438              		.cfi_def_cfa_offset 8
 2439              		.cfi_offset 7, -8
 2440              		.cfi_offset 14, -4
 2441 0002 82B0     		sub	sp, sp, #8
 2442              		.cfi_def_cfa_offset 16
 2443 0004 00AF     		add	r7, sp, #0
 2444              		.cfi_def_cfa_register 7
1097:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status FLASHstatus = FLASH_COMPLETE;
 2445              		.loc 1 1097 0
 2446 0006 FB1D     		add	r3, r7, #7
 2447 0008 0422     		mov	r2, #4
 2448 000a 1A70     		strb	r2, [r3]
1098:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
1099:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 2449              		.loc 1 1099 0
 2450 000c 114B     		ldr	r3, .L162
 2451 000e DA68     		ldr	r2, [r3, #12]
 2452 0010 0123     		mov	r3, #1
 2453 0012 1340     		and	r3, r2
 2454 0014 03D0     		beq	.L157
1100:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
1101:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     FLASHstatus = FLASH_BUSY;
 2455              		.loc 1 1101 0
 2456 0016 FB1D     		add	r3, r7, #7
 2457 0018 0122     		mov	r2, #1
 2458 001a 1A70     		strb	r2, [r3]
 2459 001c 14E0     		b	.L158
 2460              	.L157:
1102:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
1103:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   else 
1104:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {  
1105:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 2461              		.loc 1 1105 0
 2462 001e 0D4B     		ldr	r3, .L162
 2463 0020 DA68     		ldr	r2, [r3, #12]
 2464 0022 1023     		mov	r3, #16
 2465 0024 1340     		and	r3, r2
 2466 0026 03D0     		beq	.L159
1106:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     { 
1107:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       FLASHstatus = FLASH_ERROR_WRP;
 2467              		.loc 1 1107 0
 2468 0028 FB1D     		add	r3, r7, #7
 2469 002a 0222     		mov	r2, #2
 2470 002c 1A70     		strb	r2, [r3]
 2471 002e 0BE0     		b	.L158
 2472              	.L159:
1108:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
1109:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     else 
1110:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     {
1111:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 2473              		.loc 1 1111 0
 2474 0030 084B     		ldr	r3, .L162
 2475 0032 DA68     		ldr	r2, [r3, #12]
 2476 0034 0423     		mov	r3, #4
 2477 0036 1340     		and	r3, r2
 2478 0038 03D0     		beq	.L160
1112:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       {
1113:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         FLASHstatus = FLASH_ERROR_PROGRAM; 
 2479              		.loc 1 1113 0
 2480 003a FB1D     		add	r3, r7, #7
 2481 003c 0322     		mov	r2, #3
 2482 003e 1A70     		strb	r2, [r3]
 2483 0040 02E0     		b	.L158
 2484              	.L160:
1114:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       }
1115:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       else
1116:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       {
1117:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****         FLASHstatus = FLASH_COMPLETE;
 2485              		.loc 1 1117 0
 2486 0042 FB1D     		add	r3, r7, #7
 2487 0044 0422     		mov	r2, #4
 2488 0046 1A70     		strb	r2, [r3]
 2489              	.L158:
1118:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****       }
1119:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     }
1120:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
1121:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the FLASH Status */
1122:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return FLASHstatus;
 2490              		.loc 1 1122 0
 2491 0048 FB1D     		add	r3, r7, #7
 2492 004a 1B78     		ldrb	r3, [r3]
1123:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 2493              		.loc 1 1123 0
 2494 004c 181C     		mov	r0, r3
 2495 004e BD46     		mov	sp, r7
 2496 0050 02B0     		add	sp, sp, #8
 2497              		@ sp needed
 2498 0052 80BD     		pop	{r7, pc}
 2499              	.L163:
 2500              		.align	2
 2501              	.L162:
 2502 0054 00200240 		.word	1073881088
 2503              		.cfi_endproc
 2504              	.LFE59:
 2506              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 2507              		.align	2
 2508              		.global	FLASH_WaitForLastOperation
 2509              		.code	16
 2510              		.thumb_func
 2512              	FLASH_WaitForLastOperation:
 2513              	.LFB60:
1124:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
1125:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** 
1126:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** /**
1127:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @brief  Waits for a FLASH operation to complete or a TIMEOUT to occur.
1128:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @param  Timeout: FLASH programming Timeout
1129:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
1130:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1131:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   */
1132:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
1133:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** { 
 2514              		.loc 1 1133 0
 2515              		.cfi_startproc
 2516 0000 90B5     		push	{r4, r7, lr}
 2517              		.cfi_def_cfa_offset 12
 2518              		.cfi_offset 4, -12
 2519              		.cfi_offset 7, -8
 2520              		.cfi_offset 14, -4
 2521 0002 85B0     		sub	sp, sp, #20
 2522              		.cfi_def_cfa_offset 32
 2523 0004 00AF     		add	r7, sp, #0
 2524              		.cfi_def_cfa_register 7
 2525 0006 7860     		str	r0, [r7, #4]
1134:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 2526              		.loc 1 1134 0
 2527 0008 3B1C     		mov	r3, r7
 2528 000a 0F33     		add	r3, r3, #15
 2529 000c 0422     		mov	r2, #4
 2530 000e 1A70     		strb	r2, [r3]
1135:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****    
1136:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Check for the FLASH Status */
1137:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   status = FLASH_GetStatus();
 2531              		.loc 1 1137 0
 2532 0010 3C1C     		mov	r4, r7
 2533 0012 0F34     		add	r4, r4, #15
 2534 0014 FFF7FEFF 		bl	FLASH_GetStatus
 2535 0018 031C     		mov	r3, r0
 2536 001a 2370     		strb	r3, [r4]
1138:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
1139:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
1140:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   while((status == FLASH_BUSY) && (Timeout != 0x00))
 2537              		.loc 1 1140 0
 2538 001c 08E0     		b	.L165
 2539              	.L167:
1141:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
1142:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_GetStatus();
 2540              		.loc 1 1142 0
 2541 001e 3C1C     		mov	r4, r7
 2542 0020 0F34     		add	r4, r4, #15
 2543 0022 FFF7FEFF 		bl	FLASH_GetStatus
 2544 0026 031C     		mov	r3, r0
 2545 0028 2370     		strb	r3, [r4]
1143:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     Timeout--;
 2546              		.loc 1 1143 0
 2547 002a 7B68     		ldr	r3, [r7, #4]
 2548 002c 013B     		sub	r3, r3, #1
 2549 002e 7B60     		str	r3, [r7, #4]
 2550              	.L165:
1140:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   while((status == FLASH_BUSY) && (Timeout != 0x00))
 2551              		.loc 1 1140 0 discriminator 1
 2552 0030 3B1C     		mov	r3, r7
 2553 0032 0F33     		add	r3, r3, #15
 2554 0034 1B78     		ldrb	r3, [r3]
 2555 0036 012B     		cmp	r3, #1
 2556 0038 02D1     		bne	.L166
1140:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   while((status == FLASH_BUSY) && (Timeout != 0x00))
 2557              		.loc 1 1140 0 is_stmt 0 discriminator 2
 2558 003a 7B68     		ldr	r3, [r7, #4]
 2559 003c 002B     		cmp	r3, #0
 2560 003e EED1     		bne	.L167
 2561              	.L166:
1144:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
1145:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   
1146:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   if(Timeout == 0x00 )
 2562              		.loc 1 1146 0 is_stmt 1
 2563 0040 7B68     		ldr	r3, [r7, #4]
 2564 0042 002B     		cmp	r3, #0
 2565 0044 03D1     		bne	.L168
1147:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   {
1148:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****     status = FLASH_TIMEOUT;
 2566              		.loc 1 1148 0
 2567 0046 3B1C     		mov	r3, r7
 2568 0048 0F33     		add	r3, r3, #15
 2569 004a 0522     		mov	r2, #5
 2570 004c 1A70     		strb	r2, [r3]
 2571              	.L168:
1149:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   }
1150:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   /* Return the operation status */
1151:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c ****   return status;
 2572              		.loc 1 1151 0
 2573 004e 3B1C     		mov	r3, r7
 2574 0050 0F33     		add	r3, r3, #15
 2575 0052 1B78     		ldrb	r3, [r3]
1152:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_flash.c **** }
 2576              		.loc 1 1152 0
 2577 0054 181C     		mov	r0, r3
 2578 0056 BD46     		mov	sp, r7
 2579 0058 05B0     		add	sp, sp, #20
 2580              		@ sp needed
 2581 005a 90BD     		pop	{r4, r7, pc}
 2582              		.cfi_endproc
 2583              	.LFE60:
 2585              		.text
 2586              	.Letext0:
 2587              		.file 2 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/machine/_default_types
 2588              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/stdint.h"
 2589              		.file 4 "../../ext-src/CMSIS/ST/STM32F0xx/Include/stm32f0xx.h"
 2590              		.file 5 "../../ext-src/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_flash.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_flash.c
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:18     .rodata:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:23     .text.FLASH_SetLatency:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:28     .text.FLASH_SetLatency:0000000000000000 FLASH_SetLatency
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:84     .text.FLASH_SetLatency:0000000000000044 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:90     .text.FLASH_PrefetchBufferCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:95     .text.FLASH_PrefetchBufferCmd:0000000000000000 FLASH_PrefetchBufferCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:155    .text.FLASH_PrefetchBufferCmd:0000000000000050 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:161    .text.FLASH_GetPrefetchBufferStatus:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:166    .text.FLASH_GetPrefetchBufferStatus:0000000000000000 FLASH_GetPrefetchBufferStatus
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:211    .text.FLASH_GetPrefetchBufferStatus:0000000000000030 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:216    .text.FLASH_Unlock:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:221    .text.FLASH_Unlock:0000000000000000 FLASH_Unlock
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:253    .text.FLASH_Unlock:0000000000000020 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:260    .text.FLASH_Lock:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:265    .text.FLASH_Lock:0000000000000000 FLASH_Lock
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:289    .text.FLASH_Lock:0000000000000014 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:294    .text.FLASH_ErasePage:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:299    .text.FLASH_ErasePage:0000000000000000 FLASH_ErasePage
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2512   .text.FLASH_WaitForLastOperation:0000000000000000 FLASH_WaitForLastOperation
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:400    .text.FLASH_ErasePage:0000000000000094 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:408    .text.FLASH_EraseAllPages:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:413    .text.FLASH_EraseAllPages:0000000000000000 FLASH_EraseAllPages
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:485    .text.FLASH_EraseAllPages:0000000000000064 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:490    .text.FLASH_ProgramWord:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:495    .text.FLASH_ProgramWord:0000000000000000 FLASH_ProgramWord
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:628    .text.FLASH_ProgramWord:00000000000000cc $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:636    .text.FLASH_ProgramHalfWord:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:641    .text.FLASH_ProgramHalfWord:0000000000000000 FLASH_ProgramHalfWord
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:739    .text.FLASH_ProgramHalfWord:0000000000000090 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:747    .text.FLASH_OB_Unlock:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:752    .text.FLASH_OB_Unlock:0000000000000000 FLASH_OB_Unlock
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:785    .text.FLASH_OB_Unlock:0000000000000020 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:792    .text.FLASH_OB_Lock:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:797    .text.FLASH_OB_Lock:0000000000000000 FLASH_OB_Lock
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:821    .text.FLASH_OB_Lock:0000000000000014 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:827    .text.FLASH_OB_Launch:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:832    .text.FLASH_OB_Launch:0000000000000000 FLASH_OB_Launch
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:857    .text.FLASH_OB_Launch:0000000000000018 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:862    .text.FLASH_OB_Erase:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:867    .text.FLASH_OB_Erase:0000000000000000 FLASH_OB_Erase
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2146   .text.FLASH_OB_GetRDP:0000000000000000 FLASH_OB_GetRDP
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1004   .text.FLASH_OB_Erase:00000000000000d0 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1010   .text.FLASH_OB_EnableWRP:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1015   .text.FLASH_OB_EnableWRP:0000000000000000 FLASH_OB_EnableWRP
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1176   .text.FLASH_OB_EnableWRP:00000000000000fc $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1184   .text.FLASH_OB_RDPConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1189   .text.FLASH_OB_RDPConfig:0000000000000000 FLASH_OB_RDPConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1341   .text.FLASH_OB_RDPConfig:00000000000000f0 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1349   .text.FLASH_OB_UserConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1354   .text.FLASH_OB_UserConfig:0000000000000000 FLASH_OB_UserConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1502   .text.FLASH_OB_UserConfig:00000000000000f0 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1511   .text.FLASH_OB_BOOTConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1516   .text.FLASH_OB_BOOTConfig:0000000000000000 FLASH_OB_BOOTConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1621   .text.FLASH_OB_BOOTConfig:00000000000000a0 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1628   .text.FLASH_OB_VDDAConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1633   .text.FLASH_OB_VDDAConfig:0000000000000000 FLASH_OB_VDDAConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1737   .text.FLASH_OB_VDDAConfig:00000000000000a0 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1745   .text.FLASH_OB_SRAMParityConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1750   .text.FLASH_OB_SRAMParityConfig:0000000000000000 FLASH_OB_SRAMParityConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1855   .text.FLASH_OB_SRAMParityConfig:00000000000000a0 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1862   .text.FLASH_OB_WriteUser:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1867   .text.FLASH_OB_WriteUser:0000000000000000 FLASH_OB_WriteUser
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1955   .text.FLASH_OB_WriteUser:0000000000000084 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1961   .text.FLASH_ProgramOptionByteData:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:1966   .text.FLASH_ProgramOptionByteData:0000000000000000 FLASH_ProgramOptionByteData
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2068   .text.FLASH_ProgramOptionByteData:000000000000009c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2077   .text.FLASH_OB_GetUser:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2082   .text.FLASH_OB_GetUser:0000000000000000 FLASH_OB_GetUser
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2105   .text.FLASH_OB_GetUser:0000000000000014 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2110   .text.FLASH_OB_GetWRP:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2115   .text.FLASH_OB_GetWRP:0000000000000000 FLASH_OB_GetWRP
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2136   .text.FLASH_OB_GetWRP:0000000000000010 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2141   .text.FLASH_OB_GetRDP:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2193   .text.FLASH_OB_GetRDP:0000000000000034 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2198   .text.FLASH_ITConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2203   .text.FLASH_ITConfig:0000000000000000 FLASH_ITConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2283   .text.FLASH_ITConfig:0000000000000070 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2292   .text.FLASH_GetFlagStatus:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2297   .text.FLASH_GetFlagStatus:0000000000000000 FLASH_GetFlagStatus
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2367   .text.FLASH_GetFlagStatus:0000000000000060 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2374   .text.FLASH_ClearFlag:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2379   .text.FLASH_ClearFlag:0000000000000000 FLASH_ClearFlag
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2421   .text.FLASH_ClearFlag:0000000000000030 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2428   .text.FLASH_GetStatus:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2433   .text.FLASH_GetStatus:0000000000000000 FLASH_GetStatus
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2502   .text.FLASH_GetStatus:0000000000000054 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccs5WY3f.s:2507   .text.FLASH_WaitForLastOperation:0000000000000000 $t
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.9252205565be9cbc11fa49e4ee70d556
                           .group:0000000000000000 wm4.stm32f0xx.h.54.664bd2bdbb20859ae6a5c66c16d4ee5a
                           .group:0000000000000000 wm4.core_cm0.h.32.41c1bd92799bc17b3c8424dd5c622427
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cm0.h.130.eea61816b4c7004601b0935484a214ea
                           .group:0000000000000000 wm4.stm32f0xx.h.226.38dd78fa77e64690c744af5bf4bffc7b
                           .group:0000000000000000 wm4.stm32f0xx_cec.h.80.d17e4ea90700c26010f339885be92ac0
                           .group:0000000000000000 wm4.stm32f0xx_crc.h.31.48fbd36307d848f32978567b16118557
                           .group:0000000000000000 wm4.stm32f0xx_comp.h.31.a640b8c7673f3e181cfd826dce70b6e2
                           .group:0000000000000000 wm4.stm32f0xx_dac.h.31.3e178ad0888f70df8fbc4c999d855b3e
                           .group:0000000000000000 wm4.stm32f0xx_dbgmcu.h.31.282da985c6ed8dd33417cf074ecfdf63
                           .group:0000000000000000 wm4.stm32f0xx_dma.h.31.68def2497939cb34c3f292e0c507724a
                           .group:0000000000000000 wm4.stm32f0xx_exti.h.31.81a00331ef3e014ed4dafe9e9baacca3
                           .group:0000000000000000 wm4.stm32f0xx_flash.h.31.60d92ed32439cfb92572ec2678e2be21
                           .group:0000000000000000 wm4.stm32f0xx_gpio.h.31.df5c3a39b21131ade11d30b7e1580be6
                           .group:0000000000000000 wm4.stm32f0xx_syscfg.h.31.f98c72ea26c47fccafefd977b75786d3
                           .group:0000000000000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:0000000000000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:0000000000000000 wm4.stm32f0xx_pwr.h.31.5b469253a65db741700e0b45f396c99d
                           .group:0000000000000000 wm4.stm32f0xx_rcc.h.31.bc2f5dd9e2f518d727a1e0ce497a42e6
                           .group:0000000000000000 wm4.stm32f0xx_rtc.h.31.bc9d631913a743746cf54f04d4efbf7b
                           .group:0000000000000000 wm4.stm32f0xx_spi.h.31.5b4d0d36c03feb5b081143cdba79744d
                           .group:0000000000000000 wm4.stm32f0xx_tim.h.31.21b4d7229c685868595d751757b51e1b
                           .group:0000000000000000 wm4.stm32f0xx_usart.h.31.8abae79a1c4f266d08faf5996370b48f
                           .group:0000000000000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:0000000000000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6

UNDEFINED SYMBOLS
assert_failed
