   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"USART_SM.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.decodedMsg,"aw",%nobits
  18              		.align	2
  21              	decodedMsg:
  22 0000 00000000 		.space	8
  22      00000000 
  23              		.section	.bss.gotNewDecodedMessage,"aw",%nobits
  26              	gotNewDecodedMessage:
  27 0000 00       		.space	1
  28              		.section	.bss.receiveBuffer,"aw",%nobits
  29              		.align	2
  32              	receiveBuffer:
  33 0000 00000000 		.space	128
  33      00000000 
  33      00000000 
  33      00000000 
  33      00000000 
  34              		.section	.bss.receiveFiFo,"aw",%nobits
  35              		.align	2
  38              	receiveFiFo:
  39 0000 00000000 		.space	20
  39      00000000 
  39      00000000 
  39      00000000 
  39      00000000 
  40              		.section	.bss.argReadCtr,"aw",%nobits
  43              	argReadCtr:
  44 0000 00       		.space	1
  45              		.section	.bss.currentState,"aw",%nobits
  46              		.align	2
  49              	currentState:
  50 0000 00000000 		.space	4
  51              		.section	.text.USART_SM_init,"ax",%progbits
  52              		.align	2
  53              		.global	USART_SM_init
  54              		.code	16
  55              		.thumb_func
  57              	USART_SM_init:
  58              	.LFB32:
  59              		.file 1 "../../src/app/RecordingLight/USART_SM.c"
   1:../../src/app/RecordingLight/USART_SM.c **** /*
   2:../../src/app/RecordingLight/USART_SM.c ****  * USART_SM.c
   3:../../src/app/RecordingLight/USART_SM.c ****  *
   4:../../src/app/RecordingLight/USART_SM.c ****  *  Created on: Jul 15, 2014
   5:../../src/app/RecordingLight/USART_SM.c ****  *      Author: jonasbachli
   6:../../src/app/RecordingLight/USART_SM.c ****  */
   7:../../src/app/RecordingLight/USART_SM.c **** 
   8:../../src/app/RecordingLight/USART_SM.c **** #include "USART_SM.h"
   9:../../src/app/RecordingLight/USART_SM.c **** 
  10:../../src/app/RecordingLight/USART_SM.c **** #include "USART1.h"
  11:../../src/app/RecordingLight/USART_SM.c **** #include "FiFo.h"
  12:../../src/app/RecordingLight/USART_SM.c **** 
  13:../../src/app/RecordingLight/USART_SM.c **** #include <string.h>
  14:../../src/app/RecordingLight/USART_SM.c **** 
  15:../../src/app/RecordingLight/USART_SM.c **** /////////////////////////////////////
  16:../../src/app/RecordingLight/USART_SM.c **** // forward declarations
  17:../../src/app/RecordingLight/USART_SM.c **** /////////////////////////////////////
  18:../../src/app/RecordingLight/USART_SM.c **** 
  19:../../src/app/RecordingLight/USART_SM.c **** #define RECEIVE_BUFFER_SIZE		(128)
  20:../../src/app/RecordingLight/USART_SM.c **** 
  21:../../src/app/RecordingLight/USART_SM.c **** typedef void (*stateFct)(uint8_t byte);
  22:../../src/app/RecordingLight/USART_SM.c **** 
  23:../../src/app/RecordingLight/USART_SM.c **** static void receiveByteCallback(uint8_t byte);
  24:../../src/app/RecordingLight/USART_SM.c **** 
  25:../../src/app/RecordingLight/USART_SM.c **** static void readHeader(uint8_t byte);
  26:../../src/app/RecordingLight/USART_SM.c **** static void readCommand(uint8_t byte);
  27:../../src/app/RecordingLight/USART_SM.c **** static void readArg(uint8_t byte);
  28:../../src/app/RecordingLight/USART_SM.c **** 
  29:../../src/app/RecordingLight/USART_SM.c **** /////////////////////////////////////
  30:../../src/app/RecordingLight/USART_SM.c **** // private variables
  31:../../src/app/RecordingLight/USART_SM.c **** /////////////////////////////////////
  32:../../src/app/RecordingLight/USART_SM.c **** 
  33:../../src/app/RecordingLight/USART_SM.c **** static RLMsg decodedMsg;
  34:../../src/app/RecordingLight/USART_SM.c **** static bool gotNewDecodedMessage;
  35:../../src/app/RecordingLight/USART_SM.c **** volatile static uint8_t receiveBuffer[RECEIVE_BUFFER_SIZE];
  36:../../src/app/RecordingLight/USART_SM.c **** volatile static FiFo receiveFiFo;
  37:../../src/app/RecordingLight/USART_SM.c **** static uint8_t argReadCtr;
  38:../../src/app/RecordingLight/USART_SM.c **** static stateFct currentState;
  39:../../src/app/RecordingLight/USART_SM.c **** 
  40:../../src/app/RecordingLight/USART_SM.c **** /////////////////////////////////////
  41:../../src/app/RecordingLight/USART_SM.c **** // public functions
  42:../../src/app/RecordingLight/USART_SM.c **** /////////////////////////////////////
  43:../../src/app/RecordingLight/USART_SM.c **** 
  44:../../src/app/RecordingLight/USART_SM.c **** void USART_SM_init(void){
  60              		.loc 1 44 0
  61              		.cfi_startproc
  62 0000 80B5     		push	{r7, lr}
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 7, -8
  65              		.cfi_offset 14, -4
  66 0002 00AF     		add	r7, sp, #0
  67              		.cfi_def_cfa_register 7
  45:../../src/app/RecordingLight/USART_SM.c **** 	FiFo_init(&receiveFiFo, (void*) receiveBuffer, 1, RECEIVE_BUFFER_SIZE);
  68              		.loc 1 45 0
  69 0004 0A4A     		ldr	r2, .L2
  70 0006 0B4B     		ldr	r3, .L2+4
  71 0008 101C     		mov	r0, r2
  72 000a 191C     		mov	r1, r3
  73 000c 0122     		mov	r2, #1
  74 000e 8023     		mov	r3, #128
  75 0010 FFF7FEFF 		bl	FiFo_init
  46:../../src/app/RecordingLight/USART_SM.c **** 
  47:../../src/app/RecordingLight/USART_SM.c **** 	gotNewDecodedMessage = false;
  76              		.loc 1 47 0
  77 0014 084B     		ldr	r3, .L2+8
  78 0016 0022     		mov	r2, #0
  79 0018 1A70     		strb	r2, [r3]
  48:../../src/app/RecordingLight/USART_SM.c **** 	currentState = &readHeader;
  80              		.loc 1 48 0
  81 001a 084B     		ldr	r3, .L2+12
  82 001c 084A     		ldr	r2, .L2+16
  83 001e 1A60     		str	r2, [r3]
  49:../../src/app/RecordingLight/USART_SM.c **** 
  50:../../src/app/RecordingLight/USART_SM.c **** 	USART1_setByteReceivedCallback(&receiveByteCallback);
  84              		.loc 1 50 0
  85 0020 084B     		ldr	r3, .L2+20
  86 0022 181C     		mov	r0, r3
  87 0024 FFF7FEFF 		bl	USART1_setByteReceivedCallback
  51:../../src/app/RecordingLight/USART_SM.c **** 	USART1_init();
  88              		.loc 1 51 0
  89 0028 FFF7FEFF 		bl	USART1_init
  52:../../src/app/RecordingLight/USART_SM.c **** }
  90              		.loc 1 52 0
  91 002c BD46     		mov	sp, r7
  92              		@ sp needed
  93 002e 80BD     		pop	{r7, pc}
  94              	.L3:
  95              		.align	2
  96              	.L2:
  97 0030 00000000 		.word	receiveFiFo
  98 0034 00000000 		.word	receiveBuffer
  99 0038 00000000 		.word	gotNewDecodedMessage
 100 003c 00000000 		.word	currentState
 101 0040 00000000 		.word	readHeader
 102 0044 00000000 		.word	receiveByteCallback
 103              		.cfi_endproc
 104              	.LFE32:
 106              		.section	.text.USART_SM_tick,"ax",%progbits
 107              		.align	2
 108              		.global	USART_SM_tick
 109              		.code	16
 110              		.thumb_func
 112              	USART_SM_tick:
 113              	.LFB33:
  53:../../src/app/RecordingLight/USART_SM.c **** 
  54:../../src/app/RecordingLight/USART_SM.c **** void USART_SM_tick(void){
 114              		.loc 1 54 0
 115              		.cfi_startproc
 116 0000 80B5     		push	{r7, lr}
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 7, -8
 119              		.cfi_offset 14, -4
 120 0002 82B0     		sub	sp, sp, #8
 121              		.cfi_def_cfa_offset 16
 122 0004 00AF     		add	r7, sp, #0
 123              		.cfi_def_cfa_register 7
  55:../../src/app/RecordingLight/USART_SM.c **** 	uint8_t dataByte;
  56:../../src/app/RecordingLight/USART_SM.c **** 	while (FiFo_pop(&receiveFiFo, &dataByte) && !gotNewDecodedMessage){
 124              		.loc 1 56 0
 125 0006 05E0     		b	.L5
 126              	.L7:
  57:../../src/app/RecordingLight/USART_SM.c **** 		currentState(dataByte);
 127              		.loc 1 57 0
 128 0008 0C4B     		ldr	r3, .L8
 129 000a 1B68     		ldr	r3, [r3]
 130 000c FA1D     		add	r2, r7, #7
 131 000e 1278     		ldrb	r2, [r2]
 132 0010 101C     		mov	r0, r2
 133 0012 9847     		blx	r3
 134              	.L5:
  56:../../src/app/RecordingLight/USART_SM.c **** 	while (FiFo_pop(&receiveFiFo, &dataByte) && !gotNewDecodedMessage){
 135              		.loc 1 56 0 discriminator 1
 136 0014 0A4A     		ldr	r2, .L8+4
 137 0016 FB1D     		add	r3, r7, #7
 138 0018 101C     		mov	r0, r2
 139 001a 191C     		mov	r1, r3
 140 001c FFF7FEFF 		bl	FiFo_pop
 141 0020 031C     		mov	r3, r0
 142 0022 002B     		cmp	r3, #0
 143 0024 06D0     		beq	.L4
  56:../../src/app/RecordingLight/USART_SM.c **** 	while (FiFo_pop(&receiveFiFo, &dataByte) && !gotNewDecodedMessage){
 144              		.loc 1 56 0 is_stmt 0 discriminator 2
 145 0026 074B     		ldr	r3, .L8+8
 146 0028 1B78     		ldrb	r3, [r3]
 147 002a 0122     		mov	r2, #1
 148 002c 5340     		eor	r3, r2
 149 002e DBB2     		uxtb	r3, r3
 150 0030 002B     		cmp	r3, #0
 151 0032 E9D1     		bne	.L7
 152              	.L4:
  58:../../src/app/RecordingLight/USART_SM.c **** 	}
  59:../../src/app/RecordingLight/USART_SM.c **** }
 153              		.loc 1 59 0 is_stmt 1
 154 0034 BD46     		mov	sp, r7
 155 0036 02B0     		add	sp, sp, #8
 156              		@ sp needed
 157 0038 80BD     		pop	{r7, pc}
 158              	.L9:
 159 003a C046     		.align	2
 160              	.L8:
 161 003c 00000000 		.word	currentState
 162 0040 00000000 		.word	receiveFiFo
 163 0044 00000000 		.word	gotNewDecodedMessage
 164              		.cfi_endproc
 165              	.LFE33:
 167              		.section	.text.USART_SM_getMessage,"ax",%progbits
 168              		.align	2
 169              		.global	USART_SM_getMessage
 170              		.code	16
 171              		.thumb_func
 173              	USART_SM_getMessage:
 174              	.LFB34:
  60:../../src/app/RecordingLight/USART_SM.c **** 
  61:../../src/app/RecordingLight/USART_SM.c **** bool USART_SM_getMessage(RLMsg* msg){
 175              		.loc 1 61 0
 176              		.cfi_startproc
 177 0000 80B5     		push	{r7, lr}
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 82B0     		sub	sp, sp, #8
 182              		.cfi_def_cfa_offset 16
 183 0004 00AF     		add	r7, sp, #0
 184              		.cfi_def_cfa_register 7
 185 0006 7860     		str	r0, [r7, #4]
  62:../../src/app/RecordingLight/USART_SM.c **** 	if (gotNewDecodedMessage){
 186              		.loc 1 62 0
 187 0008 0A4B     		ldr	r3, .L13
 188 000a 1B78     		ldrb	r3, [r3]
 189 000c 002B     		cmp	r3, #0
 190 000e 0BD0     		beq	.L11
  63:../../src/app/RecordingLight/USART_SM.c **** 		gotNewDecodedMessage = false;
 191              		.loc 1 63 0
 192 0010 084B     		ldr	r3, .L13
 193 0012 0022     		mov	r2, #0
 194 0014 1A70     		strb	r2, [r3]
  64:../../src/app/RecordingLight/USART_SM.c **** 		memcpy(msg, &decodedMsg, sizeof(RLMsg));
 195              		.loc 1 64 0
 196 0016 7A68     		ldr	r2, [r7, #4]
 197 0018 074B     		ldr	r3, .L13+4
 198 001a 101C     		mov	r0, r2
 199 001c 191C     		mov	r1, r3
 200 001e 0822     		mov	r2, #8
 201 0020 FFF7FEFF 		bl	memcpy
  65:../../src/app/RecordingLight/USART_SM.c **** 		return true;
 202              		.loc 1 65 0
 203 0024 0123     		mov	r3, #1
 204 0026 00E0     		b	.L12
 205              	.L11:
  66:../../src/app/RecordingLight/USART_SM.c **** 	}
  67:../../src/app/RecordingLight/USART_SM.c **** 	return false;
 206              		.loc 1 67 0
 207 0028 0023     		mov	r3, #0
 208              	.L12:
  68:../../src/app/RecordingLight/USART_SM.c **** }
 209              		.loc 1 68 0
 210 002a 181C     		mov	r0, r3
 211 002c BD46     		mov	sp, r7
 212 002e 02B0     		add	sp, sp, #8
 213              		@ sp needed
 214 0030 80BD     		pop	{r7, pc}
 215              	.L14:
 216 0032 C046     		.align	2
 217              	.L13:
 218 0034 00000000 		.word	gotNewDecodedMessage
 219 0038 00000000 		.word	decodedMsg
 220              		.cfi_endproc
 221              	.LFE34:
 223              		.section	.text.USART_SM_sendMessage,"ax",%progbits
 224              		.align	2
 225              		.global	USART_SM_sendMessage
 226              		.code	16
 227              		.thumb_func
 229              	USART_SM_sendMessage:
 230              	.LFB35:
  69:../../src/app/RecordingLight/USART_SM.c **** 
  70:../../src/app/RecordingLight/USART_SM.c **** void USART_SM_sendMessage(RLMsg* msg){
 231              		.loc 1 70 0
 232              		.cfi_startproc
 233 0000 80B5     		push	{r7, lr}
 234              		.cfi_def_cfa_offset 8
 235              		.cfi_offset 7, -8
 236              		.cfi_offset 14, -4
 237 0002 82B0     		sub	sp, sp, #8
 238              		.cfi_def_cfa_offset 16
 239 0004 00AF     		add	r7, sp, #0
 240              		.cfi_def_cfa_register 7
 241 0006 7860     		str	r0, [r7, #4]
  71:../../src/app/RecordingLight/USART_SM.c **** 	USART1_sendByte(RL_RESPONSE_HEADER);
 242              		.loc 1 71 0
 243 0008 2B20     		mov	r0, #43
 244 000a FFF7FEFF 		bl	USART1_sendByte
  72:../../src/app/RecordingLight/USART_SM.c **** 	USART1_sendByte(msg->cmd);
 245              		.loc 1 72 0
 246 000e 7B68     		ldr	r3, [r7, #4]
 247 0010 1B78     		ldrb	r3, [r3]
 248 0012 181C     		mov	r0, r3
 249 0014 FFF7FEFF 		bl	USART1_sendByte
  73:../../src/app/RecordingLight/USART_SM.c **** 	USART1_sendByte((msg->arg >> 24) & 0x000000ff);
 250              		.loc 1 73 0
 251 0018 7B68     		ldr	r3, [r7, #4]
 252 001a 5B68     		ldr	r3, [r3, #4]
 253 001c 1B0E     		lsr	r3, r3, #24
 254 001e DBB2     		uxtb	r3, r3
 255 0020 181C     		mov	r0, r3
 256 0022 FFF7FEFF 		bl	USART1_sendByte
  74:../../src/app/RecordingLight/USART_SM.c **** 	USART1_sendByte((msg->arg >> 16) & 0x000000ff);
 257              		.loc 1 74 0
 258 0026 7B68     		ldr	r3, [r7, #4]
 259 0028 5B68     		ldr	r3, [r3, #4]
 260 002a 1B0C     		lsr	r3, r3, #16
 261 002c DBB2     		uxtb	r3, r3
 262 002e 181C     		mov	r0, r3
 263 0030 FFF7FEFF 		bl	USART1_sendByte
  75:../../src/app/RecordingLight/USART_SM.c **** 	USART1_sendByte((msg->arg >> 8) & 0x000000ff);
 264              		.loc 1 75 0
 265 0034 7B68     		ldr	r3, [r7, #4]
 266 0036 5B68     		ldr	r3, [r3, #4]
 267 0038 1B0A     		lsr	r3, r3, #8
 268 003a DBB2     		uxtb	r3, r3
 269 003c 181C     		mov	r0, r3
 270 003e FFF7FEFF 		bl	USART1_sendByte
  76:../../src/app/RecordingLight/USART_SM.c **** 	USART1_sendByte((msg->arg) & 0x000000ff);
 271              		.loc 1 76 0
 272 0042 7B68     		ldr	r3, [r7, #4]
 273 0044 5B68     		ldr	r3, [r3, #4]
 274 0046 DBB2     		uxtb	r3, r3
 275 0048 181C     		mov	r0, r3
 276 004a FFF7FEFF 		bl	USART1_sendByte
  77:../../src/app/RecordingLight/USART_SM.c **** }
 277              		.loc 1 77 0
 278 004e BD46     		mov	sp, r7
 279 0050 02B0     		add	sp, sp, #8
 280              		@ sp needed
 281 0052 80BD     		pop	{r7, pc}
 282              		.cfi_endproc
 283              	.LFE35:
 285              		.section	.text.receiveByteCallback,"ax",%progbits
 286              		.align	2
 287              		.code	16
 288              		.thumb_func
 290              	receiveByteCallback:
 291              	.LFB36:
  78:../../src/app/RecordingLight/USART_SM.c **** 
  79:../../src/app/RecordingLight/USART_SM.c **** /////////////////////////////////////
  80:../../src/app/RecordingLight/USART_SM.c **** // private functions
  81:../../src/app/RecordingLight/USART_SM.c **** /////////////////////////////////////
  82:../../src/app/RecordingLight/USART_SM.c **** 
  83:../../src/app/RecordingLight/USART_SM.c **** static void receiveByteCallback(uint8_t byte){
 292              		.loc 1 83 0
 293              		.cfi_startproc
 294 0000 80B5     		push	{r7, lr}
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 82B0     		sub	sp, sp, #8
 299              		.cfi_def_cfa_offset 16
 300 0004 00AF     		add	r7, sp, #0
 301              		.cfi_def_cfa_register 7
 302 0006 021C     		mov	r2, r0
 303 0008 FB1D     		add	r3, r7, #7
 304 000a 1A70     		strb	r2, [r3]
  84:../../src/app/RecordingLight/USART_SM.c **** 	FiFo_push(&receiveFiFo, &byte);
 305              		.loc 1 84 0
 306 000c 044A     		ldr	r2, .L17
 307 000e FB1D     		add	r3, r7, #7
 308 0010 101C     		mov	r0, r2
 309 0012 191C     		mov	r1, r3
 310 0014 FFF7FEFF 		bl	FiFo_push
  85:../../src/app/RecordingLight/USART_SM.c **** }
 311              		.loc 1 85 0
 312 0018 BD46     		mov	sp, r7
 313 001a 02B0     		add	sp, sp, #8
 314              		@ sp needed
 315 001c 80BD     		pop	{r7, pc}
 316              	.L18:
 317 001e C046     		.align	2
 318              	.L17:
 319 0020 00000000 		.word	receiveFiFo
 320              		.cfi_endproc
 321              	.LFE36:
 323              		.section	.text.readHeader,"ax",%progbits
 324              		.align	2
 325              		.code	16
 326              		.thumb_func
 328              	readHeader:
 329              	.LFB37:
  86:../../src/app/RecordingLight/USART_SM.c **** 
  87:../../src/app/RecordingLight/USART_SM.c **** static void readHeader(uint8_t byte){
 330              		.loc 1 87 0
 331              		.cfi_startproc
 332 0000 80B5     		push	{r7, lr}
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 82B0     		sub	sp, sp, #8
 337              		.cfi_def_cfa_offset 16
 338 0004 00AF     		add	r7, sp, #0
 339              		.cfi_def_cfa_register 7
 340 0006 021C     		mov	r2, r0
 341 0008 FB1D     		add	r3, r7, #7
 342 000a 1A70     		strb	r2, [r3]
  88:../../src/app/RecordingLight/USART_SM.c **** 	if (byte == RL_CMD_HEADER){
 343              		.loc 1 88 0
 344 000c FB1D     		add	r3, r7, #7
 345 000e 1B78     		ldrb	r3, [r3]
 346 0010 3A2B     		cmp	r3, #58
 347 0012 02D1     		bne	.L19
  89:../../src/app/RecordingLight/USART_SM.c **** 		currentState = &readCommand;
 348              		.loc 1 89 0
 349 0014 024B     		ldr	r3, .L21
 350 0016 034A     		ldr	r2, .L21+4
 351 0018 1A60     		str	r2, [r3]
 352              	.L19:
  90:../../src/app/RecordingLight/USART_SM.c **** 	}
  91:../../src/app/RecordingLight/USART_SM.c **** }
 353              		.loc 1 91 0
 354 001a BD46     		mov	sp, r7
 355 001c 02B0     		add	sp, sp, #8
 356              		@ sp needed
 357 001e 80BD     		pop	{r7, pc}
 358              	.L22:
 359              		.align	2
 360              	.L21:
 361 0020 00000000 		.word	currentState
 362 0024 00000000 		.word	readCommand
 363              		.cfi_endproc
 364              	.LFE37:
 366              		.section	.text.readCommand,"ax",%progbits
 367              		.align	2
 368              		.code	16
 369              		.thumb_func
 371              	readCommand:
 372              	.LFB38:
  92:../../src/app/RecordingLight/USART_SM.c **** 
  93:../../src/app/RecordingLight/USART_SM.c **** static void readCommand(uint8_t byte){
 373              		.loc 1 93 0
 374              		.cfi_startproc
 375 0000 80B5     		push	{r7, lr}
 376              		.cfi_def_cfa_offset 8
 377              		.cfi_offset 7, -8
 378              		.cfi_offset 14, -4
 379 0002 82B0     		sub	sp, sp, #8
 380              		.cfi_def_cfa_offset 16
 381 0004 00AF     		add	r7, sp, #0
 382              		.cfi_def_cfa_register 7
 383 0006 021C     		mov	r2, r0
 384 0008 FB1D     		add	r3, r7, #7
 385 000a 1A70     		strb	r2, [r3]
  94:../../src/app/RecordingLight/USART_SM.c **** 	decodedMsg.cmd = byte;
 386              		.loc 1 94 0
 387 000c 074B     		ldr	r3, .L24
 388 000e FA1D     		add	r2, r7, #7
 389 0010 1278     		ldrb	r2, [r2]
 390 0012 1A70     		strb	r2, [r3]
  95:../../src/app/RecordingLight/USART_SM.c **** 	currentState = &readArg;
 391              		.loc 1 95 0
 392 0014 064B     		ldr	r3, .L24+4
 393 0016 074A     		ldr	r2, .L24+8
 394 0018 1A60     		str	r2, [r3]
  96:../../src/app/RecordingLight/USART_SM.c **** 	argReadCtr = 0;
 395              		.loc 1 96 0
 396 001a 074B     		ldr	r3, .L24+12
 397 001c 0022     		mov	r2, #0
 398 001e 1A70     		strb	r2, [r3]
  97:../../src/app/RecordingLight/USART_SM.c **** 	decodedMsg.arg = 0;
 399              		.loc 1 97 0
 400 0020 024B     		ldr	r3, .L24
 401 0022 0022     		mov	r2, #0
 402 0024 5A60     		str	r2, [r3, #4]
  98:../../src/app/RecordingLight/USART_SM.c **** }
 403              		.loc 1 98 0
 404 0026 BD46     		mov	sp, r7
 405 0028 02B0     		add	sp, sp, #8
 406              		@ sp needed
 407 002a 80BD     		pop	{r7, pc}
 408              	.L25:
 409              		.align	2
 410              	.L24:
 411 002c 00000000 		.word	decodedMsg
 412 0030 00000000 		.word	currentState
 413 0034 00000000 		.word	readArg
 414 0038 00000000 		.word	argReadCtr
 415              		.cfi_endproc
 416              	.LFE38:
 418              		.section	.text.readArg,"ax",%progbits
 419              		.align	2
 420              		.code	16
 421              		.thumb_func
 423              	readArg:
 424              	.LFB39:
  99:../../src/app/RecordingLight/USART_SM.c **** 
 100:../../src/app/RecordingLight/USART_SM.c **** static void readArg(uint8_t byte){
 425              		.loc 1 100 0
 426              		.cfi_startproc
 427 0000 90B5     		push	{r4, r7, lr}
 428              		.cfi_def_cfa_offset 12
 429              		.cfi_offset 4, -12
 430              		.cfi_offset 7, -8
 431              		.cfi_offset 14, -4
 432 0002 85B0     		sub	sp, sp, #20
 433              		.cfi_def_cfa_offset 32
 434 0004 00AF     		add	r7, sp, #0
 435              		.cfi_def_cfa_register 7
 436 0006 021C     		mov	r2, r0
 437 0008 FB1D     		add	r3, r7, #7
 438 000a 1A70     		strb	r2, [r3]
 101:../../src/app/RecordingLight/USART_SM.c **** 	uint8_t shiftCount = 4-argReadCtr;
 439              		.loc 1 101 0
 440 000c 174B     		ldr	r3, .L28
 441 000e 1A78     		ldrb	r2, [r3]
 442 0010 3B1C     		mov	r3, r7
 443 0012 0F33     		add	r3, r3, #15
 444 0014 0421     		mov	r1, #4
 445 0016 8A1A     		sub	r2, r1, r2
 446 0018 1A70     		strb	r2, [r3]
 102:../../src/app/RecordingLight/USART_SM.c **** 	decodedMsg.arg |= (0x000000ff<<shiftCount) & ( (uint32_t)byte << shiftCount);
 447              		.loc 1 102 0
 448 001a 154B     		ldr	r3, .L28+4
 449 001c 5A68     		ldr	r2, [r3, #4]
 450 001e 3B1C     		mov	r3, r7
 451 0020 0F33     		add	r3, r3, #15
 452 0022 1B78     		ldrb	r3, [r3]
 453 0024 FF21     		mov	r1, #255
 454 0026 081C     		mov	r0, r1
 455 0028 9840     		lsl	r0, r0, r3
 456 002a 031C     		mov	r3, r0
 457 002c F91D     		add	r1, r7, #7
 458 002e 0878     		ldrb	r0, [r1]
 459 0030 391C     		mov	r1, r7
 460 0032 0F31     		add	r1, r1, #15
 461 0034 0978     		ldrb	r1, [r1]
 462 0036 041C     		mov	r4, r0
 463 0038 8C40     		lsl	r4, r4, r1
 464 003a 211C     		mov	r1, r4
 465 003c 0B40     		and	r3, r1
 466 003e 1A43     		orr	r2, r3
 467 0040 0B4B     		ldr	r3, .L28+4
 468 0042 5A60     		str	r2, [r3, #4]
 103:../../src/app/RecordingLight/USART_SM.c **** 	argReadCtr++;
 469              		.loc 1 103 0
 470 0044 094B     		ldr	r3, .L28
 471 0046 1B78     		ldrb	r3, [r3]
 472 0048 0133     		add	r3, r3, #1
 473 004a DAB2     		uxtb	r2, r3
 474 004c 074B     		ldr	r3, .L28
 475 004e 1A70     		strb	r2, [r3]
 104:../../src/app/RecordingLight/USART_SM.c **** 	if (argReadCtr >= 4){
 476              		.loc 1 104 0
 477 0050 064B     		ldr	r3, .L28
 478 0052 1B78     		ldrb	r3, [r3]
 479 0054 032B     		cmp	r3, #3
 480 0056 05D9     		bls	.L26
 105:../../src/app/RecordingLight/USART_SM.c **** 		gotNewDecodedMessage = true;
 481              		.loc 1 105 0
 482 0058 064B     		ldr	r3, .L28+8
 483 005a 0122     		mov	r2, #1
 484 005c 1A70     		strb	r2, [r3]
 106:../../src/app/RecordingLight/USART_SM.c **** 		currentState = &readHeader;
 485              		.loc 1 106 0
 486 005e 064B     		ldr	r3, .L28+12
 487 0060 064A     		ldr	r2, .L28+16
 488 0062 1A60     		str	r2, [r3]
 489              	.L26:
 107:../../src/app/RecordingLight/USART_SM.c **** 	}
 108:../../src/app/RecordingLight/USART_SM.c **** }
 490              		.loc 1 108 0
 491 0064 BD46     		mov	sp, r7
 492 0066 05B0     		add	sp, sp, #20
 493              		@ sp needed
 494 0068 90BD     		pop	{r4, r7, pc}
 495              	.L29:
 496 006a C046     		.align	2
 497              	.L28:
 498 006c 00000000 		.word	argReadCtr
 499 0070 00000000 		.word	decodedMsg
 500 0074 00000000 		.word	gotNewDecodedMessage
 501 0078 00000000 		.word	currentState
 502 007c 00000000 		.word	readHeader
 503              		.cfi_endproc
 504              	.LFE39:
 506              		.text
 507              	.Letext0:
 508              		.file 2 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/machine/_default_types
 509              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/stdint.h"
 510              		.file 4 "../../src/app/RecordingLight/SerialProtocol.h"
 511              		.file 5 "../../src/lib/FiFo.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 USART_SM.c
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:18     .bss.decodedMsg:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:21     .bss.decodedMsg:0000000000000000 decodedMsg
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:26     .bss.gotNewDecodedMessage:0000000000000000 gotNewDecodedMessage
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:27     .bss.gotNewDecodedMessage:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:29     .bss.receiveBuffer:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:32     .bss.receiveBuffer:0000000000000000 receiveBuffer
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:35     .bss.receiveFiFo:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:38     .bss.receiveFiFo:0000000000000000 receiveFiFo
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:43     .bss.argReadCtr:0000000000000000 argReadCtr
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:44     .bss.argReadCtr:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:46     .bss.currentState:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:49     .bss.currentState:0000000000000000 currentState
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:52     .text.USART_SM_init:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:57     .text.USART_SM_init:0000000000000000 USART_SM_init
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:97     .text.USART_SM_init:0000000000000030 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:328    .text.readHeader:0000000000000000 readHeader
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:290    .text.receiveByteCallback:0000000000000000 receiveByteCallback
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:107    .text.USART_SM_tick:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:112    .text.USART_SM_tick:0000000000000000 USART_SM_tick
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:161    .text.USART_SM_tick:000000000000003c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:168    .text.USART_SM_getMessage:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:173    .text.USART_SM_getMessage:0000000000000000 USART_SM_getMessage
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:218    .text.USART_SM_getMessage:0000000000000034 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:224    .text.USART_SM_sendMessage:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:229    .text.USART_SM_sendMessage:0000000000000000 USART_SM_sendMessage
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:286    .text.receiveByteCallback:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:319    .text.receiveByteCallback:0000000000000020 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:324    .text.readHeader:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:361    .text.readHeader:0000000000000020 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:371    .text.readCommand:0000000000000000 readCommand
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:367    .text.readCommand:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:411    .text.readCommand:000000000000002c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:423    .text.readArg:0000000000000000 readArg
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:419    .text.readArg:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccirUB6j.s:498    .text.readArg:000000000000006c $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.9252205565be9cbc11fa49e4ee70d556
                           .group:0000000000000000 wm4.stm32f0xx.h.54.664bd2bdbb20859ae6a5c66c16d4ee5a
                           .group:0000000000000000 wm4.core_cm0.h.32.41c1bd92799bc17b3c8424dd5c622427
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cm0.h.130.eea61816b4c7004601b0935484a214ea
                           .group:0000000000000000 wm4.stm32f0xx.h.226.38dd78fa77e64690c744af5bf4bffc7b
                           .group:0000000000000000 wm4.stm32f0xx_cec.h.80.d17e4ea90700c26010f339885be92ac0
                           .group:0000000000000000 wm4.stm32f0xx_crc.h.31.48fbd36307d848f32978567b16118557
                           .group:0000000000000000 wm4.stm32f0xx_comp.h.31.a640b8c7673f3e181cfd826dce70b6e2
                           .group:0000000000000000 wm4.stm32f0xx_dac.h.31.3e178ad0888f70df8fbc4c999d855b3e
                           .group:0000000000000000 wm4.stm32f0xx_dbgmcu.h.31.282da985c6ed8dd33417cf074ecfdf63
                           .group:0000000000000000 wm4.stm32f0xx_dma.h.31.68def2497939cb34c3f292e0c507724a
                           .group:0000000000000000 wm4.stm32f0xx_exti.h.31.81a00331ef3e014ed4dafe9e9baacca3
                           .group:0000000000000000 wm4.stm32f0xx_flash.h.31.60d92ed32439cfb92572ec2678e2be21
                           .group:0000000000000000 wm4.stm32f0xx_gpio.h.31.df5c3a39b21131ade11d30b7e1580be6
                           .group:0000000000000000 wm4.stm32f0xx_syscfg.h.31.f98c72ea26c47fccafefd977b75786d3
                           .group:0000000000000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:0000000000000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:0000000000000000 wm4.stm32f0xx_pwr.h.31.5b469253a65db741700e0b45f396c99d
                           .group:0000000000000000 wm4.stm32f0xx_rcc.h.31.bc2f5dd9e2f518d727a1e0ce497a42e6
                           .group:0000000000000000 wm4.stm32f0xx_rtc.h.31.bc9d631913a743746cf54f04d4efbf7b
                           .group:0000000000000000 wm4.stm32f0xx_spi.h.31.5b4d0d36c03feb5b081143cdba79744d
                           .group:0000000000000000 wm4.stm32f0xx_tim.h.31.21b4d7229c685868595d751757b51e1b
                           .group:0000000000000000 wm4.stm32f0xx_usart.h.31.8abae79a1c4f266d08faf5996370b48f
                           .group:0000000000000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:0000000000000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6
                           .group:0000000000000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:0000000000000000 wm4.SerialProtocol.h.14.7f6a979098d45af4ca2e310b5fc856b2
                           .group:0000000000000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:0000000000000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:0000000000000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:0000000000000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:0000000000000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:0000000000000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:0000000000000000 wm4.cdefs.h.56.2827d744790910fcf1a21e59dae944ba
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:0000000000000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066

UNDEFINED SYMBOLS
FiFo_init
USART1_setByteReceivedCallback
USART1_init
FiFo_pop
memcpy
USART1_sendByte
FiFo_push
