   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"System.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NVIC_SetPriority,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	NVIC_SetPriority:
  23              	.LFB28:
  24              		.file 1 "../../ext-src/CMSIS/Include/core_cm0.h"
   1:../../ext-src/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:../../ext-src/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:../../ext-src/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:../../ext-src/CMSIS/Include/core_cm0.h ****  * @version  V2.10
   5:../../ext-src/CMSIS/Include/core_cm0.h ****  * @date     19. July 2011
   6:../../ext-src/CMSIS/Include/core_cm0.h ****  *
   7:../../ext-src/CMSIS/Include/core_cm0.h ****  * @note
   8:../../ext-src/CMSIS/Include/core_cm0.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:../../ext-src/CMSIS/Include/core_cm0.h ****  *
  10:../../ext-src/CMSIS/Include/core_cm0.h ****  * @par
  11:../../ext-src/CMSIS/Include/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../../ext-src/CMSIS/Include/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../../ext-src/CMSIS/Include/core_cm0.h ****  * within development tools that are supporting such ARM based processors.
  14:../../ext-src/CMSIS/Include/core_cm0.h ****  *
  15:../../ext-src/CMSIS/Include/core_cm0.h ****  * @par
  16:../../ext-src/CMSIS/Include/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../ext-src/CMSIS/Include/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../ext-src/CMSIS/Include/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../ext-src/CMSIS/Include/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../ext-src/CMSIS/Include/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../ext-src/CMSIS/Include/core_cm0.h ****  *
  22:../../ext-src/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  23:../../ext-src/CMSIS/Include/core_cm0.h **** #if defined ( __ICCARM__ )
  24:../../ext-src/CMSIS/Include/core_cm0.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
  26:../../ext-src/CMSIS/Include/core_cm0.h **** 
  27:../../ext-src/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  28:../../ext-src/CMSIS/Include/core_cm0.h ****  extern "C" {
  29:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
  30:../../ext-src/CMSIS/Include/core_cm0.h **** 
  31:../../ext-src/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:../../ext-src/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:../../ext-src/CMSIS/Include/core_cm0.h **** 
  34:../../ext-src/CMSIS/Include/core_cm0.h **** 
  35:../../ext-src/CMSIS/Include/core_cm0.h **** /** \mainpage CMSIS Cortex-M0
  36:../../ext-src/CMSIS/Include/core_cm0.h **** 
  37:../../ext-src/CMSIS/Include/core_cm0.h ****   This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
  38:../../ext-src/CMSIS/Include/core_cm0.h ****   It consists of:
  39:../../ext-src/CMSIS/Include/core_cm0.h **** 
  40:../../ext-src/CMSIS/Include/core_cm0.h ****      - Cortex-M Core Register Definitions
  41:../../ext-src/CMSIS/Include/core_cm0.h ****      - Cortex-M functions
  42:../../ext-src/CMSIS/Include/core_cm0.h ****      - Cortex-M instructions
  43:../../ext-src/CMSIS/Include/core_cm0.h **** 
  44:../../ext-src/CMSIS/Include/core_cm0.h ****   The CMSIS Cortex-M0 Core Peripheral Access Layer contains C and assembly functions that ease
  45:../../ext-src/CMSIS/Include/core_cm0.h ****   access to the Cortex-M Core
  46:../../ext-src/CMSIS/Include/core_cm0.h ****  */
  47:../../ext-src/CMSIS/Include/core_cm0.h **** 
  48:../../ext-src/CMSIS/Include/core_cm0.h **** /** \defgroup CMSIS_MISRA_Exceptions  CMSIS MISRA-C:2004 Compliance Exceptions
  49:../../ext-src/CMSIS/Include/core_cm0.h ****   CMSIS violates following MISRA-C2004 Rules:
  50:../../ext-src/CMSIS/Include/core_cm0.h ****   
  51:../../ext-src/CMSIS/Include/core_cm0.h ****    - Violates MISRA 2004 Required Rule 8.5, object/function definition in header file.<br>
  52:../../ext-src/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'. 
  53:../../ext-src/CMSIS/Include/core_cm0.h **** 
  54:../../ext-src/CMSIS/Include/core_cm0.h ****    - Violates MISRA 2004 Required Rule 18.4, declaration of union type or object of union type: '{.
  55:../../ext-src/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  56:../../ext-src/CMSIS/Include/core_cm0.h ****    
  57:../../ext-src/CMSIS/Include/core_cm0.h ****    - Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined.<br>
  58:../../ext-src/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code. 
  59:../../ext-src/CMSIS/Include/core_cm0.h **** 
  60:../../ext-src/CMSIS/Include/core_cm0.h ****  */
  61:../../ext-src/CMSIS/Include/core_cm0.h **** 
  62:../../ext-src/CMSIS/Include/core_cm0.h **** 
  63:../../ext-src/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  64:../../ext-src/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  65:../../ext-src/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  66:../../ext-src/CMSIS/Include/core_cm0.h **** /** \defgroup CMSIS_core_definitions CMSIS Core Definitions
  67:../../ext-src/CMSIS/Include/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  68:../../ext-src/CMSIS/Include/core_cm0.h ****    - CMSIS version number
  69:../../ext-src/CMSIS/Include/core_cm0.h ****    - Cortex-M core
  70:../../ext-src/CMSIS/Include/core_cm0.h ****    - Cortex-M core Revision Number
  71:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
  72:../../ext-src/CMSIS/Include/core_cm0.h ****  */
  73:../../ext-src/CMSIS/Include/core_cm0.h **** 
  74:../../ext-src/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  75:../../ext-src/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  76:../../ext-src/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x10)                                                       /*!<
  77:../../ext-src/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  78:../../ext-src/CMSIS/Include/core_cm0.h **** 
  79:../../ext-src/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
  80:../../ext-src/CMSIS/Include/core_cm0.h **** 
  81:../../ext-src/CMSIS/Include/core_cm0.h **** 
  82:../../ext-src/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:../../ext-src/CMSIS/Include/core_cm0.h **** 
  86:../../ext-src/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  87:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  88:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  89:../../ext-src/CMSIS/Include/core_cm0.h **** 
  90:../../ext-src/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  91:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  92:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  93:../../ext-src/CMSIS/Include/core_cm0.h **** 
  94:../../ext-src/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
  95:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  96:../../ext-src/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  97:../../ext-src/CMSIS/Include/core_cm0.h **** 
  98:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
  99:../../ext-src/CMSIS/Include/core_cm0.h **** 
 100:../../ext-src/CMSIS/Include/core_cm0.h **** /*!< __FPU_USED to be checked prior to making use of FPU specific registers and functions */
 101:../../ext-src/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0
 102:../../ext-src/CMSIS/Include/core_cm0.h **** 
 103:../../ext-src/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 104:../../ext-src/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 105:../../ext-src/CMSIS/Include/core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../../ext-src/CMSIS/Include/core_cm0.h ****   #endif
 107:../../ext-src/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 108:../../ext-src/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 109:../../ext-src/CMSIS/Include/core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 110:../../ext-src/CMSIS/Include/core_cm0.h ****   #endif
 111:../../ext-src/CMSIS/Include/core_cm0.h **** 
 112:../../ext-src/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 113:../../ext-src/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 114:../../ext-src/CMSIS/Include/core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 115:../../ext-src/CMSIS/Include/core_cm0.h ****   #endif
 116:../../ext-src/CMSIS/Include/core_cm0.h **** 
 117:../../ext-src/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 118:../../ext-src/CMSIS/Include/core_cm0.h ****     /* add preprocessor checks */
 119:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
 120:../../ext-src/CMSIS/Include/core_cm0.h **** 
 121:../../ext-src/CMSIS/Include/core_cm0.h **** #include <stdint.h>                      /*!< standard types definitions                      */
 122:../../ext-src/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
 123:../../ext-src/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
 124:../../ext-src/CMSIS/Include/core_cm0.h **** 
 125:../../ext-src/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 126:../../ext-src/CMSIS/Include/core_cm0.h **** 
 127:../../ext-src/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 128:../../ext-src/CMSIS/Include/core_cm0.h **** 
 129:../../ext-src/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 130:../../ext-src/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 131:../../ext-src/CMSIS/Include/core_cm0.h **** 
 132:../../ext-src/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 133:../../ext-src/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 134:../../ext-src/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 135:../../ext-src/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000
 136:../../ext-src/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 137:../../ext-src/CMSIS/Include/core_cm0.h ****   #endif
 138:../../ext-src/CMSIS/Include/core_cm0.h **** 
 139:../../ext-src/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 140:../../ext-src/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2
 141:../../ext-src/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 142:../../ext-src/CMSIS/Include/core_cm0.h ****   #endif
 143:../../ext-src/CMSIS/Include/core_cm0.h **** 
 144:../../ext-src/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 145:../../ext-src/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0
 146:../../ext-src/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 147:../../ext-src/CMSIS/Include/core_cm0.h ****   #endif
 148:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
 149:../../ext-src/CMSIS/Include/core_cm0.h **** 
 150:../../ext-src/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 151:../../ext-src/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 152:../../ext-src/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< defines 'read only' permissions                 */
 153:../../ext-src/CMSIS/Include/core_cm0.h **** #else
 154:../../ext-src/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< defines 'read only' permissions                 */
 155:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
 156:../../ext-src/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 157:../../ext-src/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 158:../../ext-src/CMSIS/Include/core_cm0.h **** 
 159:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_definitions */
 160:../../ext-src/CMSIS/Include/core_cm0.h **** 
 161:../../ext-src/CMSIS/Include/core_cm0.h **** 
 162:../../ext-src/CMSIS/Include/core_cm0.h **** 
 163:../../ext-src/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 164:../../ext-src/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 165:../../ext-src/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 166:../../ext-src/CMSIS/Include/core_cm0.h **** /** \defgroup CMSIS_core_register CMSIS Core Register
 167:../../ext-src/CMSIS/Include/core_cm0.h ****   Core Register contain:
 168:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core Register
 169:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 170:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 171:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 172:../../ext-src/CMSIS/Include/core_cm0.h **** */
 173:../../ext-src/CMSIS/Include/core_cm0.h **** 
 174:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 175:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_CORE CMSIS Core
 176:../../ext-src/CMSIS/Include/core_cm0.h ****   Type definitions for the Cortex-M Core Registers
 177:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 178:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 179:../../ext-src/CMSIS/Include/core_cm0.h **** 
 180:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 181:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 182:../../ext-src/CMSIS/Include/core_cm0.h **** typedef union
 183:../../ext-src/CMSIS/Include/core_cm0.h **** {
 184:../../ext-src/CMSIS/Include/core_cm0.h ****   struct
 185:../../ext-src/CMSIS/Include/core_cm0.h ****   {
 186:../../ext-src/CMSIS/Include/core_cm0.h **** #if (__CORTEX_M != 0x04)
 187:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 188:../../ext-src/CMSIS/Include/core_cm0.h **** #else
 189:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 190:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 191:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 192:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
 193:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 194:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 195:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 196:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 197:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 198:../../ext-src/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 199:../../ext-src/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 200:../../ext-src/CMSIS/Include/core_cm0.h **** } APSR_Type;
 201:../../ext-src/CMSIS/Include/core_cm0.h **** 
 202:../../ext-src/CMSIS/Include/core_cm0.h **** 
 203:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 204:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 205:../../ext-src/CMSIS/Include/core_cm0.h **** typedef union
 206:../../ext-src/CMSIS/Include/core_cm0.h **** {
 207:../../ext-src/CMSIS/Include/core_cm0.h ****   struct
 208:../../ext-src/CMSIS/Include/core_cm0.h ****   {
 209:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 210:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 211:../../ext-src/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 212:../../ext-src/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 213:../../ext-src/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 214:../../ext-src/CMSIS/Include/core_cm0.h **** 
 215:../../ext-src/CMSIS/Include/core_cm0.h **** 
 216:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 217:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 218:../../ext-src/CMSIS/Include/core_cm0.h **** typedef union
 219:../../ext-src/CMSIS/Include/core_cm0.h **** {
 220:../../ext-src/CMSIS/Include/core_cm0.h ****   struct
 221:../../ext-src/CMSIS/Include/core_cm0.h ****   {
 222:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 223:../../ext-src/CMSIS/Include/core_cm0.h **** #if (__CORTEX_M != 0x04)
 224:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 225:../../ext-src/CMSIS/Include/core_cm0.h **** #else
 226:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 227:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 228:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 229:../../ext-src/CMSIS/Include/core_cm0.h **** #endif
 230:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 231:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 232:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 233:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 234:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 235:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 236:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 237:../../ext-src/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 238:../../ext-src/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 239:../../ext-src/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 240:../../ext-src/CMSIS/Include/core_cm0.h **** 
 241:../../ext-src/CMSIS/Include/core_cm0.h **** 
 242:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 243:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 244:../../ext-src/CMSIS/Include/core_cm0.h **** typedef union
 245:../../ext-src/CMSIS/Include/core_cm0.h **** {
 246:../../ext-src/CMSIS/Include/core_cm0.h ****   struct
 247:../../ext-src/CMSIS/Include/core_cm0.h ****   {
 248:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 249:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 250:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 251:../../ext-src/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 252:../../ext-src/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 253:../../ext-src/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 254:../../ext-src/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 255:../../ext-src/CMSIS/Include/core_cm0.h **** 
 256:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 257:../../ext-src/CMSIS/Include/core_cm0.h **** 
 258:../../ext-src/CMSIS/Include/core_cm0.h **** 
 259:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 260:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 261:../../ext-src/CMSIS/Include/core_cm0.h ****   Type definitions for the Cortex-M NVIC Registers
 262:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 263:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 264:../../ext-src/CMSIS/Include/core_cm0.h **** 
 265:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 266:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 267:../../ext-src/CMSIS/Include/core_cm0.h **** typedef struct
 268:../../ext-src/CMSIS/Include/core_cm0.h **** {
 269:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 270:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED0[31];
 271:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 272:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RSERVED1[31];
 273:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 274:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED2[31];
 275:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 276:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED3[31];
 277:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED4[64];
 278:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register     
 279:../../ext-src/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 280:../../ext-src/CMSIS/Include/core_cm0.h **** 
 281:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 282:../../ext-src/CMSIS/Include/core_cm0.h **** 
 283:../../ext-src/CMSIS/Include/core_cm0.h **** 
 284:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 285:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_SCB CMSIS SCB
 286:../../ext-src/CMSIS/Include/core_cm0.h ****   Type definitions for the Cortex-M System Control Block Registers
 287:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 288:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 289:../../ext-src/CMSIS/Include/core_cm0.h **** 
 290:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Structure type to access the System Control Block (SCB).
 291:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 292:../../ext-src/CMSIS/Include/core_cm0.h **** typedef struct
 293:../../ext-src/CMSIS/Include/core_cm0.h **** {
 294:../../ext-src/CMSIS/Include/core_cm0.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 295:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 296:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED0;
 297:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 298:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 299:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 300:../../ext-src/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED1;
 301:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t SHP[2];                  /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 302:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 303:../../ext-src/CMSIS/Include/core_cm0.h **** } SCB_Type;
 304:../../ext-src/CMSIS/Include/core_cm0.h **** 
 305:../../ext-src/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 306:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 307:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 308:../../ext-src/CMSIS/Include/core_cm0.h **** 
 309:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 310:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 311:../../ext-src/CMSIS/Include/core_cm0.h **** 
 312:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 313:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 314:../../ext-src/CMSIS/Include/core_cm0.h **** 
 315:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 316:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 317:../../ext-src/CMSIS/Include/core_cm0.h **** 
 318:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 319:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 320:../../ext-src/CMSIS/Include/core_cm0.h **** 
 321:../../ext-src/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 322:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 323:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 324:../../ext-src/CMSIS/Include/core_cm0.h **** 
 325:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 326:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 327:../../ext-src/CMSIS/Include/core_cm0.h **** 
 328:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 329:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 330:../../ext-src/CMSIS/Include/core_cm0.h **** 
 331:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 332:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 333:../../ext-src/CMSIS/Include/core_cm0.h **** 
 334:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 335:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 336:../../ext-src/CMSIS/Include/core_cm0.h **** 
 337:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 338:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 339:../../ext-src/CMSIS/Include/core_cm0.h **** 
 340:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 341:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 342:../../ext-src/CMSIS/Include/core_cm0.h **** 
 343:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 344:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 345:../../ext-src/CMSIS/Include/core_cm0.h **** 
 346:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 347:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 348:../../ext-src/CMSIS/Include/core_cm0.h **** 
 349:../../ext-src/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 350:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 351:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 352:../../ext-src/CMSIS/Include/core_cm0.h **** 
 353:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 354:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 355:../../ext-src/CMSIS/Include/core_cm0.h **** 
 356:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 357:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 358:../../ext-src/CMSIS/Include/core_cm0.h **** 
 359:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 360:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 361:../../ext-src/CMSIS/Include/core_cm0.h **** 
 362:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 363:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 364:../../ext-src/CMSIS/Include/core_cm0.h **** 
 365:../../ext-src/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 366:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 367:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 368:../../ext-src/CMSIS/Include/core_cm0.h **** 
 369:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 370:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 371:../../ext-src/CMSIS/Include/core_cm0.h **** 
 372:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 373:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 374:../../ext-src/CMSIS/Include/core_cm0.h **** 
 375:../../ext-src/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 376:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 377:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 378:../../ext-src/CMSIS/Include/core_cm0.h **** 
 379:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 380:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 381:../../ext-src/CMSIS/Include/core_cm0.h **** 
 382:../../ext-src/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 383:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 384:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 385:../../ext-src/CMSIS/Include/core_cm0.h **** 
 386:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 387:../../ext-src/CMSIS/Include/core_cm0.h **** 
 388:../../ext-src/CMSIS/Include/core_cm0.h **** 
 389:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 390:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 391:../../ext-src/CMSIS/Include/core_cm0.h ****   Type definitions for the Cortex-M System Timer Registers
 392:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 393:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 394:../../ext-src/CMSIS/Include/core_cm0.h **** 
 395:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Structure type to access the System Timer (SysTick).
 396:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 397:../../ext-src/CMSIS/Include/core_cm0.h **** typedef struct
 398:../../ext-src/CMSIS/Include/core_cm0.h **** {
 399:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 400:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 401:../../ext-src/CMSIS/Include/core_cm0.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 402:../../ext-src/CMSIS/Include/core_cm0.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 403:../../ext-src/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 404:../../ext-src/CMSIS/Include/core_cm0.h **** 
 405:../../ext-src/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 406:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 407:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 408:../../ext-src/CMSIS/Include/core_cm0.h **** 
 409:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 410:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 411:../../ext-src/CMSIS/Include/core_cm0.h **** 
 412:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 413:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 414:../../ext-src/CMSIS/Include/core_cm0.h **** 
 415:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 416:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 417:../../ext-src/CMSIS/Include/core_cm0.h **** 
 418:../../ext-src/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 419:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 420:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 421:../../ext-src/CMSIS/Include/core_cm0.h **** 
 422:../../ext-src/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 423:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 424:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 425:../../ext-src/CMSIS/Include/core_cm0.h **** 
 426:../../ext-src/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 427:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 428:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 429:../../ext-src/CMSIS/Include/core_cm0.h **** 
 430:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 431:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 432:../../ext-src/CMSIS/Include/core_cm0.h **** 
 433:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 434:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 435:../../ext-src/CMSIS/Include/core_cm0.h **** 
 436:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 437:../../ext-src/CMSIS/Include/core_cm0.h **** 
 438:../../ext-src/CMSIS/Include/core_cm0.h **** 
 439:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 440:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 441:../../ext-src/CMSIS/Include/core_cm0.h ****   Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible over DAP
 442:../../ext-src/CMSIS/Include/core_cm0.h ****   and not via processor. Therefore they are not covered by the Cortex-M0 header file.
 443:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 444:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 445:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 446:../../ext-src/CMSIS/Include/core_cm0.h **** 
 447:../../ext-src/CMSIS/Include/core_cm0.h **** 
 448:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 449:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 450:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 451:../../ext-src/CMSIS/Include/core_cm0.h **** 
 452:../../ext-src/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 453:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 454:../../ext-src/CMSIS/Include/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 455:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 456:../../ext-src/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 457:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 458:../../ext-src/CMSIS/Include/core_cm0.h **** 
 459:../../ext-src/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 460:../../ext-src/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 461:../../ext-src/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 462:../../ext-src/CMSIS/Include/core_cm0.h **** 
 463:../../ext-src/CMSIS/Include/core_cm0.h **** 
 464:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} */
 465:../../ext-src/CMSIS/Include/core_cm0.h **** 
 466:../../ext-src/CMSIS/Include/core_cm0.h **** 
 467:../../ext-src/CMSIS/Include/core_cm0.h **** 
 468:../../ext-src/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 469:../../ext-src/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 470:../../ext-src/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 471:../../ext-src/CMSIS/Include/core_cm0.h **** /** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 472:../../ext-src/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 473:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 474:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 475:../../ext-src/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 476:../../ext-src/CMSIS/Include/core_cm0.h **** */
 477:../../ext-src/CMSIS/Include/core_cm0.h **** 
 478:../../ext-src/CMSIS/Include/core_cm0.h **** 
 479:../../ext-src/CMSIS/Include/core_cm0.h **** 
 480:../../ext-src/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 481:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 482:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 483:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 484:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 485:../../ext-src/CMSIS/Include/core_cm0.h **** 
 486:../../ext-src/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 487:../../ext-src/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 488:../../ext-src/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 489:../../ext-src/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 490:../../ext-src/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 491:../../ext-src/CMSIS/Include/core_cm0.h **** 
 492:../../ext-src/CMSIS/Include/core_cm0.h **** 
 493:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Enable External Interrupt
 494:../../ext-src/CMSIS/Include/core_cm0.h **** 
 495:../../ext-src/CMSIS/Include/core_cm0.h ****     This function enables a device specific interrupt in the NVIC interrupt controller.
 496:../../ext-src/CMSIS/Include/core_cm0.h ****     The interrupt number cannot be a negative value.
 497:../../ext-src/CMSIS/Include/core_cm0.h **** 
 498:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 499:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 500:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 501:../../ext-src/CMSIS/Include/core_cm0.h **** {
 502:../../ext-src/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 503:../../ext-src/CMSIS/Include/core_cm0.h **** }
 504:../../ext-src/CMSIS/Include/core_cm0.h **** 
 505:../../ext-src/CMSIS/Include/core_cm0.h **** 
 506:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Disable External Interrupt
 507:../../ext-src/CMSIS/Include/core_cm0.h **** 
 508:../../ext-src/CMSIS/Include/core_cm0.h ****     This function disables a device specific interrupt in the NVIC interrupt controller.
 509:../../ext-src/CMSIS/Include/core_cm0.h ****     The interrupt number cannot be a negative value.
 510:../../ext-src/CMSIS/Include/core_cm0.h **** 
 511:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 512:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 513:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 514:../../ext-src/CMSIS/Include/core_cm0.h **** {
 515:../../ext-src/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 516:../../ext-src/CMSIS/Include/core_cm0.h **** }
 517:../../ext-src/CMSIS/Include/core_cm0.h **** 
 518:../../ext-src/CMSIS/Include/core_cm0.h **** 
 519:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Get Pending Interrupt
 520:../../ext-src/CMSIS/Include/core_cm0.h **** 
 521:../../ext-src/CMSIS/Include/core_cm0.h ****     This function reads the pending register in the NVIC and returns the pending bit
 522:../../ext-src/CMSIS/Include/core_cm0.h ****     for the specified interrupt.
 523:../../ext-src/CMSIS/Include/core_cm0.h **** 
 524:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the interrupt for get pending
 525:../../ext-src/CMSIS/Include/core_cm0.h ****     \return             0  Interrupt status is not pending
 526:../../ext-src/CMSIS/Include/core_cm0.h ****     \return             1  Interrupt status is pending
 527:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 528:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 529:../../ext-src/CMSIS/Include/core_cm0.h **** {
 530:../../ext-src/CMSIS/Include/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
 531:../../ext-src/CMSIS/Include/core_cm0.h **** }
 532:../../ext-src/CMSIS/Include/core_cm0.h **** 
 533:../../ext-src/CMSIS/Include/core_cm0.h **** 
 534:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Set Pending Interrupt
 535:../../ext-src/CMSIS/Include/core_cm0.h **** 
 536:../../ext-src/CMSIS/Include/core_cm0.h ****     This function sets the pending bit for the specified interrupt.
 537:../../ext-src/CMSIS/Include/core_cm0.h ****     The interrupt number cannot be a negative value.
 538:../../ext-src/CMSIS/Include/core_cm0.h **** 
 539:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the interrupt for set pending
 540:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 541:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 542:../../ext-src/CMSIS/Include/core_cm0.h **** {
 543:../../ext-src/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 544:../../ext-src/CMSIS/Include/core_cm0.h **** }
 545:../../ext-src/CMSIS/Include/core_cm0.h **** 
 546:../../ext-src/CMSIS/Include/core_cm0.h **** 
 547:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Clear Pending Interrupt
 548:../../ext-src/CMSIS/Include/core_cm0.h **** 
 549:../../ext-src/CMSIS/Include/core_cm0.h ****     This function clears the pending bit for the specified interrupt.
 550:../../ext-src/CMSIS/Include/core_cm0.h ****     The interrupt number cannot be a negative value.
 551:../../ext-src/CMSIS/Include/core_cm0.h **** 
 552:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
 553:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 554:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 555:../../ext-src/CMSIS/Include/core_cm0.h **** {
 556:../../ext-src/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 557:../../ext-src/CMSIS/Include/core_cm0.h **** }
 558:../../ext-src/CMSIS/Include/core_cm0.h **** 
 559:../../ext-src/CMSIS/Include/core_cm0.h **** 
 560:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Set Interrupt Priority
 561:../../ext-src/CMSIS/Include/core_cm0.h **** 
 562:../../ext-src/CMSIS/Include/core_cm0.h ****     This function sets the priority for the specified interrupt. The interrupt
 563:../../ext-src/CMSIS/Include/core_cm0.h ****     number can be positive to specify an external (device specific)
 564:../../ext-src/CMSIS/Include/core_cm0.h ****     interrupt, or negative to specify an internal (core) interrupt.
 565:../../ext-src/CMSIS/Include/core_cm0.h **** 
 566:../../ext-src/CMSIS/Include/core_cm0.h ****     Note: The priority cannot be set for every core interrupt.
 567:../../ext-src/CMSIS/Include/core_cm0.h **** 
 568:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the interrupt for set priority
 569:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]  priority  Priority to set
 570:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 571:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 572:../../ext-src/CMSIS/Include/core_cm0.h **** {
  25              		.loc 1 572 0
  26              		.cfi_startproc
  27 0000 B0B5     		push	{r4, r5, r7, lr}
  28              		.cfi_def_cfa_offset 16
  29              		.cfi_offset 4, -16
  30              		.cfi_offset 5, -12
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              		.cfi_def_cfa_offset 24
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 021C     		mov	r2, r0
  38 0008 3960     		str	r1, [r7]
  39 000a FB1D     		add	r3, r7, #7
  40 000c 1A70     		strb	r2, [r3]
 573:../../ext-src/CMSIS/Include/core_cm0.h ****   if(IRQn < 0) {
  41              		.loc 1 573 0
  42 000e FB1D     		add	r3, r7, #7
  43 0010 1B78     		ldrb	r3, [r3]
  44 0012 7F2B     		cmp	r3, #127
  45 0014 32D9     		bls	.L2
 574:../../ext-src/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  46              		.loc 1 574 0
  47 0016 3049     		ldr	r1, .L4
  48 0018 FB1D     		add	r3, r7, #7
  49 001a 1B78     		ldrb	r3, [r3]
  50 001c 1A1C     		mov	r2, r3
  51 001e 0F23     		mov	r3, #15
  52 0020 1340     		and	r3, r2
  53 0022 083B     		sub	r3, r3, #8
  54 0024 9808     		lsr	r0, r3, #2
  55 0026 2C4A     		ldr	r2, .L4
  56 0028 FB1D     		add	r3, r7, #7
  57 002a 1B78     		ldrb	r3, [r3]
  58 002c 1C1C     		mov	r4, r3
  59 002e 0F23     		mov	r3, #15
  60 0030 2340     		and	r3, r4
  61 0032 083B     		sub	r3, r3, #8
  62 0034 9B08     		lsr	r3, r3, #2
  63 0036 0633     		add	r3, r3, #6
  64 0038 9B00     		lsl	r3, r3, #2
  65 003a D318     		add	r3, r2, r3
  66 003c 5B68     		ldr	r3, [r3, #4]
  67 003e FA1D     		add	r2, r7, #7
  68 0040 1278     		ldrb	r2, [r2]
  69 0042 141C     		mov	r4, r2
  70 0044 0322     		mov	r2, #3
  71 0046 2240     		and	r2, r4
  72 0048 D200     		lsl	r2, r2, #3
  73 004a FF24     		mov	r4, #255
  74 004c 251C     		mov	r5, r4
  75 004e 9540     		lsl	r5, r5, r2
  76 0050 2A1C     		mov	r2, r5
  77 0052 D243     		mvn	r2, r2
  78 0054 1A40     		and	r2, r3
 575:../../ext-src/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  79              		.loc 1 575 0
  80 0056 3B68     		ldr	r3, [r7]
  81 0058 9C01     		lsl	r4, r3, #6
  82 005a FF23     		mov	r3, #255
  83 005c 1C40     		and	r4, r3
  84 005e FB1D     		add	r3, r7, #7
  85 0060 1B78     		ldrb	r3, [r3]
  86 0062 1D1C     		mov	r5, r3
  87 0064 0323     		mov	r3, #3
  88 0066 2B40     		and	r3, r5
  89 0068 DB00     		lsl	r3, r3, #3
  90 006a 251C     		mov	r5, r4
  91 006c 9D40     		lsl	r5, r5, r3
  92 006e 2B1C     		mov	r3, r5
 574:../../ext-src/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  93              		.loc 1 574 0
  94 0070 1A43     		orr	r2, r3
  95 0072 831D     		add	r3, r0, #6
  96 0074 9B00     		lsl	r3, r3, #2
  97 0076 CB18     		add	r3, r1, r3
  98 0078 5A60     		str	r2, [r3, #4]
  99 007a 29E0     		b	.L1
 100              	.L2:
 576:../../ext-src/CMSIS/Include/core_cm0.h ****   else {
 577:../../ext-src/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 101              		.loc 1 577 0
 102 007c 174B     		ldr	r3, .L4+4
 103 007e FA1D     		add	r2, r7, #7
 104 0080 1278     		ldrb	r2, [r2]
 105 0082 52B2     		sxtb	r2, r2
 106 0084 9208     		lsr	r2, r2, #2
 107 0086 1549     		ldr	r1, .L4+4
 108 0088 F81D     		add	r0, r7, #7
 109 008a 0078     		ldrb	r0, [r0]
 110 008c 40B2     		sxtb	r0, r0
 111 008e 8008     		lsr	r0, r0, #2
 112 0090 C030     		add	r0, r0, #192
 113 0092 8000     		lsl	r0, r0, #2
 114 0094 4158     		ldr	r1, [r0, r1]
 115 0096 F81D     		add	r0, r7, #7
 116 0098 0078     		ldrb	r0, [r0]
 117 009a 041C     		mov	r4, r0
 118 009c 0320     		mov	r0, #3
 119 009e 2040     		and	r0, r4
 120 00a0 C000     		lsl	r0, r0, #3
 121 00a2 FF24     		mov	r4, #255
 122 00a4 251C     		mov	r5, r4
 123 00a6 8540     		lsl	r5, r5, r0
 124 00a8 281C     		mov	r0, r5
 125 00aa C043     		mvn	r0, r0
 126 00ac 0840     		and	r0, r1
 578:../../ext-src/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 127              		.loc 1 578 0
 128 00ae 3968     		ldr	r1, [r7]
 129 00b0 8C01     		lsl	r4, r1, #6
 130 00b2 FF21     		mov	r1, #255
 131 00b4 0C40     		and	r4, r1
 132 00b6 F91D     		add	r1, r7, #7
 133 00b8 0978     		ldrb	r1, [r1]
 134 00ba 0D1C     		mov	r5, r1
 135 00bc 0321     		mov	r1, #3
 136 00be 2940     		and	r1, r5
 137 00c0 C900     		lsl	r1, r1, #3
 138 00c2 251C     		mov	r5, r4
 139 00c4 8D40     		lsl	r5, r5, r1
 140 00c6 291C     		mov	r1, r5
 577:../../ext-src/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 141              		.loc 1 577 0
 142 00c8 0143     		orr	r1, r0
 143 00ca C032     		add	r2, r2, #192
 144 00cc 9200     		lsl	r2, r2, #2
 145 00ce D150     		str	r1, [r2, r3]
 146              	.L1:
 579:../../ext-src/CMSIS/Include/core_cm0.h **** }
 147              		.loc 1 579 0
 148 00d0 BD46     		mov	sp, r7
 149 00d2 02B0     		add	sp, sp, #8
 150              		@ sp needed
 151 00d4 B0BD     		pop	{r4, r5, r7, pc}
 152              	.L5:
 153 00d6 C046     		.align	2
 154              	.L4:
 155 00d8 00ED00E0 		.word	-536810240
 156 00dc 00E100E0 		.word	-536813312
 157              		.cfi_endproc
 158              	.LFE28:
 160              		.section	.text.SysTick_Config,"ax",%progbits
 161              		.align	2
 162              		.code	16
 163              		.thumb_func
 165              	SysTick_Config:
 166              	.LFB31:
 580:../../ext-src/CMSIS/Include/core_cm0.h **** 
 581:../../ext-src/CMSIS/Include/core_cm0.h **** 
 582:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  Get Interrupt Priority
 583:../../ext-src/CMSIS/Include/core_cm0.h **** 
 584:../../ext-src/CMSIS/Include/core_cm0.h ****     This function reads the priority for the specified interrupt. The interrupt
 585:../../ext-src/CMSIS/Include/core_cm0.h ****     number can be positive to specify an external (device specific)
 586:../../ext-src/CMSIS/Include/core_cm0.h ****     interrupt, or negative to specify an internal (core) interrupt.
 587:../../ext-src/CMSIS/Include/core_cm0.h **** 
 588:../../ext-src/CMSIS/Include/core_cm0.h ****     The returned priority value is automatically aligned to the implemented
 589:../../ext-src/CMSIS/Include/core_cm0.h ****     priority bits of the microcontroller.
 590:../../ext-src/CMSIS/Include/core_cm0.h **** 
 591:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]   IRQn  Number of the interrupt for get priority
 592:../../ext-src/CMSIS/Include/core_cm0.h ****     \return             Interrupt Priority
 593:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 594:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 595:../../ext-src/CMSIS/Include/core_cm0.h **** {
 596:../../ext-src/CMSIS/Include/core_cm0.h **** 
 597:../../ext-src/CMSIS/Include/core_cm0.h ****   if(IRQn < 0) {
 598:../../ext-src/CMSIS/Include/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 599:../../ext-src/CMSIS/Include/core_cm0.h ****   else {
 600:../../ext-src/CMSIS/Include/core_cm0.h ****     return((uint32_t)((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 601:../../ext-src/CMSIS/Include/core_cm0.h **** }
 602:../../ext-src/CMSIS/Include/core_cm0.h **** 
 603:../../ext-src/CMSIS/Include/core_cm0.h **** 
 604:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  System Reset
 605:../../ext-src/CMSIS/Include/core_cm0.h **** 
 606:../../ext-src/CMSIS/Include/core_cm0.h ****     This function initiate a system reset request to reset the MCU.
 607:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 608:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_SystemReset(void)
 609:../../ext-src/CMSIS/Include/core_cm0.h **** {
 610:../../ext-src/CMSIS/Include/core_cm0.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
 611:../../ext-src/CMSIS/Include/core_cm0.h ****                                                                   buffered write are completed befo
 612:../../ext-src/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 613:../../ext-src/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 614:../../ext-src/CMSIS/Include/core_cm0.h ****   __DSB();                                                     /* Ensure completion of memory acces
 615:../../ext-src/CMSIS/Include/core_cm0.h ****   while(1);                                                    /* wait until reset */
 616:../../ext-src/CMSIS/Include/core_cm0.h **** }
 617:../../ext-src/CMSIS/Include/core_cm0.h **** 
 618:../../ext-src/CMSIS/Include/core_cm0.h **** /*@} end of CMSIS_Core_NVICFunctions */
 619:../../ext-src/CMSIS/Include/core_cm0.h **** 
 620:../../ext-src/CMSIS/Include/core_cm0.h **** 
 621:../../ext-src/CMSIS/Include/core_cm0.h **** 
 622:../../ext-src/CMSIS/Include/core_cm0.h **** /* ##################################    SysTick function  ########################################
 623:../../ext-src/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 624:../../ext-src/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
 625:../../ext-src/CMSIS/Include/core_cm0.h ****   @{
 626:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 627:../../ext-src/CMSIS/Include/core_cm0.h **** 
 628:../../ext-src/CMSIS/Include/core_cm0.h **** #if (__Vendor_SysTickConfig == 0)
 629:../../ext-src/CMSIS/Include/core_cm0.h **** 
 630:../../ext-src/CMSIS/Include/core_cm0.h **** /** \brief  System Tick Configuration
 631:../../ext-src/CMSIS/Include/core_cm0.h **** 
 632:../../ext-src/CMSIS/Include/core_cm0.h ****     This function initialises the system tick timer and its interrupt and start the system tick tim
 633:../../ext-src/CMSIS/Include/core_cm0.h ****     Counter is in free running mode to generate periodical interrupts.
 634:../../ext-src/CMSIS/Include/core_cm0.h **** 
 635:../../ext-src/CMSIS/Include/core_cm0.h ****     \param [in]  ticks  Number of ticks between two interrupts
 636:../../ext-src/CMSIS/Include/core_cm0.h ****     \return          0  Function succeeded
 637:../../ext-src/CMSIS/Include/core_cm0.h ****     \return          1  Function failed
 638:../../ext-src/CMSIS/Include/core_cm0.h ****  */
 639:../../ext-src/CMSIS/Include/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 640:../../ext-src/CMSIS/Include/core_cm0.h **** {
 167              		.loc 1 640 0
 168              		.cfi_startproc
 169 0000 80B5     		push	{r7, lr}
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 7, -8
 172              		.cfi_offset 14, -4
 173 0002 82B0     		sub	sp, sp, #8
 174              		.cfi_def_cfa_offset 16
 175 0004 00AF     		add	r7, sp, #0
 176              		.cfi_def_cfa_register 7
 177 0006 7860     		str	r0, [r7, #4]
 641:../../ext-src/CMSIS/Include/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 178              		.loc 1 641 0
 179 0008 7A68     		ldr	r2, [r7, #4]
 180 000a 0E4B     		ldr	r3, .L9
 181 000c 9A42     		cmp	r2, r3
 182 000e 01D9     		bls	.L7
 183              		.loc 1 641 0 is_stmt 0 discriminator 1
 184 0010 0123     		mov	r3, #1
 185 0012 12E0     		b	.L8
 186              	.L7:
 642:../../ext-src/CMSIS/Include/core_cm0.h **** 
 643:../../ext-src/CMSIS/Include/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 187              		.loc 1 643 0 is_stmt 1
 188 0014 0C4B     		ldr	r3, .L9+4
 189 0016 7A68     		ldr	r2, [r7, #4]
 190 0018 1202     		lsl	r2, r2, #8
 191 001a 120A     		lsr	r2, r2, #8
 192 001c 013A     		sub	r2, r2, #1
 193 001e 5A60     		str	r2, [r3, #4]
 644:../../ext-src/CMSIS/Include/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 194              		.loc 1 644 0
 195 0020 0123     		mov	r3, #1
 196 0022 5B42     		neg	r3, r3
 197 0024 181C     		mov	r0, r3
 198 0026 0321     		mov	r1, #3
 199 0028 FFF7FEFF 		bl	NVIC_SetPriority
 645:../../ext-src/CMSIS/Include/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 200              		.loc 1 645 0
 201 002c 064B     		ldr	r3, .L9+4
 202 002e 0022     		mov	r2, #0
 203 0030 9A60     		str	r2, [r3, #8]
 646:../../ext-src/CMSIS/Include/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 204              		.loc 1 646 0
 205 0032 054B     		ldr	r3, .L9+4
 206 0034 0722     		mov	r2, #7
 207 0036 1A60     		str	r2, [r3]
 647:../../ext-src/CMSIS/Include/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   |
 648:../../ext-src/CMSIS/Include/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 649:../../ext-src/CMSIS/Include/core_cm0.h ****   return (0);                                                  /* Function successful */
 208              		.loc 1 649 0
 209 0038 0023     		mov	r3, #0
 210              	.L8:
 650:../../ext-src/CMSIS/Include/core_cm0.h **** }
 211              		.loc 1 650 0
 212 003a 181C     		mov	r0, r3
 213 003c BD46     		mov	sp, r7
 214 003e 02B0     		add	sp, sp, #8
 215              		@ sp needed
 216 0040 80BD     		pop	{r7, pc}
 217              	.L10:
 218 0042 C046     		.align	2
 219              	.L9:
 220 0044 FFFFFF00 		.word	16777215
 221 0048 10E000E0 		.word	-536813552
 222              		.cfi_endproc
 223              	.LFE31:
 225              		.section	.bss.localTime,"aw",%nobits
 226              		.align	2
 229              	localTime:
 230 0000 00000000 		.space	4
 231              		.section	.bss.taskCallback,"aw",%nobits
 232              		.align	2
 235              	taskCallback:
 236 0000 00000000 		.space	4
 237              		.section	.bss.idleCallback,"aw",%nobits
 238              		.align	2
 241              	idleCallback:
 242 0000 00000000 		.space	4
 243              		.section	.bss.handleSystickInterrupt,"aw",%nobits
 246              	handleSystickInterrupt:
 247 0000 00       		.space	1
 248              		.section	.bss.systickIncrementInMs,"aw",%nobits
 249              		.align	2
 252              	systickIncrementInMs:
 253 0000 00000000 		.space	4
 254              		.section	.text.System_init,"ax",%progbits
 255              		.align	2
 256              		.global	System_init
 257              		.code	16
 258              		.thumb_func
 260              	System_init:
 261              	.LFB32:
 262              		.file 2 "../../src/driver/System/System.c"
   1:../../src/driver/System/System.c **** /*
   2:../../src/driver/System/System.c ****  * System.c
   3:../../src/driver/System/System.c ****  *
   4:../../src/driver/System/System.c ****  *  Created on: Jul 11, 2014
   5:../../src/driver/System/System.c ****  *      Author: jonasbachli
   6:../../src/driver/System/System.c ****  */
   7:../../src/driver/System/System.c **** 
   8:../../src/driver/System/System.c **** #include "System.h"
   9:../../src/driver/System/System.c **** 
  10:../../src/driver/System/System.c **** #include "stm32f0xx_rcc.h"
  11:../../src/driver/System/System.c **** #include "stm32f0xx.h"
  12:../../src/driver/System/System.c **** 
  13:../../src/driver/System/System.c **** /////////////////////////////////////
  14:../../src/driver/System/System.c **** // forward declarations
  15:../../src/driver/System/System.c **** /////////////////////////////////////
  16:../../src/driver/System/System.c **** 
  17:../../src/driver/System/System.c **** void idle(void);
  18:../../src/driver/System/System.c **** 
  19:../../src/driver/System/System.c **** /////////////////////////////////////
  20:../../src/driver/System/System.c **** // private variables
  21:../../src/driver/System/System.c **** /////////////////////////////////////
  22:../../src/driver/System/System.c **** 
  23:../../src/driver/System/System.c **** static uint32_t localTime = 0;
  24:../../src/driver/System/System.c **** static taskCallbackFct taskCallback;
  25:../../src/driver/System/System.c **** static taskCallbackFct idleCallback;
  26:../../src/driver/System/System.c **** static volatile bool handleSystickInterrupt = false;
  27:../../src/driver/System/System.c **** static uint32_t systickIncrementInMs;
  28:../../src/driver/System/System.c **** 
  29:../../src/driver/System/System.c **** /////////////////////////////////////
  30:../../src/driver/System/System.c **** // public functions
  31:../../src/driver/System/System.c **** /////////////////////////////////////
  32:../../src/driver/System/System.c **** 
  33:../../src/driver/System/System.c **** void System_init(void) {
 263              		.loc 2 33 0
 264              		.cfi_startproc
 265 0000 80B5     		push	{r7, lr}
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 7, -8
 268              		.cfi_offset 14, -4
 269 0002 00AF     		add	r7, sp, #0
 270              		.cfi_def_cfa_register 7
  34:../../src/driver/System/System.c **** 
  35:../../src/driver/System/System.c **** }
 271              		.loc 2 35 0
 272 0004 BD46     		mov	sp, r7
 273              		@ sp needed
 274 0006 80BD     		pop	{r7, pc}
 275              		.cfi_endproc
 276              	.LFE32:
 278              		.global	__aeabi_uidiv
 279              		.section	.text.System_PITSetup,"ax",%progbits
 280              		.align	2
 281              		.global	System_PITSetup
 282              		.code	16
 283              		.thumb_func
 285              	System_PITSetup:
 286              	.LFB33:
  36:../../src/driver/System/System.c **** 
  37:../../src/driver/System/System.c **** void System_PITSetup(uint32_t systickInMs) {
 287              		.loc 2 37 0
 288              		.cfi_startproc
 289 0000 80B5     		push	{r7, lr}
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 7, -8
 292              		.cfi_offset 14, -4
 293 0002 8AB0     		sub	sp, sp, #40
 294              		.cfi_def_cfa_offset 48
 295 0004 00AF     		add	r7, sp, #0
 296              		.cfi_def_cfa_register 7
 297 0006 7860     		str	r0, [r7, #4]
  38:../../src/driver/System/System.c **** 	RCC_ClocksTypeDef rccClocks;
  39:../../src/driver/System/System.c **** 
  40:../../src/driver/System/System.c **** 	systickIncrementInMs = systickInMs;
 298              		.loc 2 40 0
 299 0008 0C4B     		ldr	r3, .L13
 300 000a 7A68     		ldr	r2, [r7, #4]
 301 000c 1A60     		str	r2, [r3]
  41:../../src/driver/System/System.c **** 	RCC_GetClocksFreq(&rccClocks);
 302              		.loc 2 41 0
 303 000e 3B1C     		mov	r3, r7
 304 0010 0C33     		add	r3, r3, #12
 305 0012 181C     		mov	r0, r3
 306 0014 FFF7FEFF 		bl	RCC_GetClocksFreq
  42:../../src/driver/System/System.c **** 	SysTick_Config((rccClocks.HCLK_Frequency / 1000) * systickInMs);
 307              		.loc 2 42 0
 308 0018 3B1C     		mov	r3, r7
 309 001a 0C33     		add	r3, r3, #12
 310 001c 5B68     		ldr	r3, [r3, #4]
 311 001e 181C     		mov	r0, r3
 312 0020 FA23     		mov	r3, #250
 313 0022 9900     		lsl	r1, r3, #2
 314 0024 FFF7FEFF 		bl	__aeabi_uidiv
 315 0028 031C     		mov	r3, r0
 316 002a 7A68     		ldr	r2, [r7, #4]
 317 002c 5343     		mul	r3, r2
 318 002e 181C     		mov	r0, r3
 319 0030 FFF7FEFF 		bl	SysTick_Config
  43:../../src/driver/System/System.c **** }
 320              		.loc 2 43 0
 321 0034 BD46     		mov	sp, r7
 322 0036 0AB0     		add	sp, sp, #40
 323              		@ sp needed
 324 0038 80BD     		pop	{r7, pc}
 325              	.L14:
 326 003a C046     		.align	2
 327              	.L13:
 328 003c 00000000 		.word	systickIncrementInMs
 329              		.cfi_endproc
 330              	.LFE33:
 332              		.section	.text.System_PITSetTaskCallback,"ax",%progbits
 333              		.align	2
 334              		.global	System_PITSetTaskCallback
 335              		.code	16
 336              		.thumb_func
 338              	System_PITSetTaskCallback:
 339              	.LFB34:
  44:../../src/driver/System/System.c **** 
  45:../../src/driver/System/System.c **** void System_PITSetTaskCallback(taskCallbackFct taskCB) {
 340              		.loc 2 45 0
 341              		.cfi_startproc
 342 0000 80B5     		push	{r7, lr}
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 7, -8
 345              		.cfi_offset 14, -4
 346 0002 82B0     		sub	sp, sp, #8
 347              		.cfi_def_cfa_offset 16
 348 0004 00AF     		add	r7, sp, #0
 349              		.cfi_def_cfa_register 7
 350 0006 7860     		str	r0, [r7, #4]
  46:../../src/driver/System/System.c **** 	taskCallback = taskCB;
 351              		.loc 2 46 0
 352 0008 024B     		ldr	r3, .L16
 353 000a 7A68     		ldr	r2, [r7, #4]
 354 000c 1A60     		str	r2, [r3]
  47:../../src/driver/System/System.c **** }
 355              		.loc 2 47 0
 356 000e BD46     		mov	sp, r7
 357 0010 02B0     		add	sp, sp, #8
 358              		@ sp needed
 359 0012 80BD     		pop	{r7, pc}
 360              	.L17:
 361              		.align	2
 362              	.L16:
 363 0014 00000000 		.word	taskCallback
 364              		.cfi_endproc
 365              	.LFE34:
 367              		.section	.text.System_PITSetIdleCallback,"ax",%progbits
 368              		.align	2
 369              		.global	System_PITSetIdleCallback
 370              		.code	16
 371              		.thumb_func
 373              	System_PITSetIdleCallback:
 374              	.LFB35:
  48:../../src/driver/System/System.c **** 
  49:../../src/driver/System/System.c **** void System_PITSetIdleCallback(taskCallbackFct idleCB) {
 375              		.loc 2 49 0
 376              		.cfi_startproc
 377 0000 80B5     		push	{r7, lr}
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 7, -8
 380              		.cfi_offset 14, -4
 381 0002 82B0     		sub	sp, sp, #8
 382              		.cfi_def_cfa_offset 16
 383 0004 00AF     		add	r7, sp, #0
 384              		.cfi_def_cfa_register 7
 385 0006 7860     		str	r0, [r7, #4]
  50:../../src/driver/System/System.c **** 	idleCallback = idleCB;
 386              		.loc 2 50 0
 387 0008 024B     		ldr	r3, .L19
 388 000a 7A68     		ldr	r2, [r7, #4]
 389 000c 1A60     		str	r2, [r3]
  51:../../src/driver/System/System.c **** }
 390              		.loc 2 51 0
 391 000e BD46     		mov	sp, r7
 392 0010 02B0     		add	sp, sp, #8
 393              		@ sp needed
 394 0012 80BD     		pop	{r7, pc}
 395              	.L20:
 396              		.align	2
 397              	.L19:
 398 0014 00000000 		.word	idleCallback
 399              		.cfi_endproc
 400              	.LFE35:
 402              		.section	.text.System_PITStart,"ax",%progbits
 403              		.align	2
 404              		.global	System_PITStart
 405              		.code	16
 406              		.thumb_func
 408              	System_PITStart:
 409              	.LFB36:
  52:../../src/driver/System/System.c **** 
  53:../../src/driver/System/System.c **** void System_PITStart(void) {
 410              		.loc 2 53 0
 411              		.cfi_startproc
 412 0000 80B5     		push	{r7, lr}
 413              		.cfi_def_cfa_offset 8
 414              		.cfi_offset 7, -8
 415              		.cfi_offset 14, -4
 416 0002 00AF     		add	r7, sp, #0
 417              		.cfi_def_cfa_register 7
 418              	.L23:
  54:../../src/driver/System/System.c **** 	while(1){
  55:../../src/driver/System/System.c **** 		handleSystickInterrupt = false;
 419              		.loc 2 55 0
 420 0004 0B4B     		ldr	r3, .L24
 421 0006 0022     		mov	r2, #0
 422 0008 1A70     		strb	r2, [r3]
  56:../../src/driver/System/System.c **** 		if (taskCallback){
 423              		.loc 2 56 0
 424 000a 0B4B     		ldr	r3, .L24+4
 425 000c 1B68     		ldr	r3, [r3]
 426 000e 002B     		cmp	r3, #0
 427 0010 05D0     		beq	.L22
  57:../../src/driver/System/System.c **** 			taskCallback(localTime);
 428              		.loc 2 57 0
 429 0012 094B     		ldr	r3, .L24+4
 430 0014 1A68     		ldr	r2, [r3]
 431 0016 094B     		ldr	r3, .L24+8
 432 0018 1B68     		ldr	r3, [r3]
 433 001a 181C     		mov	r0, r3
 434 001c 9047     		blx	r2
 435              	.L22:
  58:../../src/driver/System/System.c **** 		}
  59:../../src/driver/System/System.c **** 
  60:../../src/driver/System/System.c **** 		localTime += systickIncrementInMs;
 436              		.loc 2 60 0
 437 001e 074B     		ldr	r3, .L24+8
 438 0020 1A68     		ldr	r2, [r3]
 439 0022 074B     		ldr	r3, .L24+12
 440 0024 1B68     		ldr	r3, [r3]
 441 0026 D218     		add	r2, r2, r3
 442 0028 044B     		ldr	r3, .L24+8
 443 002a 1A60     		str	r2, [r3]
  61:../../src/driver/System/System.c **** 
  62:../../src/driver/System/System.c **** 		idle();
 444              		.loc 2 62 0
 445 002c FFF7FEFF 		bl	idle
  63:../../src/driver/System/System.c **** 	}
 446              		.loc 2 63 0
 447 0030 E8E7     		b	.L23
 448              	.L25:
 449 0032 C046     		.align	2
 450              	.L24:
 451 0034 00000000 		.word	handleSystickInterrupt
 452 0038 00000000 		.word	taskCallback
 453 003c 00000000 		.word	localTime
 454 0040 00000000 		.word	systickIncrementInMs
 455              		.cfi_endproc
 456              	.LFE36:
 458              		.section	.text.idle,"ax",%progbits
 459              		.align	2
 460              		.global	idle
 461              		.code	16
 462              		.thumb_func
 464              	idle:
 465              	.LFB37:
  64:../../src/driver/System/System.c **** }
  65:../../src/driver/System/System.c **** 
  66:../../src/driver/System/System.c **** /////////////////////////////////////
  67:../../src/driver/System/System.c **** // private functions
  68:../../src/driver/System/System.c **** /////////////////////////////////////
  69:../../src/driver/System/System.c **** 
  70:../../src/driver/System/System.c **** void idle(void){
 466              		.loc 2 70 0
 467              		.cfi_startproc
 468 0000 80B5     		push	{r7, lr}
 469              		.cfi_def_cfa_offset 8
 470              		.cfi_offset 7, -8
 471              		.cfi_offset 14, -4
 472 0002 00AF     		add	r7, sp, #0
 473              		.cfi_def_cfa_register 7
  71:../../src/driver/System/System.c **** 	while (!handleSystickInterrupt){
 474              		.loc 2 71 0
 475 0004 09E0     		b	.L27
 476              	.L28:
  72:../../src/driver/System/System.c **** 		if (idleCallback){
 477              		.loc 2 72 0
 478 0006 0A4B     		ldr	r3, .L29
 479 0008 1B68     		ldr	r3, [r3]
 480 000a 002B     		cmp	r3, #0
 481 000c 05D0     		beq	.L27
  73:../../src/driver/System/System.c **** 			idleCallback(localTime);
 482              		.loc 2 73 0
 483 000e 084B     		ldr	r3, .L29
 484 0010 1A68     		ldr	r2, [r3]
 485 0012 084B     		ldr	r3, .L29+4
 486 0014 1B68     		ldr	r3, [r3]
 487 0016 181C     		mov	r0, r3
 488 0018 9047     		blx	r2
 489              	.L27:
  71:../../src/driver/System/System.c **** 	while (!handleSystickInterrupt){
 490              		.loc 2 71 0 discriminator 1
 491 001a 074B     		ldr	r3, .L29+8
 492 001c 1B78     		ldrb	r3, [r3]
 493 001e DBB2     		uxtb	r3, r3
 494 0020 0122     		mov	r2, #1
 495 0022 5340     		eor	r3, r2
 496 0024 DBB2     		uxtb	r3, r3
 497 0026 002B     		cmp	r3, #0
 498 0028 EDD1     		bne	.L28
  74:../../src/driver/System/System.c **** 		}
  75:../../src/driver/System/System.c **** 	}
  76:../../src/driver/System/System.c **** }
 499              		.loc 2 76 0
 500 002a BD46     		mov	sp, r7
 501              		@ sp needed
 502 002c 80BD     		pop	{r7, pc}
 503              	.L30:
 504 002e C046     		.align	2
 505              	.L29:
 506 0030 00000000 		.word	idleCallback
 507 0034 00000000 		.word	localTime
 508 0038 00000000 		.word	handleSystickInterrupt
 509              		.cfi_endproc
 510              	.LFE37:
 512              		.section	.text.SysTick_Handler,"ax",%progbits
 513              		.align	2
 514              		.global	SysTick_Handler
 515              		.code	16
 516              		.thumb_func
 518              	SysTick_Handler:
 519              	.LFB38:
  77:../../src/driver/System/System.c **** 
  78:../../src/driver/System/System.c **** void SysTick_Handler(void)
  79:../../src/driver/System/System.c **** {
 520              		.loc 2 79 0
 521              		.cfi_startproc
 522 0000 80B5     		push	{r7, lr}
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 7, -8
 525              		.cfi_offset 14, -4
 526 0002 00AF     		add	r7, sp, #0
 527              		.cfi_def_cfa_register 7
  80:../../src/driver/System/System.c **** 	handleSystickInterrupt = true;
 528              		.loc 2 80 0
 529 0004 024B     		ldr	r3, .L32
 530 0006 0122     		mov	r2, #1
 531 0008 1A70     		strb	r2, [r3]
  81:../../src/driver/System/System.c **** }
 532              		.loc 2 81 0
 533 000a BD46     		mov	sp, r7
 534              		@ sp needed
 535 000c 80BD     		pop	{r7, pc}
 536              	.L33:
 537 000e C046     		.align	2
 538              	.L32:
 539 0010 00000000 		.word	handleSystickInterrupt
 540              		.cfi_endproc
 541              	.LFE38:
 543              		.text
 544              	.Letext0:
 545              		.file 3 "../../ext-src/CMSIS/ST/STM32F0xx/Include/stm32f0xx.h"
 546              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/machine/_default_types
 547              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/stdint.h"
 548              		.file 6 "../../ext-src/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_rcc.h"
 549              		.file 7 "../../src/driver/System/System.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 System.c
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:18     .text.NVIC_SetPriority:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:22     .text.NVIC_SetPriority:0000000000000000 NVIC_SetPriority
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:155    .text.NVIC_SetPriority:00000000000000d8 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:161    .text.SysTick_Config:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:165    .text.SysTick_Config:0000000000000000 SysTick_Config
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:220    .text.SysTick_Config:0000000000000044 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:226    .bss.localTime:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:229    .bss.localTime:0000000000000000 localTime
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:232    .bss.taskCallback:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:235    .bss.taskCallback:0000000000000000 taskCallback
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:238    .bss.idleCallback:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:241    .bss.idleCallback:0000000000000000 idleCallback
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:246    .bss.handleSystickInterrupt:0000000000000000 handleSystickInterrupt
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:247    .bss.handleSystickInterrupt:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:249    .bss.systickIncrementInMs:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:252    .bss.systickIncrementInMs:0000000000000000 systickIncrementInMs
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:255    .text.System_init:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:260    .text.System_init:0000000000000000 System_init
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:280    .text.System_PITSetup:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:285    .text.System_PITSetup:0000000000000000 System_PITSetup
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:328    .text.System_PITSetup:000000000000003c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:333    .text.System_PITSetTaskCallback:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:338    .text.System_PITSetTaskCallback:0000000000000000 System_PITSetTaskCallback
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:363    .text.System_PITSetTaskCallback:0000000000000014 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:368    .text.System_PITSetIdleCallback:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:373    .text.System_PITSetIdleCallback:0000000000000000 System_PITSetIdleCallback
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:398    .text.System_PITSetIdleCallback:0000000000000014 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:403    .text.System_PITStart:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:408    .text.System_PITStart:0000000000000000 System_PITStart
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:464    .text.idle:0000000000000000 idle
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:451    .text.System_PITStart:0000000000000034 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:459    .text.idle:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:506    .text.idle:0000000000000030 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:513    .text.SysTick_Handler:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:518    .text.SysTick_Handler:0000000000000000 SysTick_Handler
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccEZDDEt.s:539    .text.SysTick_Handler:0000000000000010 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.9252205565be9cbc11fa49e4ee70d556
                           .group:0000000000000000 wm4.stm32f0xx.h.54.664bd2bdbb20859ae6a5c66c16d4ee5a
                           .group:0000000000000000 wm4.core_cm0.h.32.41c1bd92799bc17b3c8424dd5c622427
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cm0.h.130.eea61816b4c7004601b0935484a214ea
                           .group:0000000000000000 wm4.stm32f0xx.h.226.38dd78fa77e64690c744af5bf4bffc7b
                           .group:0000000000000000 wm4.stm32f0xx_cec.h.80.d17e4ea90700c26010f339885be92ac0
                           .group:0000000000000000 wm4.stm32f0xx_crc.h.31.48fbd36307d848f32978567b16118557
                           .group:0000000000000000 wm4.stm32f0xx_comp.h.31.a640b8c7673f3e181cfd826dce70b6e2
                           .group:0000000000000000 wm4.stm32f0xx_dac.h.31.3e178ad0888f70df8fbc4c999d855b3e
                           .group:0000000000000000 wm4.stm32f0xx_dbgmcu.h.31.282da985c6ed8dd33417cf074ecfdf63
                           .group:0000000000000000 wm4.stm32f0xx_dma.h.31.68def2497939cb34c3f292e0c507724a
                           .group:0000000000000000 wm4.stm32f0xx_exti.h.31.81a00331ef3e014ed4dafe9e9baacca3
                           .group:0000000000000000 wm4.stm32f0xx_flash.h.31.60d92ed32439cfb92572ec2678e2be21
                           .group:0000000000000000 wm4.stm32f0xx_gpio.h.31.df5c3a39b21131ade11d30b7e1580be6
                           .group:0000000000000000 wm4.stm32f0xx_syscfg.h.31.f98c72ea26c47fccafefd977b75786d3
                           .group:0000000000000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:0000000000000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:0000000000000000 wm4.stm32f0xx_pwr.h.31.5b469253a65db741700e0b45f396c99d
                           .group:0000000000000000 wm4.stm32f0xx_rcc.h.31.bc2f5dd9e2f518d727a1e0ce497a42e6
                           .group:0000000000000000 wm4.stm32f0xx_rtc.h.31.bc9d631913a743746cf54f04d4efbf7b
                           .group:0000000000000000 wm4.stm32f0xx_spi.h.31.5b4d0d36c03feb5b081143cdba79744d
                           .group:0000000000000000 wm4.stm32f0xx_tim.h.31.21b4d7229c685868595d751757b51e1b
                           .group:0000000000000000 wm4.stm32f0xx_usart.h.31.8abae79a1c4f266d08faf5996370b48f
                           .group:0000000000000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:0000000000000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6
                           .group:0000000000000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2

UNDEFINED SYMBOLS
__aeabi_uidiv
RCC_GetClocksFreq
