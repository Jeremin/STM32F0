   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_usart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata
  18              		.align	2
  19              	.LC0:
  20 0000 2E2E2F2E 		.ascii	"../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f"
  20      2E2F6578 
  20      742D7372 
  20      632F5354 
  20      4D333246 
  21 0033 3078785F 		.ascii	"0xx_usart.c\000"
  21      75736172 
  21      742E6300 
  22 003f 00       		.section	.text.USART_DeInit,"ax",%progbits
  23              		.align	2
  24              		.global	USART_DeInit
  25              		.code	16
  26              		.thumb_func
  28              	USART_DeInit:
  29              	.LFB32:
  30              		.file 1 "../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c"
   1:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
   2:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ******************************************************************************
   3:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @file    stm32f0xx_usart.c
   4:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @author  MCD Application Team
   5:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @version V1.0.0
   6:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @date    23-March-2012
   7:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          transmitter (USART):
  10:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Initialization and Configuration
  11:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + STOP Mode
  12:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + AutoBaudRate
  13:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Data transfers
  14:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Multi-Processor Communication
  15:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + LIN mode
  16:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Half-duplex mode
  17:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Smartcard mode
  18:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + IrDA mode
  19:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + RS485 mode  
  20:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + DMA transfers management
  21:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Interrupts and flags management
  22:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           
  23:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *  @verbatim
  24:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
  25:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        ##### How to use this driver #####
  26:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
  27:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
  28:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable peripheral clock using RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE)
  29:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function for USART1 or using RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE)
  30:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function for USART2 and USART3.
  31:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) According to the USART mode, enable the GPIO clocks using 
  32:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             RCC_AHBPeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  33:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             or and SCLK). 
  34:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Peripheral's alternate function: 
  35:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Connect the pin to the desired peripherals' Alternate 
  36:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  Function (AF) using GPIO_PinAFConfig() function.
  37:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Configure the desired pin in alternate function by:
  38:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF.
  39:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Select the type, pull-up/pull-down and output speed via 
  40:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  GPIO_PuPd, GPIO_OType and GPIO_Speed members.
  41:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Call GPIO_Init() function.        
  42:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             flow control and Mode(Receiver/Transmitter) using the SPI_Init()
  44:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function.  
  45:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) For synchronous mode, enable the clock and program the polarity,
  46:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             phase and last bit using the USART_ClockInit() function.  
  47:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable the NVIC and the corresponding interrupt using the function 
  48:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             USART_ITConfig() if you need to use interrupt mode.   
  49:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) When using the DMA mode: 
  50:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Configure the DMA using DMA_Init() function.
  51:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Active the needed channel Request using USART_DMACmd() function.   
  52:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable the USART using the USART_Cmd() function.   
  53:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable the DMA using the DMA_Cmd() function, when using DMA mode.   
  54:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
  55:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  56:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             for more details.
  57:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             
  58:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
  59:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        
  60:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ******************************************************************************
  61:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @attention
  62:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  63:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  64:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  65:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  66:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * You may not use this file except in compliance with the License.
  67:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * You may obtain a copy of the License at:
  68:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  69:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  70:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  71:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  72:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  73:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  74:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * See the License for the specific language governing permissions and
  75:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * limitations under the License.
  76:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  77:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ******************************************************************************
  78:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
  79:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  80:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  81:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #include "stm32f0xx_usart.h"
  82:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #include "stm32f0xx_rcc.h"
  83:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  84:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  85:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
  86:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
  87:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  88:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART 
  89:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief USART driver modules
  90:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
  91:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
  92:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  93:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  94:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private define ------------------------------------------------------------*/
  95:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  96:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint32_t)0xFFFFE6F3)) */
  97:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define CR1_CLEAR_MASK            ((uint32_t)(USART_CR1_M | USART_CR1_PCE | \
  98:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
  99:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                                               USART_CR1_RE))
 100:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 101:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint32_t)0xFFFFF0FF)) */
 102:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint32_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 103:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 104:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 105:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint32_t)0xFFFFFCFF)) */
 106:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define CR3_CLEAR_MASK            ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 107:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 108:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART Interrupts mask */
 109:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define IT_MASK                   ((uint32_t)0x000000FF)
 110:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 111:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 112:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 113:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 114:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 115:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 116:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Private_Functions
 117:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 118:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 119:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 120:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 121:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 122:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 123:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
 124:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 125:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           ##### Initialization and Configuration functions #####
 126:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 127:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
 128:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         This subsection provides a set of functions allowing to initialize the USART 
 129:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         in asynchronous and in synchronous modes.
 130:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+) For the asynchronous mode only these parameters can be configured: 
 131:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Baud Rate.
 132:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Word Length.
 133:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Stop Bit.
 134:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Parity: If the parity is enabled, then the MSB bit of the data written
 135:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                in the data register is transmitted but is changed by the parity bit.
 136:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                Depending on the frame length defined by the M bit (8-bits or 9-bits),
 137:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                the possible USART frame formats are as listed in the following table:
 138:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 139:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    +-------------------------------------------------------------+     
 140:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 141:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------------------|---------------------------------------|             
 142:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 143:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------|-----------|---------------------------------------|  
 144:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 145:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------|-----------|---------------------------------------|  
 146:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 147:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------|-----------|---------------------------------------|  
 148:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 149:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    +-------------------------------------------------------------+            
 150:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 151:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Hardware flow control.
 152:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Receiver/transmitter modes.
 153:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART_Init() function follows the USART  asynchronous configuration 
 154:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          procedure(details for the procedure are available in reference manual.
 155:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+) For the synchronous mode in addition to the asynchronous mode parameters
 156:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             these parameters should be also configured:
 157:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART Clock Enabled.
 158:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART polarity.
 159:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART phase.
 160:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART LastBit.
 161:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] These parameters can be configured using the USART_ClockInit() function.
 162:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 163:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 164:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 165:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 166:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 167:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 168:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 169:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 170:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 171:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 172:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 173:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
  31              		.loc 1 173 0
  32              		.cfi_startproc
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 174:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 175:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
  42              		.loc 1 175 0
  43 0008 7A68     		ldr	r2, [r7, #4]
  44 000a 184B     		ldr	r3, .L5
  45 000c 9A42     		cmp	r2, r3
  46 000e 08D0     		beq	.L2
  47              		.loc 1 175 0 is_stmt 0 discriminator 1
  48 0010 7A68     		ldr	r2, [r7, #4]
  49 0012 174B     		ldr	r3, .L5+4
  50 0014 9A42     		cmp	r2, r3
  51 0016 04D0     		beq	.L2
  52 0018 164B     		ldr	r3, .L5+8
  53 001a 181C     		mov	r0, r3
  54 001c AF21     		mov	r1, #175
  55 001e FFF7FEFF 		bl	assert_failed
  56              	.L2:
 176:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 177:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (USARTx == USART1)
  57              		.loc 1 177 0 is_stmt 1
  58 0022 7A68     		ldr	r2, [r7, #4]
  59 0024 114B     		ldr	r3, .L5
  60 0026 9A42     		cmp	r2, r3
  61 0028 0CD1     		bne	.L3
 178:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 179:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  62              		.loc 1 179 0
  63 002a 8023     		mov	r3, #128
  64 002c DB01     		lsl	r3, r3, #7
  65 002e 181C     		mov	r0, r3
  66 0030 0121     		mov	r1, #1
  67 0032 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 180:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  68              		.loc 1 180 0
  69 0036 8023     		mov	r3, #128
  70 0038 DB01     		lsl	r3, r3, #7
  71 003a 181C     		mov	r0, r3
  72 003c 0021     		mov	r1, #0
  73 003e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  74 0042 0FE0     		b	.L1
  75              	.L3:
 181:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 182:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else 
 183:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 184:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     if  (USARTx == USART2)
  76              		.loc 1 184 0
  77 0044 7A68     		ldr	r2, [r7, #4]
  78 0046 0A4B     		ldr	r3, .L5+4
  79 0048 9A42     		cmp	r2, r3
  80 004a 0BD1     		bne	.L1
 185:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     {
 186:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  81              		.loc 1 186 0
  82 004c 8023     		mov	r3, #128
  83 004e 9B02     		lsl	r3, r3, #10
  84 0050 181C     		mov	r0, r3
  85 0052 0121     		mov	r1, #1
  86 0054 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 187:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  87              		.loc 1 187 0
  88 0058 8023     		mov	r3, #128
  89 005a 9B02     		lsl	r3, r3, #10
  90 005c 181C     		mov	r0, r3
  91 005e 0021     		mov	r1, #0
  92 0060 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  93              	.L1:
 188:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     }
 189:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 190:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
  94              		.loc 1 190 0
  95 0064 BD46     		mov	sp, r7
  96 0066 02B0     		add	sp, sp, #8
  97              		@ sp needed
  98 0068 80BD     		pop	{r7, pc}
  99              	.L6:
 100 006a C046     		.align	2
 101              	.L5:
 102 006c 00380140 		.word	1073821696
 103 0070 00440040 		.word	1073759232
 104 0074 00000000 		.word	.LC0
 105              		.cfi_endproc
 106              	.LFE32:
 108              		.global	__aeabi_uidiv
 109              		.section	.text.USART_Init,"ax",%progbits
 110              		.align	2
 111              		.global	USART_Init
 112              		.code	16
 113              		.thumb_func
 115              	USART_Init:
 116              	.LFB33:
 191:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 192:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 193:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 194:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   parameters in the USART_InitStruct .
 195:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 196:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 197:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   that contains the configuration information for the specified USART peripheral.
 198:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 199:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 200:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 201:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 117              		.loc 1 201 0
 118              		.cfi_startproc
 119 0000 80B5     		push	{r7, lr}
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 7, -8
 122              		.cfi_offset 14, -4
 123 0002 8EB0     		sub	sp, sp, #56
 124              		.cfi_def_cfa_offset 64
 125 0004 00AF     		add	r7, sp, #0
 126              		.cfi_def_cfa_register 7
 127 0006 7860     		str	r0, [r7, #4]
 128 0008 3960     		str	r1, [r7]
 202:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t tmpreg = 0, apbclock = 0;
 129              		.loc 1 202 0
 130 000a 0023     		mov	r3, #0
 131 000c 7B63     		str	r3, [r7, #52]
 132 000e 0023     		mov	r3, #0
 133 0010 3B63     		str	r3, [r7, #48]
 203:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t integerdivider = 0;
 134              		.loc 1 203 0
 135 0012 0023     		mov	r3, #0
 136 0014 FB62     		str	r3, [r7, #44]
 204:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t fractionaldivider = 0;
 137              		.loc 1 204 0
 138 0016 0023     		mov	r3, #0
 139 0018 BB62     		str	r3, [r7, #40]
 205:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 206:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 207:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 208:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 140              		.loc 1 208 0
 141 001a 7A68     		ldr	r2, [r7, #4]
 142 001c 934B     		ldr	r3, .L23
 143 001e 9A42     		cmp	r2, r3
 144 0020 08D0     		beq	.L8
 145              		.loc 1 208 0 is_stmt 0 discriminator 1
 146 0022 7A68     		ldr	r2, [r7, #4]
 147 0024 924B     		ldr	r3, .L23+4
 148 0026 9A42     		cmp	r2, r3
 149 0028 04D0     		beq	.L8
 150 002a 924B     		ldr	r3, .L23+8
 151 002c 181C     		mov	r0, r3
 152 002e D021     		mov	r1, #208
 153 0030 FFF7FEFF 		bl	assert_failed
 154              	.L8:
 209:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 155              		.loc 1 209 0 is_stmt 1
 156 0034 3B68     		ldr	r3, [r7]
 157 0036 1B68     		ldr	r3, [r3]
 158 0038 002B     		cmp	r3, #0
 159 003a 04D0     		beq	.L9
 160              		.loc 1 209 0 is_stmt 0 discriminator 2
 161 003c 3B68     		ldr	r3, [r7]
 162 003e 1A68     		ldr	r2, [r3]
 163 0040 8D4B     		ldr	r3, .L23+12
 164 0042 9A42     		cmp	r2, r3
 165 0044 04D9     		bls	.L10
 166              	.L9:
 167              		.loc 1 209 0 discriminator 1
 168 0046 8B4B     		ldr	r3, .L23+8
 169 0048 181C     		mov	r0, r3
 170 004a D121     		mov	r1, #209
 171 004c FFF7FEFF 		bl	assert_failed
 172              	.L10:
 210:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 173              		.loc 1 210 0 is_stmt 1
 174 0050 3B68     		ldr	r3, [r7]
 175 0052 5B68     		ldr	r3, [r3, #4]
 176 0054 002B     		cmp	r3, #0
 177 0056 0AD0     		beq	.L11
 178              		.loc 1 210 0 is_stmt 0 discriminator 1
 179 0058 3B68     		ldr	r3, [r7]
 180 005a 5A68     		ldr	r2, [r3, #4]
 181 005c 8023     		mov	r3, #128
 182 005e 5B01     		lsl	r3, r3, #5
 183 0060 9A42     		cmp	r2, r3
 184 0062 04D0     		beq	.L11
 185 0064 834B     		ldr	r3, .L23+8
 186 0066 181C     		mov	r0, r3
 187 0068 D221     		mov	r1, #210
 188 006a FFF7FEFF 		bl	assert_failed
 189              	.L11:
 211:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 190              		.loc 1 211 0 is_stmt 1
 191 006e 3B68     		ldr	r3, [r7]
 192 0070 9B68     		ldr	r3, [r3, #8]
 193 0072 002B     		cmp	r3, #0
 194 0074 10D0     		beq	.L12
 195              		.loc 1 211 0 is_stmt 0 discriminator 1
 196 0076 3B68     		ldr	r3, [r7]
 197 0078 9A68     		ldr	r2, [r3, #8]
 198 007a 8023     		mov	r3, #128
 199 007c 9B01     		lsl	r3, r3, #6
 200 007e 9A42     		cmp	r2, r3
 201 0080 0AD0     		beq	.L12
 202 0082 3B68     		ldr	r3, [r7]
 203 0084 9A68     		ldr	r2, [r3, #8]
 204 0086 C023     		mov	r3, #192
 205 0088 9B01     		lsl	r3, r3, #6
 206 008a 9A42     		cmp	r2, r3
 207 008c 04D0     		beq	.L12
 208 008e 794B     		ldr	r3, .L23+8
 209 0090 181C     		mov	r0, r3
 210 0092 D321     		mov	r1, #211
 211 0094 FFF7FEFF 		bl	assert_failed
 212              	.L12:
 212:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 213              		.loc 1 212 0 is_stmt 1
 214 0098 3B68     		ldr	r3, [r7]
 215 009a DB68     		ldr	r3, [r3, #12]
 216 009c 002B     		cmp	r3, #0
 217 009e 10D0     		beq	.L13
 218              		.loc 1 212 0 is_stmt 0 discriminator 1
 219 00a0 3B68     		ldr	r3, [r7]
 220 00a2 DA68     		ldr	r2, [r3, #12]
 221 00a4 8023     		mov	r3, #128
 222 00a6 DB00     		lsl	r3, r3, #3
 223 00a8 9A42     		cmp	r2, r3
 224 00aa 0AD0     		beq	.L13
 225 00ac 3B68     		ldr	r3, [r7]
 226 00ae DA68     		ldr	r2, [r3, #12]
 227 00b0 C023     		mov	r3, #192
 228 00b2 DB00     		lsl	r3, r3, #3
 229 00b4 9A42     		cmp	r2, r3
 230 00b6 04D0     		beq	.L13
 231 00b8 6E4B     		ldr	r3, .L23+8
 232 00ba 181C     		mov	r0, r3
 233 00bc D421     		mov	r1, #212
 234 00be FFF7FEFF 		bl	assert_failed
 235              	.L13:
 213:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 236              		.loc 1 213 0 is_stmt 1
 237 00c2 3B68     		ldr	r3, [r7]
 238 00c4 1B69     		ldr	r3, [r3, #16]
 239 00c6 0C22     		mov	r2, #12
 240 00c8 9343     		bic	r3, r2
 241 00ca 03D1     		bne	.L14
 242              		.loc 1 213 0 is_stmt 0 discriminator 2
 243 00cc 3B68     		ldr	r3, [r7]
 244 00ce 1B69     		ldr	r3, [r3, #16]
 245 00d0 002B     		cmp	r3, #0
 246 00d2 04D1     		bne	.L15
 247              	.L14:
 248              		.loc 1 213 0 discriminator 1
 249 00d4 674B     		ldr	r3, .L23+8
 250 00d6 181C     		mov	r0, r3
 251 00d8 D521     		mov	r1, #213
 252 00da FFF7FEFF 		bl	assert_failed
 253              	.L15:
 214:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 254              		.loc 1 214 0 is_stmt 1
 255 00de 3B68     		ldr	r3, [r7]
 256 00e0 5B69     		ldr	r3, [r3, #20]
 257 00e2 002B     		cmp	r3, #0
 258 00e4 16D0     		beq	.L16
 259              		.loc 1 214 0 is_stmt 0 discriminator 1
 260 00e6 3B68     		ldr	r3, [r7]
 261 00e8 5A69     		ldr	r2, [r3, #20]
 262 00ea 8023     		mov	r3, #128
 263 00ec 5B00     		lsl	r3, r3, #1
 264 00ee 9A42     		cmp	r2, r3
 265 00f0 10D0     		beq	.L16
 266 00f2 3B68     		ldr	r3, [r7]
 267 00f4 5A69     		ldr	r2, [r3, #20]
 268 00f6 8023     		mov	r3, #128
 269 00f8 9B00     		lsl	r3, r3, #2
 270 00fa 9A42     		cmp	r2, r3
 271 00fc 0AD0     		beq	.L16
 272 00fe 3B68     		ldr	r3, [r7]
 273 0100 5A69     		ldr	r2, [r3, #20]
 274 0102 C023     		mov	r3, #192
 275 0104 9B00     		lsl	r3, r3, #2
 276 0106 9A42     		cmp	r2, r3
 277 0108 04D0     		beq	.L16
 278 010a 5A4B     		ldr	r3, .L23+8
 279 010c 181C     		mov	r0, r3
 280 010e D621     		mov	r1, #214
 281 0110 FFF7FEFF 		bl	assert_failed
 282              	.L16:
 215:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 216:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Disable USART */
 217:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 283              		.loc 1 217 0 is_stmt 1
 284 0114 7B68     		ldr	r3, [r7, #4]
 285 0116 1B68     		ldr	r3, [r3]
 286 0118 0122     		mov	r2, #1
 287 011a 191C     		mov	r1, r3
 288 011c 9143     		bic	r1, r2
 289 011e 0A1C     		mov	r2, r1
 290 0120 7B68     		ldr	r3, [r7, #4]
 291 0122 1A60     		str	r2, [r3]
 218:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 219:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 220:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR2;
 292              		.loc 1 220 0
 293 0124 7B68     		ldr	r3, [r7, #4]
 294 0126 5B68     		ldr	r3, [r3, #4]
 295 0128 7B63     		str	r3, [r7, #52]
 221:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear STOP[13:12] bits */
 222:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 296              		.loc 1 222 0
 297 012a 7A6B     		ldr	r2, [r7, #52]
 298 012c 534B     		ldr	r3, .L23+16
 299 012e 1340     		and	r3, r2
 300 0130 7B63     		str	r3, [r7, #52]
 223:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 224:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
 225:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set STOP[13:12] bits according to USART_StopBits value */
 226:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 301              		.loc 1 226 0
 302 0132 3B68     		ldr	r3, [r7]
 303 0134 9B68     		ldr	r3, [r3, #8]
 304 0136 7A6B     		ldr	r2, [r7, #52]
 305 0138 1343     		orr	r3, r2
 306 013a 7B63     		str	r3, [r7, #52]
 227:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 228:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR2 */
 229:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 = tmpreg;
 307              		.loc 1 229 0
 308 013c 7B68     		ldr	r3, [r7, #4]
 309 013e 7A6B     		ldr	r2, [r7, #52]
 310 0140 5A60     		str	r2, [r3, #4]
 230:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 231:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 232:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR1;
 311              		.loc 1 232 0
 312 0142 7B68     		ldr	r3, [r7, #4]
 313 0144 1B68     		ldr	r3, [r3]
 314 0146 7B63     		str	r3, [r7, #52]
 233:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 234:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 315              		.loc 1 234 0
 316 0148 7A6B     		ldr	r2, [r7, #52]
 317 014a 4D4B     		ldr	r3, .L23+20
 318 014c 1340     		and	r3, r2
 319 014e 7B63     		str	r3, [r7, #52]
 235:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 236:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Word Length, Parity and mode ----------------------- */
 237:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the M bits according to USART_WordLength value */
 238:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set PCE and PS bits according to USART_Parity value */
 239:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set TE and RE bits according to USART_Mode value */
 240:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 320              		.loc 1 240 0
 321 0150 3B68     		ldr	r3, [r7]
 322 0152 5A68     		ldr	r2, [r3, #4]
 323 0154 3B68     		ldr	r3, [r7]
 324 0156 DB68     		ldr	r3, [r3, #12]
 325 0158 1A43     		orr	r2, r3
 241:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             USART_InitStruct->USART_Mode;
 326              		.loc 1 241 0
 327 015a 3B68     		ldr	r3, [r7]
 328 015c 1B69     		ldr	r3, [r3, #16]
 240:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 329              		.loc 1 240 0
 330 015e 1343     		orr	r3, r2
 331 0160 7A6B     		ldr	r2, [r7, #52]
 332 0162 1343     		orr	r3, r2
 333 0164 7B63     		str	r3, [r7, #52]
 242:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 243:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR1 */
 244:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 = tmpreg;
 334              		.loc 1 244 0
 335 0166 7B68     		ldr	r3, [r7, #4]
 336 0168 7A6B     		ldr	r2, [r7, #52]
 337 016a 1A60     		str	r2, [r3]
 245:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 246:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 247:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR3;
 338              		.loc 1 247 0
 339 016c 7B68     		ldr	r3, [r7, #4]
 340 016e 9B68     		ldr	r3, [r3, #8]
 341 0170 7B63     		str	r3, [r7, #52]
 248:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear CTSE and RTSE bits */
 249:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 342              		.loc 1 249 0
 343 0172 7A6B     		ldr	r2, [r7, #52]
 344 0174 434B     		ldr	r3, .L23+24
 345 0176 1340     		and	r3, r2
 346 0178 7B63     		str	r3, [r7, #52]
 250:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 251:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART HFC -------------------------------------------------*/
 252:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 253:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 347              		.loc 1 253 0
 348 017a 3B68     		ldr	r3, [r7]
 349 017c 5B69     		ldr	r3, [r3, #20]
 350 017e 7A6B     		ldr	r2, [r7, #52]
 351 0180 1343     		orr	r3, r2
 352 0182 7B63     		str	r3, [r7, #52]
 254:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 255:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR3 */
 256:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 = tmpreg;
 353              		.loc 1 256 0
 354 0184 7B68     		ldr	r3, [r7, #4]
 355 0186 7A6B     		ldr	r2, [r7, #52]
 356 0188 9A60     		str	r2, [r3, #8]
 257:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 258:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 259:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Baud Rate -------------------------------------------*/
 260:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 357              		.loc 1 260 0
 358 018a 3B1C     		mov	r3, r7
 359 018c 0C33     		add	r3, r3, #12
 360 018e 181C     		mov	r0, r3
 361 0190 FFF7FEFF 		bl	RCC_GetClocksFreq
 261:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 262:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (USARTx == USART1)
 362              		.loc 1 262 0
 363 0194 7A68     		ldr	r2, [r7, #4]
 364 0196 354B     		ldr	r3, .L23
 365 0198 9A42     		cmp	r2, r3
 366 019a 04D1     		bne	.L17
 263:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 264:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 367              		.loc 1 264 0
 368 019c 3B1C     		mov	r3, r7
 369 019e 0C33     		add	r3, r3, #12
 370 01a0 9B69     		ldr	r3, [r3, #24]
 371 01a2 3B63     		str	r3, [r7, #48]
 372 01a4 03E0     		b	.L18
 373              	.L17:
 265:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 266:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 267:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 268:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK_Frequency;
 374              		.loc 1 268 0
 375 01a6 3B1C     		mov	r3, r7
 376 01a8 0C33     		add	r3, r3, #12
 377 01aa 9B68     		ldr	r3, [r3, #8]
 378 01ac 3B63     		str	r3, [r7, #48]
 379              	.L18:
 269:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 270:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Determine the integer part */
 271:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 380              		.loc 1 271 0
 381 01ae 7B68     		ldr	r3, [r7, #4]
 382 01b0 1A68     		ldr	r2, [r3]
 383 01b2 8023     		mov	r3, #128
 384 01b4 1B02     		lsl	r3, r3, #8
 385 01b6 1340     		and	r3, r2
 386 01b8 0FD0     		beq	.L19
 272:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 273:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 274:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 387              		.loc 1 274 0
 388 01ba 3A6B     		ldr	r2, [r7, #48]
 389 01bc 131C     		mov	r3, r2
 390 01be 9B00     		lsl	r3, r3, #2
 391 01c0 9B18     		add	r3, r3, r2
 392 01c2 9A00     		lsl	r2, r3, #2
 393 01c4 9A18     		add	r2, r3, r2
 394 01c6 3B68     		ldr	r3, [r7]
 395 01c8 1B68     		ldr	r3, [r3]
 396 01ca 5B00     		lsl	r3, r3, #1
 397 01cc 101C     		mov	r0, r2
 398 01ce 191C     		mov	r1, r3
 399 01d0 FFF7FEFF 		bl	__aeabi_uidiv
 400 01d4 031C     		mov	r3, r0
 401 01d6 FB62     		str	r3, [r7, #44]
 402 01d8 0EE0     		b	.L20
 403              	.L19:
 275:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 276:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 277:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 278:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 279:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 404              		.loc 1 279 0
 405 01da 3A6B     		ldr	r2, [r7, #48]
 406 01dc 131C     		mov	r3, r2
 407 01de 9B00     		lsl	r3, r3, #2
 408 01e0 9B18     		add	r3, r3, r2
 409 01e2 9A00     		lsl	r2, r3, #2
 410 01e4 9A18     		add	r2, r3, r2
 411 01e6 3B68     		ldr	r3, [r7]
 412 01e8 1B68     		ldr	r3, [r3]
 413 01ea 9B00     		lsl	r3, r3, #2
 414 01ec 101C     		mov	r0, r2
 415 01ee 191C     		mov	r1, r3
 416 01f0 FFF7FEFF 		bl	__aeabi_uidiv
 417 01f4 031C     		mov	r3, r0
 418 01f6 FB62     		str	r3, [r7, #44]
 419              	.L20:
 280:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 281:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 420              		.loc 1 281 0
 421 01f8 FB6A     		ldr	r3, [r7, #44]
 422 01fa 181C     		mov	r0, r3
 423 01fc 6421     		mov	r1, #100
 424 01fe FFF7FEFF 		bl	__aeabi_uidiv
 425 0202 031C     		mov	r3, r0
 426 0204 1B01     		lsl	r3, r3, #4
 427 0206 7B63     		str	r3, [r7, #52]
 282:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 283:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Determine the fractional part */
 284:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 428              		.loc 1 284 0
 429 0208 7B6B     		ldr	r3, [r7, #52]
 430 020a 1B09     		lsr	r3, r3, #4
 431 020c 6422     		mov	r2, #100
 432 020e 5343     		mul	r3, r2
 433 0210 FA6A     		ldr	r2, [r7, #44]
 434 0212 D31A     		sub	r3, r2, r3
 435 0214 BB62     		str	r3, [r7, #40]
 285:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 286:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Implement the fractional part in the register */
 287:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 436              		.loc 1 287 0
 437 0216 7B68     		ldr	r3, [r7, #4]
 438 0218 1A68     		ldr	r2, [r3]
 439 021a 8023     		mov	r3, #128
 440 021c 1B02     		lsl	r3, r3, #8
 441 021e 1340     		and	r3, r2
 442 0220 0ED0     		beq	.L21
 288:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 289:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 443              		.loc 1 289 0
 444 0222 BB6A     		ldr	r3, [r7, #40]
 445 0224 DB00     		lsl	r3, r3, #3
 446 0226 3233     		add	r3, r3, #50
 447 0228 181C     		mov	r0, r3
 448 022a 6421     		mov	r1, #100
 449 022c FFF7FEFF 		bl	__aeabi_uidiv
 450 0230 031C     		mov	r3, r0
 451 0232 1A1C     		mov	r2, r3
 452 0234 0723     		mov	r3, #7
 453 0236 1340     		and	r3, r2
 454 0238 7A6B     		ldr	r2, [r7, #52]
 455 023a 1343     		orr	r3, r2
 456 023c 7B63     		str	r3, [r7, #52]
 457 023e 0DE0     		b	.L22
 458              	.L21:
 290:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 291:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 292:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 293:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 459              		.loc 1 293 0
 460 0240 BB6A     		ldr	r3, [r7, #40]
 461 0242 1B01     		lsl	r3, r3, #4
 462 0244 3233     		add	r3, r3, #50
 463 0246 181C     		mov	r0, r3
 464 0248 6421     		mov	r1, #100
 465 024a FFF7FEFF 		bl	__aeabi_uidiv
 466 024e 031C     		mov	r3, r0
 467 0250 1A1C     		mov	r2, r3
 468 0252 0F23     		mov	r3, #15
 469 0254 1340     		and	r3, r2
 470 0256 7A6B     		ldr	r2, [r7, #52]
 471 0258 1343     		orr	r3, r2
 472 025a 7B63     		str	r3, [r7, #52]
 473              	.L22:
 294:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 295:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  
 296:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART BRR */
 297:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 474              		.loc 1 297 0
 475 025c 7B6B     		ldr	r3, [r7, #52]
 476 025e 9AB2     		uxth	r2, r3
 477 0260 7B68     		ldr	r3, [r7, #4]
 478 0262 9A81     		strh	r2, [r3, #12]
 298:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 479              		.loc 1 298 0
 480 0264 BD46     		mov	sp, r7
 481 0266 0EB0     		add	sp, sp, #56
 482              		@ sp needed
 483 0268 80BD     		pop	{r7, pc}
 484              	.L24:
 485 026a C046     		.align	2
 486              	.L23:
 487 026c 00380140 		.word	1073821696
 488 0270 00440040 		.word	1073759232
 489 0274 00000000 		.word	.LC0
 490 0278 808D5B00 		.word	6000000
 491 027c FFCFFFFF 		.word	-12289
 492 0280 F3E9FFFF 		.word	-5645
 493 0284 FFFCFFFF 		.word	-769
 494              		.cfi_endproc
 495              	.LFE33:
 497              		.section	.text.USART_StructInit,"ax",%progbits
 498              		.align	2
 499              		.global	USART_StructInit
 500              		.code	16
 501              		.thumb_func
 503              	USART_StructInit:
 504              	.LFB34:
 299:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 300:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 301:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 302:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 303:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   which will be initialized.
 304:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 305:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 306:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 307:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 505              		.loc 1 307 0
 506              		.cfi_startproc
 507 0000 80B5     		push	{r7, lr}
 508              		.cfi_def_cfa_offset 8
 509              		.cfi_offset 7, -8
 510              		.cfi_offset 14, -4
 511 0002 82B0     		sub	sp, sp, #8
 512              		.cfi_def_cfa_offset 16
 513 0004 00AF     		add	r7, sp, #0
 514              		.cfi_def_cfa_register 7
 515 0006 7860     		str	r0, [r7, #4]
 308:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* USART_InitStruct members default value */
 309:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 516              		.loc 1 309 0
 517 0008 7B68     		ldr	r3, [r7, #4]
 518 000a 9622     		mov	r2, #150
 519 000c 9201     		lsl	r2, r2, #6
 520 000e 1A60     		str	r2, [r3]
 310:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 521              		.loc 1 310 0
 522 0010 7B68     		ldr	r3, [r7, #4]
 523 0012 0022     		mov	r2, #0
 524 0014 5A60     		str	r2, [r3, #4]
 311:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 525              		.loc 1 311 0
 526 0016 7B68     		ldr	r3, [r7, #4]
 527 0018 0022     		mov	r2, #0
 528 001a 9A60     		str	r2, [r3, #8]
 312:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 529              		.loc 1 312 0
 530 001c 7B68     		ldr	r3, [r7, #4]
 531 001e 0022     		mov	r2, #0
 532 0020 DA60     		str	r2, [r3, #12]
 313:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 533              		.loc 1 313 0
 534 0022 7B68     		ldr	r3, [r7, #4]
 535 0024 0C22     		mov	r2, #12
 536 0026 1A61     		str	r2, [r3, #16]
 314:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 537              		.loc 1 314 0
 538 0028 7B68     		ldr	r3, [r7, #4]
 539 002a 0022     		mov	r2, #0
 540 002c 5A61     		str	r2, [r3, #20]
 315:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 541              		.loc 1 315 0
 542 002e BD46     		mov	sp, r7
 543 0030 02B0     		add	sp, sp, #8
 544              		@ sp needed
 545 0032 80BD     		pop	{r7, pc}
 546              		.cfi_endproc
 547              	.LFE34:
 549              		.section	.text.USART_ClockInit,"ax",%progbits
 550              		.align	2
 551              		.global	USART_ClockInit
 552              		.code	16
 553              		.thumb_func
 555              	USART_ClockInit:
 556              	.LFB35:
 316:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 317:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 318:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 319:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   specified parameters in the USART_ClockInitStruct.
 320:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 321:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 322:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   structure that contains the configuration information for the specified 
 323:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   USART peripheral.  
 324:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 325:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 326:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 327:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 557              		.loc 1 327 0
 558              		.cfi_startproc
 559 0000 80B5     		push	{r7, lr}
 560              		.cfi_def_cfa_offset 8
 561              		.cfi_offset 7, -8
 562              		.cfi_offset 14, -4
 563 0002 84B0     		sub	sp, sp, #16
 564              		.cfi_def_cfa_offset 24
 565 0004 00AF     		add	r7, sp, #0
 566              		.cfi_def_cfa_register 7
 567 0006 7860     		str	r0, [r7, #4]
 568 0008 3960     		str	r1, [r7]
 328:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t tmpreg = 0;
 569              		.loc 1 328 0
 570 000a 0023     		mov	r3, #0
 571 000c FB60     		str	r3, [r7, #12]
 329:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 330:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 572              		.loc 1 330 0
 573 000e 7A68     		ldr	r2, [r7, #4]
 574 0010 364B     		ldr	r3, .L32
 575 0012 9A42     		cmp	r2, r3
 576 0014 0AD0     		beq	.L27
 577              		.loc 1 330 0 is_stmt 0 discriminator 1
 578 0016 7A68     		ldr	r2, [r7, #4]
 579 0018 354B     		ldr	r3, .L32+4
 580 001a 9A42     		cmp	r2, r3
 581 001c 06D0     		beq	.L27
 582 001e 354A     		ldr	r2, .L32+8
 583 0020 A523     		mov	r3, #165
 584 0022 5B00     		lsl	r3, r3, #1
 585 0024 101C     		mov	r0, r2
 586 0026 191C     		mov	r1, r3
 587 0028 FFF7FEFF 		bl	assert_failed
 588              	.L27:
 331:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 589              		.loc 1 331 0 is_stmt 1
 590 002c 3B68     		ldr	r3, [r7]
 591 002e 1B68     		ldr	r3, [r3]
 592 0030 002B     		cmp	r3, #0
 593 0032 0CD0     		beq	.L28
 594              		.loc 1 331 0 is_stmt 0 discriminator 1
 595 0034 3B68     		ldr	r3, [r7]
 596 0036 1A68     		ldr	r2, [r3]
 597 0038 8023     		mov	r3, #128
 598 003a 1B01     		lsl	r3, r3, #4
 599 003c 9A42     		cmp	r2, r3
 600 003e 06D0     		beq	.L28
 601 0040 2C4A     		ldr	r2, .L32+8
 602 0042 4C23     		mov	r3, #76
 603 0044 FF33     		add	r3, r3, #255
 604 0046 101C     		mov	r0, r2
 605 0048 191C     		mov	r1, r3
 606 004a FFF7FEFF 		bl	assert_failed
 607              	.L28:
 332:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 608              		.loc 1 332 0 is_stmt 1
 609 004e 3B68     		ldr	r3, [r7]
 610 0050 5B68     		ldr	r3, [r3, #4]
 611 0052 002B     		cmp	r3, #0
 612 0054 0CD0     		beq	.L29
 613              		.loc 1 332 0 is_stmt 0 discriminator 1
 614 0056 3B68     		ldr	r3, [r7]
 615 0058 5A68     		ldr	r2, [r3, #4]
 616 005a 8023     		mov	r3, #128
 617 005c DB00     		lsl	r3, r3, #3
 618 005e 9A42     		cmp	r2, r3
 619 0060 06D0     		beq	.L29
 620 0062 244A     		ldr	r2, .L32+8
 621 0064 A623     		mov	r3, #166
 622 0066 5B00     		lsl	r3, r3, #1
 623 0068 101C     		mov	r0, r2
 624 006a 191C     		mov	r1, r3
 625 006c FFF7FEFF 		bl	assert_failed
 626              	.L29:
 333:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 627              		.loc 1 333 0 is_stmt 1
 628 0070 3B68     		ldr	r3, [r7]
 629 0072 9B68     		ldr	r3, [r3, #8]
 630 0074 002B     		cmp	r3, #0
 631 0076 0CD0     		beq	.L30
 632              		.loc 1 333 0 is_stmt 0 discriminator 1
 633 0078 3B68     		ldr	r3, [r7]
 634 007a 9A68     		ldr	r2, [r3, #8]
 635 007c 8023     		mov	r3, #128
 636 007e 9B00     		lsl	r3, r3, #2
 637 0080 9A42     		cmp	r2, r3
 638 0082 06D0     		beq	.L30
 639 0084 1B4A     		ldr	r2, .L32+8
 640 0086 4E23     		mov	r3, #78
 641 0088 FF33     		add	r3, r3, #255
 642 008a 101C     		mov	r0, r2
 643 008c 191C     		mov	r1, r3
 644 008e FFF7FEFF 		bl	assert_failed
 645              	.L30:
 334:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 646              		.loc 1 334 0 is_stmt 1
 647 0092 3B68     		ldr	r3, [r7]
 648 0094 DB68     		ldr	r3, [r3, #12]
 649 0096 002B     		cmp	r3, #0
 650 0098 0CD0     		beq	.L31
 651              		.loc 1 334 0 is_stmt 0 discriminator 1
 652 009a 3B68     		ldr	r3, [r7]
 653 009c DA68     		ldr	r2, [r3, #12]
 654 009e 8023     		mov	r3, #128
 655 00a0 5B00     		lsl	r3, r3, #1
 656 00a2 9A42     		cmp	r2, r3
 657 00a4 06D0     		beq	.L31
 658 00a6 134A     		ldr	r2, .L32+8
 659 00a8 A723     		mov	r3, #167
 660 00aa 5B00     		lsl	r3, r3, #1
 661 00ac 101C     		mov	r0, r2
 662 00ae 191C     		mov	r1, r3
 663 00b0 FFF7FEFF 		bl	assert_failed
 664              	.L31:
 335:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 336:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR2;
 665              		.loc 1 336 0 is_stmt 1
 666 00b4 7B68     		ldr	r3, [r7, #4]
 667 00b6 5B68     		ldr	r3, [r3, #4]
 668 00b8 FB60     		str	r3, [r7, #12]
 337:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
 338:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 669              		.loc 1 338 0
 670 00ba FA68     		ldr	r2, [r7, #12]
 671 00bc 0E4B     		ldr	r3, .L32+12
 672 00be 1340     		and	r3, r2
 673 00c0 FB60     		str	r3, [r7, #12]
 339:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
 340:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 341:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 342:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 343:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 344:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 674              		.loc 1 344 0
 675 00c2 3B68     		ldr	r3, [r7]
 676 00c4 1A68     		ldr	r2, [r3]
 677 00c6 3B68     		ldr	r3, [r7]
 678 00c8 5B68     		ldr	r3, [r3, #4]
 679 00ca 1A43     		orr	r2, r3
 345:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 680              		.loc 1 345 0
 681 00cc 3B68     		ldr	r3, [r7]
 682 00ce 9B68     		ldr	r3, [r3, #8]
 344:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 683              		.loc 1 344 0
 684 00d0 1A43     		orr	r2, r3
 685              		.loc 1 345 0
 686 00d2 3B68     		ldr	r3, [r7]
 687 00d4 DB68     		ldr	r3, [r3, #12]
 344:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 688              		.loc 1 344 0
 689 00d6 1343     		orr	r3, r2
 690 00d8 FA68     		ldr	r2, [r7, #12]
 691 00da 1343     		orr	r3, r2
 692 00dc FB60     		str	r3, [r7, #12]
 346:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR2 */
 347:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 = tmpreg;
 693              		.loc 1 347 0
 694 00de 7B68     		ldr	r3, [r7, #4]
 695 00e0 FA68     		ldr	r2, [r7, #12]
 696 00e2 5A60     		str	r2, [r3, #4]
 348:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 697              		.loc 1 348 0
 698 00e4 BD46     		mov	sp, r7
 699 00e6 04B0     		add	sp, sp, #16
 700              		@ sp needed
 701 00e8 80BD     		pop	{r7, pc}
 702              	.L33:
 703 00ea C046     		.align	2
 704              	.L32:
 705 00ec 00380140 		.word	1073821696
 706 00f0 00440040 		.word	1073759232
 707 00f4 00000000 		.word	.LC0
 708 00f8 FFF0FFFF 		.word	-3841
 709              		.cfi_endproc
 710              	.LFE35:
 712              		.section	.text.USART_ClockStructInit,"ax",%progbits
 713              		.align	2
 714              		.global	USART_ClockStructInit
 715              		.code	16
 716              		.thumb_func
 718              	USART_ClockStructInit:
 719              	.LFB36:
 349:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 350:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 351:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 352:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 353:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   structure which will be initialized.
 354:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 355:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 356:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 357:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 720              		.loc 1 357 0
 721              		.cfi_startproc
 722 0000 80B5     		push	{r7, lr}
 723              		.cfi_def_cfa_offset 8
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 0002 82B0     		sub	sp, sp, #8
 727              		.cfi_def_cfa_offset 16
 728 0004 00AF     		add	r7, sp, #0
 729              		.cfi_def_cfa_register 7
 730 0006 7860     		str	r0, [r7, #4]
 358:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* USART_ClockInitStruct members default value */
 359:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 731              		.loc 1 359 0
 732 0008 7B68     		ldr	r3, [r7, #4]
 733 000a 0022     		mov	r2, #0
 734 000c 1A60     		str	r2, [r3]
 360:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 735              		.loc 1 360 0
 736 000e 7B68     		ldr	r3, [r7, #4]
 737 0010 0022     		mov	r2, #0
 738 0012 5A60     		str	r2, [r3, #4]
 361:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 739              		.loc 1 361 0
 740 0014 7B68     		ldr	r3, [r7, #4]
 741 0016 0022     		mov	r2, #0
 742 0018 9A60     		str	r2, [r3, #8]
 362:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 743              		.loc 1 362 0
 744 001a 7B68     		ldr	r3, [r7, #4]
 745 001c 0022     		mov	r2, #0
 746 001e DA60     		str	r2, [r3, #12]
 363:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 747              		.loc 1 363 0
 748 0020 BD46     		mov	sp, r7
 749 0022 02B0     		add	sp, sp, #8
 750              		@ sp needed
 751 0024 80BD     		pop	{r7, pc}
 752              		.cfi_endproc
 753              	.LFE36:
 755 0026 C046     		.section	.text.USART_Cmd,"ax",%progbits
 756              		.align	2
 757              		.global	USART_Cmd
 758              		.code	16
 759              		.thumb_func
 761              	USART_Cmd:
 762              	.LFB37:
 364:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 365:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 366:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 367:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 368:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 369:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 370:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 371:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 372:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 373:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 763              		.loc 1 373 0
 764              		.cfi_startproc
 765 0000 80B5     		push	{r7, lr}
 766              		.cfi_def_cfa_offset 8
 767              		.cfi_offset 7, -8
 768              		.cfi_offset 14, -4
 769 0002 82B0     		sub	sp, sp, #8
 770              		.cfi_def_cfa_offset 16
 771 0004 00AF     		add	r7, sp, #0
 772              		.cfi_def_cfa_register 7
 773 0006 7860     		str	r0, [r7, #4]
 774 0008 0A1C     		mov	r2, r1
 775 000a FB1C     		add	r3, r7, #3
 776 000c 1A70     		strb	r2, [r3]
 374:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 375:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 777              		.loc 1 375 0
 778 000e 7A68     		ldr	r2, [r7, #4]
 779 0010 194B     		ldr	r3, .L40
 780 0012 9A42     		cmp	r2, r3
 781 0014 0AD0     		beq	.L36
 782              		.loc 1 375 0 is_stmt 0 discriminator 1
 783 0016 7A68     		ldr	r2, [r7, #4]
 784 0018 184B     		ldr	r3, .L40+4
 785 001a 9A42     		cmp	r2, r3
 786 001c 06D0     		beq	.L36
 787 001e 184A     		ldr	r2, .L40+8
 788 0020 7823     		mov	r3, #120
 789 0022 FF33     		add	r3, r3, #255
 790 0024 101C     		mov	r0, r2
 791 0026 191C     		mov	r1, r3
 792 0028 FFF7FEFF 		bl	assert_failed
 793              	.L36:
 376:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 794              		.loc 1 376 0 is_stmt 1
 795 002c FB1C     		add	r3, r7, #3
 796 002e 1B78     		ldrb	r3, [r3]
 797 0030 002B     		cmp	r3, #0
 798 0032 0AD0     		beq	.L37
 799              		.loc 1 376 0 is_stmt 0 discriminator 1
 800 0034 FB1C     		add	r3, r7, #3
 801 0036 1B78     		ldrb	r3, [r3]
 802 0038 012B     		cmp	r3, #1
 803 003a 06D0     		beq	.L37
 804 003c 104A     		ldr	r2, .L40+8
 805 003e BC23     		mov	r3, #188
 806 0040 5B00     		lsl	r3, r3, #1
 807 0042 101C     		mov	r0, r2
 808 0044 191C     		mov	r1, r3
 809 0046 FFF7FEFF 		bl	assert_failed
 810              	.L37:
 377:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 378:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 811              		.loc 1 378 0 is_stmt 1
 812 004a FB1C     		add	r3, r7, #3
 813 004c 1B78     		ldrb	r3, [r3]
 814 004e 002B     		cmp	r3, #0
 815 0050 06D0     		beq	.L38
 379:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 380:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 381:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 816              		.loc 1 381 0
 817 0052 7B68     		ldr	r3, [r7, #4]
 818 0054 1B68     		ldr	r3, [r3]
 819 0056 0122     		mov	r2, #1
 820 0058 1A43     		orr	r2, r3
 821 005a 7B68     		ldr	r3, [r7, #4]
 822 005c 1A60     		str	r2, [r3]
 823 005e 07E0     		b	.L35
 824              	.L38:
 382:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 383:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 384:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 385:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 386:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 825              		.loc 1 386 0
 826 0060 7B68     		ldr	r3, [r7, #4]
 827 0062 1B68     		ldr	r3, [r3]
 828 0064 0122     		mov	r2, #1
 829 0066 191C     		mov	r1, r3
 830 0068 9143     		bic	r1, r2
 831 006a 0A1C     		mov	r2, r1
 832 006c 7B68     		ldr	r3, [r7, #4]
 833 006e 1A60     		str	r2, [r3]
 834              	.L35:
 387:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 388:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 835              		.loc 1 388 0
 836 0070 BD46     		mov	sp, r7
 837 0072 02B0     		add	sp, sp, #8
 838              		@ sp needed
 839 0074 80BD     		pop	{r7, pc}
 840              	.L41:
 841 0076 C046     		.align	2
 842              	.L40:
 843 0078 00380140 		.word	1073821696
 844 007c 00440040 		.word	1073759232
 845 0080 00000000 		.word	.LC0
 846              		.cfi_endproc
 847              	.LFE37:
 849              		.section	.text.USART_DirectionModeCmd,"ax",%progbits
 850              		.align	2
 851              		.global	USART_DirectionModeCmd
 852              		.code	16
 853              		.thumb_func
 855              	USART_DirectionModeCmd:
 856              	.LFB38:
 389:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 390:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 391:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's transmitter or receiver.
 392:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 393:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Direction: specifies the USART direction.
 394:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
 395:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Mode_Tx: USART Transmitter
 396:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Mode_Rx: USART Receiver
 397:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART transfer direction.
 398:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.  
 399:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 400:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 401:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState Ne
 402:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 857              		.loc 1 402 0
 858              		.cfi_startproc
 859 0000 80B5     		push	{r7, lr}
 860              		.cfi_def_cfa_offset 8
 861              		.cfi_offset 7, -8
 862              		.cfi_offset 14, -4
 863 0002 84B0     		sub	sp, sp, #16
 864              		.cfi_def_cfa_offset 24
 865 0004 00AF     		add	r7, sp, #0
 866              		.cfi_def_cfa_register 7
 867 0006 F860     		str	r0, [r7, #12]
 868 0008 B960     		str	r1, [r7, #8]
 869 000a FB1D     		add	r3, r7, #7
 870 000c 1A70     		strb	r2, [r3]
 403:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 404:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 871              		.loc 1 404 0
 872 000e FA68     		ldr	r2, [r7, #12]
 873 0010 1F4B     		ldr	r3, .L49
 874 0012 9A42     		cmp	r2, r3
 875 0014 0AD0     		beq	.L43
 876              		.loc 1 404 0 is_stmt 0 discriminator 1
 877 0016 FA68     		ldr	r2, [r7, #12]
 878 0018 1E4B     		ldr	r3, .L49+4
 879 001a 9A42     		cmp	r2, r3
 880 001c 06D0     		beq	.L43
 881 001e 1E4A     		ldr	r2, .L49+8
 882 0020 CA23     		mov	r3, #202
 883 0022 5B00     		lsl	r3, r3, #1
 884 0024 101C     		mov	r0, r2
 885 0026 191C     		mov	r1, r3
 886 0028 FFF7FEFF 		bl	assert_failed
 887              	.L43:
 405:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_MODE(USART_DirectionMode));
 888              		.loc 1 405 0 is_stmt 1
 889 002c BB68     		ldr	r3, [r7, #8]
 890 002e 0C22     		mov	r2, #12
 891 0030 9343     		bic	r3, r2
 892 0032 02D1     		bne	.L44
 893              		.loc 1 405 0 is_stmt 0 discriminator 2
 894 0034 BB68     		ldr	r3, [r7, #8]
 895 0036 002B     		cmp	r3, #0
 896 0038 06D1     		bne	.L45
 897              	.L44:
 898              		.loc 1 405 0 discriminator 1
 899 003a 174A     		ldr	r2, .L49+8
 900 003c 9623     		mov	r3, #150
 901 003e FF33     		add	r3, r3, #255
 902 0040 101C     		mov	r0, r2
 903 0042 191C     		mov	r1, r3
 904 0044 FFF7FEFF 		bl	assert_failed
 905              	.L45:
 406:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 906              		.loc 1 406 0 is_stmt 1
 907 0048 FB1D     		add	r3, r7, #7
 908 004a 1B78     		ldrb	r3, [r3]
 909 004c 002B     		cmp	r3, #0
 910 004e 0AD0     		beq	.L46
 911              		.loc 1 406 0 is_stmt 0 discriminator 1
 912 0050 FB1D     		add	r3, r7, #7
 913 0052 1B78     		ldrb	r3, [r3]
 914 0054 012B     		cmp	r3, #1
 915 0056 06D0     		beq	.L46
 916 0058 0F4A     		ldr	r2, .L49+8
 917 005a CB23     		mov	r3, #203
 918 005c 5B00     		lsl	r3, r3, #1
 919 005e 101C     		mov	r0, r2
 920 0060 191C     		mov	r1, r3
 921 0062 FFF7FEFF 		bl	assert_failed
 922              	.L46:
 407:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 408:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 923              		.loc 1 408 0 is_stmt 1
 924 0066 FB1D     		add	r3, r7, #7
 925 0068 1B78     		ldrb	r3, [r3]
 926 006a 002B     		cmp	r3, #0
 927 006c 06D0     		beq	.L47
 409:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 410:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the USART's transfer interface by setting the TE and/or RE bits 
 411:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        in the USART CR1 register */
 412:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_DirectionMode;
 928              		.loc 1 412 0
 929 006e FB68     		ldr	r3, [r7, #12]
 930 0070 1A68     		ldr	r2, [r3]
 931 0072 BB68     		ldr	r3, [r7, #8]
 932 0074 1A43     		orr	r2, r3
 933 0076 FB68     		ldr	r3, [r7, #12]
 934 0078 1A60     		str	r2, [r3]
 935 007a 06E0     		b	.L42
 936              	.L47:
 413:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 414:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 415:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 416:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the USART's transfer interface by clearing the TE and/or RE bits
 417:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        in the USART CR3 register */
 418:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 937              		.loc 1 418 0
 938 007c FB68     		ldr	r3, [r7, #12]
 939 007e 1B68     		ldr	r3, [r3]
 940 0080 BA68     		ldr	r2, [r7, #8]
 941 0082 D243     		mvn	r2, r2
 942 0084 1A40     		and	r2, r3
 943 0086 FB68     		ldr	r3, [r7, #12]
 944 0088 1A60     		str	r2, [r3]
 945              	.L42:
 419:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 420:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 946              		.loc 1 420 0
 947 008a BD46     		mov	sp, r7
 948 008c 04B0     		add	sp, sp, #16
 949              		@ sp needed
 950 008e 80BD     		pop	{r7, pc}
 951              	.L50:
 952              		.align	2
 953              	.L49:
 954 0090 00380140 		.word	1073821696
 955 0094 00440040 		.word	1073759232
 956 0098 00000000 		.word	.LC0
 957              		.cfi_endproc
 958              	.LFE38:
 960              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 961              		.align	2
 962              		.global	USART_OverSampling8Cmd
 963              		.code	16
 964              		.thumb_func
 966              	USART_OverSampling8Cmd:
 967              	.LFB39:
 421:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 422:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 423:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 424:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 425:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param NewState: new state of the USART 8x oversampling mode.
 426:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 427:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 428:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Init()
 429:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   function in order to have correct baudrate Divider value.
 430:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 431:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 432:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 433:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 968              		.loc 1 433 0
 969              		.cfi_startproc
 970 0000 80B5     		push	{r7, lr}
 971              		.cfi_def_cfa_offset 8
 972              		.cfi_offset 7, -8
 973              		.cfi_offset 14, -4
 974 0002 82B0     		sub	sp, sp, #8
 975              		.cfi_def_cfa_offset 16
 976 0004 00AF     		add	r7, sp, #0
 977              		.cfi_def_cfa_register 7
 978 0006 7860     		str	r0, [r7, #4]
 979 0008 0A1C     		mov	r2, r1
 980 000a FB1C     		add	r3, r7, #3
 981 000c 1A70     		strb	r2, [r3]
 434:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 435:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 982              		.loc 1 435 0
 983 000e 7A68     		ldr	r2, [r7, #4]
 984 0010 184B     		ldr	r3, .L56
 985 0012 9A42     		cmp	r2, r3
 986 0014 0AD0     		beq	.L52
 987              		.loc 1 435 0 is_stmt 0 discriminator 1
 988 0016 7A68     		ldr	r2, [r7, #4]
 989 0018 174B     		ldr	r3, .L56+4
 990 001a 9A42     		cmp	r2, r3
 991 001c 06D0     		beq	.L52
 992 001e 174A     		ldr	r2, .L56+8
 993 0020 B423     		mov	r3, #180
 994 0022 FF33     		add	r3, r3, #255
 995 0024 101C     		mov	r0, r2
 996 0026 191C     		mov	r1, r3
 997 0028 FFF7FEFF 		bl	assert_failed
 998              	.L52:
 436:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 999              		.loc 1 436 0 is_stmt 1
 1000 002c FB1C     		add	r3, r7, #3
 1001 002e 1B78     		ldrb	r3, [r3]
 1002 0030 002B     		cmp	r3, #0
 1003 0032 0AD0     		beq	.L53
 1004              		.loc 1 436 0 is_stmt 0 discriminator 1
 1005 0034 FB1C     		add	r3, r7, #3
 1006 0036 1B78     		ldrb	r3, [r3]
 1007 0038 012B     		cmp	r3, #1
 1008 003a 06D0     		beq	.L53
 1009 003c 0F4A     		ldr	r2, .L56+8
 1010 003e DA23     		mov	r3, #218
 1011 0040 5B00     		lsl	r3, r3, #1
 1012 0042 101C     		mov	r0, r2
 1013 0044 191C     		mov	r1, r3
 1014 0046 FFF7FEFF 		bl	assert_failed
 1015              	.L53:
 437:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 438:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1016              		.loc 1 438 0 is_stmt 1
 1017 004a FB1C     		add	r3, r7, #3
 1018 004c 1B78     		ldrb	r3, [r3]
 1019 004e 002B     		cmp	r3, #0
 1020 0050 07D0     		beq	.L54
 439:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 440:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 441:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 1021              		.loc 1 441 0
 1022 0052 7B68     		ldr	r3, [r7, #4]
 1023 0054 1B68     		ldr	r3, [r3]
 1024 0056 8022     		mov	r2, #128
 1025 0058 1202     		lsl	r2, r2, #8
 1026 005a 1A43     		orr	r2, r3
 1027 005c 7B68     		ldr	r3, [r7, #4]
 1028 005e 1A60     		str	r2, [r3]
 1029 0060 05E0     		b	.L51
 1030              	.L54:
 442:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 443:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 444:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 445:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 446:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 1031              		.loc 1 446 0
 1032 0062 7B68     		ldr	r3, [r7, #4]
 1033 0064 1A68     		ldr	r2, [r3]
 1034 0066 064B     		ldr	r3, .L56+12
 1035 0068 1A40     		and	r2, r3
 1036 006a 7B68     		ldr	r3, [r7, #4]
 1037 006c 1A60     		str	r2, [r3]
 1038              	.L51:
 447:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 448:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }  
 1039              		.loc 1 448 0
 1040 006e BD46     		mov	sp, r7
 1041 0070 02B0     		add	sp, sp, #8
 1042              		@ sp needed
 1043 0072 80BD     		pop	{r7, pc}
 1044              	.L57:
 1045              		.align	2
 1046              	.L56:
 1047 0074 00380140 		.word	1073821696
 1048 0078 00440040 		.word	1073759232
 1049 007c 00000000 		.word	.LC0
 1050 0080 FF7FFFFF 		.word	-32769
 1051              		.cfi_endproc
 1052              	.LFE39:
 1054              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 1055              		.align	2
 1056              		.global	USART_OneBitMethodCmd
 1057              		.code	16
 1058              		.thumb_func
 1060              	USART_OneBitMethodCmd:
 1061              	.LFB40:
 449:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 450:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 451:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 452:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 453:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 454:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 455:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 456:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.  
 457:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 458:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 459:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 460:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1062              		.loc 1 460 0
 1063              		.cfi_startproc
 1064 0000 80B5     		push	{r7, lr}
 1065              		.cfi_def_cfa_offset 8
 1066              		.cfi_offset 7, -8
 1067              		.cfi_offset 14, -4
 1068 0002 82B0     		sub	sp, sp, #8
 1069              		.cfi_def_cfa_offset 16
 1070 0004 00AF     		add	r7, sp, #0
 1071              		.cfi_def_cfa_register 7
 1072 0006 7860     		str	r0, [r7, #4]
 1073 0008 0A1C     		mov	r2, r1
 1074 000a FB1C     		add	r3, r7, #3
 1075 000c 1A70     		strb	r2, [r3]
 461:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 462:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1076              		.loc 1 462 0
 1077 000e 7A68     		ldr	r2, [r7, #4]
 1078 0010 184B     		ldr	r3, .L63
 1079 0012 9A42     		cmp	r2, r3
 1080 0014 0AD0     		beq	.L59
 1081              		.loc 1 462 0 is_stmt 0 discriminator 1
 1082 0016 7A68     		ldr	r2, [r7, #4]
 1083 0018 174B     		ldr	r3, .L63+4
 1084 001a 9A42     		cmp	r2, r3
 1085 001c 06D0     		beq	.L59
 1086 001e 174A     		ldr	r2, .L63+8
 1087 0020 E723     		mov	r3, #231
 1088 0022 5B00     		lsl	r3, r3, #1
 1089 0024 101C     		mov	r0, r2
 1090 0026 191C     		mov	r1, r3
 1091 0028 FFF7FEFF 		bl	assert_failed
 1092              	.L59:
 463:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1093              		.loc 1 463 0 is_stmt 1
 1094 002c FB1C     		add	r3, r7, #3
 1095 002e 1B78     		ldrb	r3, [r3]
 1096 0030 002B     		cmp	r3, #0
 1097 0032 0AD0     		beq	.L60
 1098              		.loc 1 463 0 is_stmt 0 discriminator 1
 1099 0034 FB1C     		add	r3, r7, #3
 1100 0036 1B78     		ldrb	r3, [r3]
 1101 0038 012B     		cmp	r3, #1
 1102 003a 06D0     		beq	.L60
 1103 003c 0F4A     		ldr	r2, .L63+8
 1104 003e D023     		mov	r3, #208
 1105 0040 FF33     		add	r3, r3, #255
 1106 0042 101C     		mov	r0, r2
 1107 0044 191C     		mov	r1, r3
 1108 0046 FFF7FEFF 		bl	assert_failed
 1109              	.L60:
 464:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 465:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1110              		.loc 1 465 0 is_stmt 1
 1111 004a FB1C     		add	r3, r7, #3
 1112 004c 1B78     		ldrb	r3, [r3]
 1113 004e 002B     		cmp	r3, #0
 1114 0050 07D0     		beq	.L61
 466:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 467:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 468:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 1115              		.loc 1 468 0
 1116 0052 7B68     		ldr	r3, [r7, #4]
 1117 0054 9B68     		ldr	r3, [r3, #8]
 1118 0056 8022     		mov	r2, #128
 1119 0058 1201     		lsl	r2, r2, #4
 1120 005a 1A43     		orr	r2, r3
 1121 005c 7B68     		ldr	r3, [r7, #4]
 1122 005e 9A60     		str	r2, [r3, #8]
 1123 0060 05E0     		b	.L58
 1124              	.L61:
 469:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 470:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 471:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 472:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 473:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 1125              		.loc 1 473 0
 1126 0062 7B68     		ldr	r3, [r7, #4]
 1127 0064 9A68     		ldr	r2, [r3, #8]
 1128 0066 064B     		ldr	r3, .L63+12
 1129 0068 1A40     		and	r2, r3
 1130 006a 7B68     		ldr	r3, [r7, #4]
 1131 006c 9A60     		str	r2, [r3, #8]
 1132              	.L58:
 474:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 475:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1133              		.loc 1 475 0
 1134 006e BD46     		mov	sp, r7
 1135 0070 02B0     		add	sp, sp, #8
 1136              		@ sp needed
 1137 0072 80BD     		pop	{r7, pc}
 1138              	.L64:
 1139              		.align	2
 1140              	.L63:
 1141 0074 00380140 		.word	1073821696
 1142 0078 00440040 		.word	1073759232
 1143 007c 00000000 		.word	.LC0
 1144 0080 FFF7FFFF 		.word	-2049
 1145              		.cfi_endproc
 1146              	.LFE40:
 1148              		.section	.text.USART_MSBFirstCmd,"ax",%progbits
 1149              		.align	2
 1150              		.global	USART_MSBFirstCmd
 1151              		.code	16
 1152              		.thumb_func
 1154              	USART_MSBFirstCmd:
 1155              	.LFB41:
 476:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 477:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 478:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's most significant bit first 
 479:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         transmitted/received following the start bit.
 480:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 481:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART most significant bit first
 482:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         transmitted/received following the start bit.
 483:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 484:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 485:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.  
 486:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 487:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 488:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 489:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1156              		.loc 1 489 0
 1157              		.cfi_startproc
 1158 0000 80B5     		push	{r7, lr}
 1159              		.cfi_def_cfa_offset 8
 1160              		.cfi_offset 7, -8
 1161              		.cfi_offset 14, -4
 1162 0002 82B0     		sub	sp, sp, #8
 1163              		.cfi_def_cfa_offset 16
 1164 0004 00AF     		add	r7, sp, #0
 1165              		.cfi_def_cfa_register 7
 1166 0006 7860     		str	r0, [r7, #4]
 1167 0008 0A1C     		mov	r2, r1
 1168 000a FB1C     		add	r3, r7, #3
 1169 000c 1A70     		strb	r2, [r3]
 490:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 491:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1170              		.loc 1 491 0
 1171 000e 7A68     		ldr	r2, [r7, #4]
 1172 0010 184B     		ldr	r3, .L70
 1173 0012 9A42     		cmp	r2, r3
 1174 0014 0AD0     		beq	.L66
 1175              		.loc 1 491 0 is_stmt 0 discriminator 1
 1176 0016 7A68     		ldr	r2, [r7, #4]
 1177 0018 174B     		ldr	r3, .L70+4
 1178 001a 9A42     		cmp	r2, r3
 1179 001c 06D0     		beq	.L66
 1180 001e 174A     		ldr	r2, .L70+8
 1181 0020 EC23     		mov	r3, #236
 1182 0022 FF33     		add	r3, r3, #255
 1183 0024 101C     		mov	r0, r2
 1184 0026 191C     		mov	r1, r3
 1185 0028 FFF7FEFF 		bl	assert_failed
 1186              	.L66:
 492:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1187              		.loc 1 492 0 is_stmt 1
 1188 002c FB1C     		add	r3, r7, #3
 1189 002e 1B78     		ldrb	r3, [r3]
 1190 0030 002B     		cmp	r3, #0
 1191 0032 0AD0     		beq	.L67
 1192              		.loc 1 492 0 is_stmt 0 discriminator 1
 1193 0034 FB1C     		add	r3, r7, #3
 1194 0036 1B78     		ldrb	r3, [r3]
 1195 0038 012B     		cmp	r3, #1
 1196 003a 06D0     		beq	.L67
 1197 003c 0F4A     		ldr	r2, .L70+8
 1198 003e F623     		mov	r3, #246
 1199 0040 5B00     		lsl	r3, r3, #1
 1200 0042 101C     		mov	r0, r2
 1201 0044 191C     		mov	r1, r3
 1202 0046 FFF7FEFF 		bl	assert_failed
 1203              	.L67:
 493:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 494:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1204              		.loc 1 494 0 is_stmt 1
 1205 004a FB1C     		add	r3, r7, #3
 1206 004c 1B78     		ldrb	r3, [r3]
 1207 004e 002B     		cmp	r3, #0
 1208 0050 07D0     		beq	.L68
 495:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 496:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the most significant bit first transmitted/received following the 
 497:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        start bit by setting the MSBFIRST bit in the CR2 register */
 498:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_MSBFIRST;
 1209              		.loc 1 498 0
 1210 0052 7B68     		ldr	r3, [r7, #4]
 1211 0054 5B68     		ldr	r3, [r3, #4]
 1212 0056 8022     		mov	r2, #128
 1213 0058 1203     		lsl	r2, r2, #12
 1214 005a 1A43     		orr	r2, r3
 1215 005c 7B68     		ldr	r3, [r7, #4]
 1216 005e 5A60     		str	r2, [r3, #4]
 1217 0060 05E0     		b	.L65
 1218              	.L68:
 499:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 500:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 501:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 502:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the most significant bit first transmitted/received following the 
 503:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        start bit by clearing the MSBFIRST bit in the CR2 register */
 504:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 1219              		.loc 1 504 0
 1220 0062 7B68     		ldr	r3, [r7, #4]
 1221 0064 5A68     		ldr	r2, [r3, #4]
 1222 0066 064B     		ldr	r3, .L70+12
 1223 0068 1A40     		and	r2, r3
 1224 006a 7B68     		ldr	r3, [r7, #4]
 1225 006c 5A60     		str	r2, [r3, #4]
 1226              	.L65:
 505:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 506:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1227              		.loc 1 506 0
 1228 006e BD46     		mov	sp, r7
 1229 0070 02B0     		add	sp, sp, #8
 1230              		@ sp needed
 1231 0072 80BD     		pop	{r7, pc}
 1232              	.L71:
 1233              		.align	2
 1234              	.L70:
 1235 0074 00380140 		.word	1073821696
 1236 0078 00440040 		.word	1073759232
 1237 007c 00000000 		.word	.LC0
 1238 0080 FFFFF7FF 		.word	-524289
 1239              		.cfi_endproc
 1240              	.LFE41:
 1242              		.section	.text.USART_DataInvCmd,"ax",%progbits
 1243              		.align	2
 1244              		.global	USART_DataInvCmd
 1245              		.code	16
 1246              		.thumb_func
 1248              	USART_DataInvCmd:
 1249              	.LFB42:
 507:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 508:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 509:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the binary data inversion.
 510:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 511:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param NewState: new defined levels for the USART data.
 512:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 513:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   - ENABLE: Logical data from the data register are send/received in negative
 514:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *             logic. (1=L, 0=H). The parity bit is also inverted.
 515:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   - DISABLE: Logical data from the data register are send/received in positive
 516:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *              logic. (1=H, 0=L) 
 517:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 518:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.  
 519:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 520:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 521:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 522:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1250              		.loc 1 522 0
 1251              		.cfi_startproc
 1252 0000 80B5     		push	{r7, lr}
 1253              		.cfi_def_cfa_offset 8
 1254              		.cfi_offset 7, -8
 1255              		.cfi_offset 14, -4
 1256 0002 82B0     		sub	sp, sp, #8
 1257              		.cfi_def_cfa_offset 16
 1258 0004 00AF     		add	r7, sp, #0
 1259              		.cfi_def_cfa_register 7
 1260 0006 7860     		str	r0, [r7, #4]
 1261 0008 0A1C     		mov	r2, r1
 1262 000a FB1C     		add	r3, r7, #3
 1263 000c 1A70     		strb	r2, [r3]
 523:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 524:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1264              		.loc 1 524 0
 1265 000e 7A68     		ldr	r2, [r7, #4]
 1266 0010 184B     		ldr	r3, .L77
 1267 0012 9A42     		cmp	r2, r3
 1268 0014 0AD0     		beq	.L73
 1269              		.loc 1 524 0 is_stmt 0 discriminator 1
 1270 0016 7A68     		ldr	r2, [r7, #4]
 1271 0018 174B     		ldr	r3, .L77+4
 1272 001a 9A42     		cmp	r2, r3
 1273 001c 06D0     		beq	.L73
 1274 001e 174A     		ldr	r2, .L77+8
 1275 0020 8323     		mov	r3, #131
 1276 0022 9B00     		lsl	r3, r3, #2
 1277 0024 101C     		mov	r0, r2
 1278 0026 191C     		mov	r1, r3
 1279 0028 FFF7FEFF 		bl	assert_failed
 1280              	.L73:
 525:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1281              		.loc 1 525 0 is_stmt 1
 1282 002c FB1C     		add	r3, r7, #3
 1283 002e 1B78     		ldrb	r3, [r3]
 1284 0030 002B     		cmp	r3, #0
 1285 0032 09D0     		beq	.L74
 1286              		.loc 1 525 0 is_stmt 0 discriminator 1
 1287 0034 FB1C     		add	r3, r7, #3
 1288 0036 1B78     		ldrb	r3, [r3]
 1289 0038 012B     		cmp	r3, #1
 1290 003a 05D0     		beq	.L74
 1291 003c 0F4A     		ldr	r2, .L77+8
 1292 003e 104B     		ldr	r3, .L77+12
 1293 0040 101C     		mov	r0, r2
 1294 0042 191C     		mov	r1, r3
 1295 0044 FFF7FEFF 		bl	assert_failed
 1296              	.L74:
 526:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 527:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1297              		.loc 1 527 0 is_stmt 1
 1298 0048 FB1C     		add	r3, r7, #3
 1299 004a 1B78     		ldrb	r3, [r3]
 1300 004c 002B     		cmp	r3, #0
 1301 004e 07D0     		beq	.L75
 528:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 529:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the binary data inversion feature by setting the DATAINV bit in 
 530:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        the CR2 register */
 531:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_DATAINV;
 1302              		.loc 1 531 0
 1303 0050 7B68     		ldr	r3, [r7, #4]
 1304 0052 5B68     		ldr	r3, [r3, #4]
 1305 0054 8022     		mov	r2, #128
 1306 0056 D202     		lsl	r2, r2, #11
 1307 0058 1A43     		orr	r2, r3
 1308 005a 7B68     		ldr	r3, [r7, #4]
 1309 005c 5A60     		str	r2, [r3, #4]
 1310 005e 05E0     		b	.L72
 1311              	.L75:
 532:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 533:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 534:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 535:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the binary data inversion feature by clearing the DATAINV bit in 
 536:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        the CR2 register */
 537:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 1312              		.loc 1 537 0
 1313 0060 7B68     		ldr	r3, [r7, #4]
 1314 0062 5A68     		ldr	r2, [r3, #4]
 1315 0064 074B     		ldr	r3, .L77+16
 1316 0066 1A40     		and	r2, r3
 1317 0068 7B68     		ldr	r3, [r7, #4]
 1318 006a 5A60     		str	r2, [r3, #4]
 1319              	.L72:
 538:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 539:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1320              		.loc 1 539 0
 1321 006c BD46     		mov	sp, r7
 1322 006e 02B0     		add	sp, sp, #8
 1323              		@ sp needed
 1324 0070 80BD     		pop	{r7, pc}
 1325              	.L78:
 1326 0072 C046     		.align	2
 1327              	.L77:
 1328 0074 00380140 		.word	1073821696
 1329 0078 00440040 		.word	1073759232
 1330 007c 00000000 		.word	.LC0
 1331 0080 0D020000 		.word	525
 1332 0084 FFFFFBFF 		.word	-262145
 1333              		.cfi_endproc
 1334              	.LFE42:
 1336              		.section	.text.USART_InvPinCmd,"ax",%progbits
 1337              		.align	2
 1338              		.global	USART_InvPinCmd
 1339              		.code	16
 1340              		.thumb_func
 1342              	USART_InvPinCmd:
 1343              	.LFB43:
 540:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 541:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 542:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the Pin(s) active level inversion.
 543:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 544:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_InvPin: specifies the USART pin(s) to invert.
 545:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
 546:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_InvPin_Tx: USART Tx pin active level inversion.
 547:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_InvPin_Rx: USART Rx pin active level inversion.
 548:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param NewState: new active level status for the USART pin(s).
 549:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 550:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   - ENABLE: pin(s) signal values are inverted (Vdd =0, Gnd =1).
 551:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   - DISABLE: pin(s) signal works using the standard logic levels (Vdd =1, Gnd =0).
 552:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 553:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.  
 554:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 555:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 556:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
 557:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1344              		.loc 1 557 0
 1345              		.cfi_startproc
 1346 0000 80B5     		push	{r7, lr}
 1347              		.cfi_def_cfa_offset 8
 1348              		.cfi_offset 7, -8
 1349              		.cfi_offset 14, -4
 1350 0002 84B0     		sub	sp, sp, #16
 1351              		.cfi_def_cfa_offset 24
 1352 0004 00AF     		add	r7, sp, #0
 1353              		.cfi_def_cfa_register 7
 1354 0006 F860     		str	r0, [r7, #12]
 1355 0008 B960     		str	r1, [r7, #8]
 1356 000a FB1D     		add	r3, r7, #7
 1357 000c 1A70     		strb	r2, [r3]
 558:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 559:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1358              		.loc 1 559 0
 1359 000e FA68     		ldr	r2, [r7, #12]
 1360 0010 1E4B     		ldr	r3, .L86
 1361 0012 9A42     		cmp	r2, r3
 1362 0014 09D0     		beq	.L80
 1363              		.loc 1 559 0 is_stmt 0 discriminator 1
 1364 0016 FA68     		ldr	r2, [r7, #12]
 1365 0018 1D4B     		ldr	r3, .L86+4
 1366 001a 9A42     		cmp	r2, r3
 1367 001c 05D0     		beq	.L80
 1368 001e 1D4A     		ldr	r2, .L86+8
 1369 0020 1D4B     		ldr	r3, .L86+12
 1370 0022 101C     		mov	r0, r2
 1371 0024 191C     		mov	r1, r3
 1372 0026 FFF7FEFF 		bl	assert_failed
 1373              	.L80:
 560:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));  
 1374              		.loc 1 560 0 is_stmt 1
 1375 002a BA68     		ldr	r2, [r7, #8]
 1376 002c 1B4B     		ldr	r3, .L86+16
 1377 002e 1340     		and	r3, r2
 1378 0030 02D1     		bne	.L81
 1379              		.loc 1 560 0 is_stmt 0 discriminator 2
 1380 0032 BB68     		ldr	r3, [r7, #8]
 1381 0034 002B     		cmp	r3, #0
 1382 0036 06D1     		bne	.L82
 1383              	.L81:
 1384              		.loc 1 560 0 discriminator 1
 1385 0038 164A     		ldr	r2, .L86+8
 1386 003a 8C23     		mov	r3, #140
 1387 003c 9B00     		lsl	r3, r3, #2
 1388 003e 101C     		mov	r0, r2
 1389 0040 191C     		mov	r1, r3
 1390 0042 FFF7FEFF 		bl	assert_failed
 1391              	.L82:
 561:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 1392              		.loc 1 561 0 is_stmt 1
 1393 0046 FB1D     		add	r3, r7, #7
 1394 0048 1B78     		ldrb	r3, [r3]
 1395 004a 002B     		cmp	r3, #0
 1396 004c 09D0     		beq	.L83
 1397              		.loc 1 561 0 is_stmt 0 discriminator 1
 1398 004e FB1D     		add	r3, r7, #7
 1399 0050 1B78     		ldrb	r3, [r3]
 1400 0052 012B     		cmp	r3, #1
 1401 0054 05D0     		beq	.L83
 1402 0056 0F4A     		ldr	r2, .L86+8
 1403 0058 114B     		ldr	r3, .L86+20
 1404 005a 101C     		mov	r0, r2
 1405 005c 191C     		mov	r1, r3
 1406 005e FFF7FEFF 		bl	assert_failed
 1407              	.L83:
 562:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 563:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1408              		.loc 1 563 0 is_stmt 1
 1409 0062 FB1D     		add	r3, r7, #7
 1410 0064 1B78     		ldrb	r3, [r3]
 1411 0066 002B     		cmp	r3, #0
 1412 0068 06D0     		beq	.L84
 564:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 565:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the active level inversion for selected pins by setting the TXINV 
 566:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        and/or RXINV bits in the USART CR2 register */
 567:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_InvPin;
 1413              		.loc 1 567 0
 1414 006a FB68     		ldr	r3, [r7, #12]
 1415 006c 5A68     		ldr	r2, [r3, #4]
 1416 006e BB68     		ldr	r3, [r7, #8]
 1417 0070 1A43     		orr	r2, r3
 1418 0072 FB68     		ldr	r3, [r7, #12]
 1419 0074 5A60     		str	r2, [r3, #4]
 1420 0076 06E0     		b	.L79
 1421              	.L84:
 568:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 569:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 570:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 571:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the active level inversion for selected requests by clearing the 
 572:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        TXINV and/or RXINV bits in the USART CR2 register */
 573:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~USART_InvPin;
 1422              		.loc 1 573 0
 1423 0078 FB68     		ldr	r3, [r7, #12]
 1424 007a 5B68     		ldr	r3, [r3, #4]
 1425 007c BA68     		ldr	r2, [r7, #8]
 1426 007e D243     		mvn	r2, r2
 1427 0080 1A40     		and	r2, r3
 1428 0082 FB68     		ldr	r3, [r7, #12]
 1429 0084 5A60     		str	r2, [r3, #4]
 1430              	.L79:
 574:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 575:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1431              		.loc 1 575 0
 1432 0086 BD46     		mov	sp, r7
 1433 0088 04B0     		add	sp, sp, #16
 1434              		@ sp needed
 1435 008a 80BD     		pop	{r7, pc}
 1436              	.L87:
 1437              		.align	2
 1438              	.L86:
 1439 008c 00380140 		.word	1073821696
 1440 0090 00440040 		.word	1073759232
 1441 0094 00000000 		.word	.LC0
 1442 0098 2F020000 		.word	559
 1443 009c FFFFFCFF 		.word	-196609
 1444 00a0 31020000 		.word	561
 1445              		.cfi_endproc
 1446              	.LFE43:
 1448              		.section	.text.USART_SWAPPinCmd,"ax",%progbits
 1449              		.align	2
 1450              		.global	USART_SWAPPinCmd
 1451              		.code	16
 1452              		.thumb_func
 1454              	USART_SWAPPinCmd:
 1455              	.LFB44:
 576:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 577:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 578:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the swap Tx/Rx pins.
 579:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 580:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param NewState: new state of the USARTx TX/RX pins pinout.
 581:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 582:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   - ENABLE: The TX and RX pins functions are swapped.
 583:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   - DISABLE: TX/RX pins are used as defined in standard pinout
 584:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 585:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.  
 586:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 587:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 588:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 589:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1456              		.loc 1 589 0
 1457              		.cfi_startproc
 1458 0000 80B5     		push	{r7, lr}
 1459              		.cfi_def_cfa_offset 8
 1460              		.cfi_offset 7, -8
 1461              		.cfi_offset 14, -4
 1462 0002 82B0     		sub	sp, sp, #8
 1463              		.cfi_def_cfa_offset 16
 1464 0004 00AF     		add	r7, sp, #0
 1465              		.cfi_def_cfa_register 7
 1466 0006 7860     		str	r0, [r7, #4]
 1467 0008 0A1C     		mov	r2, r1
 1468 000a FB1C     		add	r3, r7, #3
 1469 000c 1A70     		strb	r2, [r3]
 590:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 591:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1470              		.loc 1 591 0
 1471 000e 7A68     		ldr	r2, [r7, #4]
 1472 0010 184B     		ldr	r3, .L93
 1473 0012 9A42     		cmp	r2, r3
 1474 0014 09D0     		beq	.L89
 1475              		.loc 1 591 0 is_stmt 0 discriminator 1
 1476 0016 7A68     		ldr	r2, [r7, #4]
 1477 0018 174B     		ldr	r3, .L93+4
 1478 001a 9A42     		cmp	r2, r3
 1479 001c 05D0     		beq	.L89
 1480 001e 174A     		ldr	r2, .L93+8
 1481 0020 174B     		ldr	r3, .L93+12
 1482 0022 101C     		mov	r0, r2
 1483 0024 191C     		mov	r1, r3
 1484 0026 FFF7FEFF 		bl	assert_failed
 1485              	.L89:
 592:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1486              		.loc 1 592 0 is_stmt 1
 1487 002a FB1C     		add	r3, r7, #3
 1488 002c 1B78     		ldrb	r3, [r3]
 1489 002e 002B     		cmp	r3, #0
 1490 0030 0AD0     		beq	.L90
 1491              		.loc 1 592 0 is_stmt 0 discriminator 1
 1492 0032 FB1C     		add	r3, r7, #3
 1493 0034 1B78     		ldrb	r3, [r3]
 1494 0036 012B     		cmp	r3, #1
 1495 0038 06D0     		beq	.L90
 1496 003a 104A     		ldr	r2, .L93+8
 1497 003c 9423     		mov	r3, #148
 1498 003e 9B00     		lsl	r3, r3, #2
 1499 0040 101C     		mov	r0, r2
 1500 0042 191C     		mov	r1, r3
 1501 0044 FFF7FEFF 		bl	assert_failed
 1502              	.L90:
 593:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 594:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1503              		.loc 1 594 0 is_stmt 1
 1504 0048 FB1C     		add	r3, r7, #3
 1505 004a 1B78     		ldrb	r3, [r3]
 1506 004c 002B     		cmp	r3, #0
 1507 004e 07D0     		beq	.L91
 595:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 596:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
 597:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_SWAP;
 1508              		.loc 1 597 0
 1509 0050 7B68     		ldr	r3, [r7, #4]
 1510 0052 5B68     		ldr	r3, [r3, #4]
 1511 0054 8022     		mov	r2, #128
 1512 0056 1202     		lsl	r2, r2, #8
 1513 0058 1A43     		orr	r2, r3
 1514 005a 7B68     		ldr	r3, [r7, #4]
 1515 005c 5A60     		str	r2, [r3, #4]
 1516 005e 05E0     		b	.L88
 1517              	.L91:
 598:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 599:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 600:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 601:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
 602:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 1518              		.loc 1 602 0
 1519 0060 7B68     		ldr	r3, [r7, #4]
 1520 0062 5A68     		ldr	r2, [r3, #4]
 1521 0064 074B     		ldr	r3, .L93+16
 1522 0066 1A40     		and	r2, r3
 1523 0068 7B68     		ldr	r3, [r7, #4]
 1524 006a 5A60     		str	r2, [r3, #4]
 1525              	.L88:
 603:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 604:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1526              		.loc 1 604 0
 1527 006c BD46     		mov	sp, r7
 1528 006e 02B0     		add	sp, sp, #8
 1529              		@ sp needed
 1530 0070 80BD     		pop	{r7, pc}
 1531              	.L94:
 1532 0072 C046     		.align	2
 1533              	.L93:
 1534 0074 00380140 		.word	1073821696
 1535 0078 00440040 		.word	1073759232
 1536 007c 00000000 		.word	.LC0
 1537 0080 4F020000 		.word	591
 1538 0084 FF7FFFFF 		.word	-32769
 1539              		.cfi_endproc
 1540              	.LFE44:
 1542              		.section	.text.USART_ReceiverTimeOutCmd,"ax",%progbits
 1543              		.align	2
 1544              		.global	USART_ReceiverTimeOutCmd
 1545              		.code	16
 1546              		.thumb_func
 1548              	USART_ReceiverTimeOutCmd:
 1549              	.LFB45:
 605:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 606:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 607:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the receiver Time Out feature.
 608:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 609:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param NewState: new state of the USARTx receiver Time Out.
 610:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 611:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 612:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 613:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 614:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1550              		.loc 1 614 0
 1551              		.cfi_startproc
 1552 0000 80B5     		push	{r7, lr}
 1553              		.cfi_def_cfa_offset 8
 1554              		.cfi_offset 7, -8
 1555              		.cfi_offset 14, -4
 1556 0002 82B0     		sub	sp, sp, #8
 1557              		.cfi_def_cfa_offset 16
 1558 0004 00AF     		add	r7, sp, #0
 1559              		.cfi_def_cfa_register 7
 1560 0006 7860     		str	r0, [r7, #4]
 1561 0008 0A1C     		mov	r2, r1
 1562 000a FB1C     		add	r3, r7, #3
 1563 000c 1A70     		strb	r2, [r3]
 615:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 616:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1564              		.loc 1 616 0
 1565 000e 7A68     		ldr	r2, [r7, #4]
 1566 0010 164B     		ldr	r3, .L100
 1567 0012 9A42     		cmp	r2, r3
 1568 0014 06D0     		beq	.L96
 1569              		.loc 1 616 0 is_stmt 0 discriminator 1
 1570 0016 164A     		ldr	r2, .L100+4
 1571 0018 9A23     		mov	r3, #154
 1572 001a 9B00     		lsl	r3, r3, #2
 1573 001c 101C     		mov	r0, r2
 1574 001e 191C     		mov	r1, r3
 1575 0020 FFF7FEFF 		bl	assert_failed
 1576              	.L96:
 617:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1577              		.loc 1 617 0 is_stmt 1
 1578 0024 FB1C     		add	r3, r7, #3
 1579 0026 1B78     		ldrb	r3, [r3]
 1580 0028 002B     		cmp	r3, #0
 1581 002a 09D0     		beq	.L97
 1582              		.loc 1 617 0 is_stmt 0 discriminator 1
 1583 002c FB1C     		add	r3, r7, #3
 1584 002e 1B78     		ldrb	r3, [r3]
 1585 0030 012B     		cmp	r3, #1
 1586 0032 05D0     		beq	.L97
 1587 0034 0E4A     		ldr	r2, .L100+4
 1588 0036 0F4B     		ldr	r3, .L100+8
 1589 0038 101C     		mov	r0, r2
 1590 003a 191C     		mov	r1, r3
 1591 003c FFF7FEFF 		bl	assert_failed
 1592              	.L97:
 618:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 619:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1593              		.loc 1 619 0 is_stmt 1
 1594 0040 FB1C     		add	r3, r7, #3
 1595 0042 1B78     		ldrb	r3, [r3]
 1596 0044 002B     		cmp	r3, #0
 1597 0046 07D0     		beq	.L98
 620:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 621:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
 622:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 623:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_RTOEN;
 1598              		.loc 1 623 0
 1599 0048 7B68     		ldr	r3, [r7, #4]
 1600 004a 5B68     		ldr	r3, [r3, #4]
 1601 004c 8022     		mov	r2, #128
 1602 004e 1204     		lsl	r2, r2, #16
 1603 0050 1A43     		orr	r2, r3
 1604 0052 7B68     		ldr	r3, [r7, #4]
 1605 0054 5A60     		str	r2, [r3, #4]
 1606 0056 05E0     		b	.L95
 1607              	.L98:
 624:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 625:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 626:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 627:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
 628:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 629:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 1608              		.loc 1 629 0
 1609 0058 7B68     		ldr	r3, [r7, #4]
 1610 005a 5A68     		ldr	r2, [r3, #4]
 1611 005c 064B     		ldr	r3, .L100+12
 1612 005e 1A40     		and	r2, r3
 1613 0060 7B68     		ldr	r3, [r7, #4]
 1614 0062 5A60     		str	r2, [r3, #4]
 1615              	.L95:
 630:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 631:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1616              		.loc 1 631 0
 1617 0064 BD46     		mov	sp, r7
 1618 0066 02B0     		add	sp, sp, #8
 1619              		@ sp needed
 1620 0068 80BD     		pop	{r7, pc}
 1621              	.L101:
 1622 006a C046     		.align	2
 1623              	.L100:
 1624 006c 00380140 		.word	1073821696
 1625 0070 00000000 		.word	.LC0
 1626 0074 69020000 		.word	617
 1627 0078 FFFF7FFF 		.word	-8388609
 1628              		.cfi_endproc
 1629              	.LFE45:
 1631              		.section	.text.USART_SetReceiverTimeOut,"ax",%progbits
 1632              		.align	2
 1633              		.global	USART_SetReceiverTimeOut
 1634              		.code	16
 1635              		.thumb_func
 1637              	USART_SetReceiverTimeOut:
 1638              	.LFB46:
 632:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 633:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 634:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the receiver Time Out value.
 635:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 636:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_ReceiverTimeOut: specifies the Receiver Time Out value.
 637:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 638:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 639:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut)
 640:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 1639              		.loc 1 640 0
 1640              		.cfi_startproc
 1641 0000 80B5     		push	{r7, lr}
 1642              		.cfi_def_cfa_offset 8
 1643              		.cfi_offset 7, -8
 1644              		.cfi_offset 14, -4
 1645 0002 82B0     		sub	sp, sp, #8
 1646              		.cfi_def_cfa_offset 16
 1647 0004 00AF     		add	r7, sp, #0
 1648              		.cfi_def_cfa_register 7
 1649 0006 7860     		str	r0, [r7, #4]
 1650 0008 3960     		str	r1, [r7]
 641:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 642:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1651              		.loc 1 642 0
 1652 000a 7A68     		ldr	r2, [r7, #4]
 1653 000c 104B     		ldr	r3, .L105
 1654 000e 9A42     		cmp	r2, r3
 1655 0010 05D0     		beq	.L103
 1656              		.loc 1 642 0 is_stmt 0 discriminator 1
 1657 0012 104A     		ldr	r2, .L105+4
 1658 0014 104B     		ldr	r3, .L105+8
 1659 0016 101C     		mov	r0, r2
 1660 0018 191C     		mov	r1, r3
 1661 001a FFF7FEFF 		bl	assert_failed
 1662              	.L103:
 643:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));
 1663              		.loc 1 643 0 is_stmt 1
 1664 001e 3A68     		ldr	r2, [r7]
 1665 0020 0E4B     		ldr	r3, .L105+12
 1666 0022 9A42     		cmp	r2, r3
 1667 0024 05D9     		bls	.L104
 1668              		.loc 1 643 0 is_stmt 0 discriminator 1
 1669 0026 0B4A     		ldr	r2, .L105+4
 1670 0028 0D4B     		ldr	r3, .L105+16
 1671 002a 101C     		mov	r0, r2
 1672 002c 191C     		mov	r1, r3
 1673 002e FFF7FEFF 		bl	assert_failed
 1674              	.L104:
 644:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 645:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
 646:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****      register  */
 647:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 1675              		.loc 1 647 0 is_stmt 1
 1676 0032 7B68     		ldr	r3, [r7, #4]
 1677 0034 5B69     		ldr	r3, [r3, #20]
 1678 0036 1B0E     		lsr	r3, r3, #24
 1679 0038 1A06     		lsl	r2, r3, #24
 1680 003a 7B68     		ldr	r3, [r7, #4]
 1681 003c 5A61     		str	r2, [r3, #20]
 648:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
 649:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****      register  */
 650:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR |= USART_ReceiverTimeOut;
 1682              		.loc 1 650 0
 1683 003e 7B68     		ldr	r3, [r7, #4]
 1684 0040 5A69     		ldr	r2, [r3, #20]
 1685 0042 3B68     		ldr	r3, [r7]
 1686 0044 1A43     		orr	r2, r3
 1687 0046 7B68     		ldr	r3, [r7, #4]
 1688 0048 5A61     		str	r2, [r3, #20]
 651:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1689              		.loc 1 651 0
 1690 004a BD46     		mov	sp, r7
 1691 004c 02B0     		add	sp, sp, #8
 1692              		@ sp needed
 1693 004e 80BD     		pop	{r7, pc}
 1694              	.L106:
 1695              		.align	2
 1696              	.L105:
 1697 0050 00380140 		.word	1073821696
 1698 0054 00000000 		.word	.LC0
 1699 0058 82020000 		.word	642
 1700 005c FFFFFF00 		.word	16777215
 1701 0060 83020000 		.word	643
 1702              		.cfi_endproc
 1703              	.LFE46:
 1705              		.section	.text.USART_SetPrescaler,"ax",%progbits
 1706              		.align	2
 1707              		.global	USART_SetPrescaler
 1708              		.code	16
 1709              		.thumb_func
 1711              	USART_SetPrescaler:
 1712              	.LFB47:
 652:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 653:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 654:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the system clock prescaler.
 655:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 656:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock.
 657:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 658:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.    
 659:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 660:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 661:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 662:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** { 
 1713              		.loc 1 662 0
 1714              		.cfi_startproc
 1715 0000 80B5     		push	{r7, lr}
 1716              		.cfi_def_cfa_offset 8
 1717              		.cfi_offset 7, -8
 1718              		.cfi_offset 14, -4
 1719 0002 82B0     		sub	sp, sp, #8
 1720              		.cfi_def_cfa_offset 16
 1721 0004 00AF     		add	r7, sp, #0
 1722              		.cfi_def_cfa_register 7
 1723 0006 7860     		str	r0, [r7, #4]
 1724 0008 0A1C     		mov	r2, r1
 1725 000a FB1C     		add	r3, r7, #3
 1726 000c 1A70     		strb	r2, [r3]
 663:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 664:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1727              		.loc 1 664 0
 1728 000e 7A68     		ldr	r2, [r7, #4]
 1729 0010 0F4B     		ldr	r3, .L109
 1730 0012 9A42     		cmp	r2, r3
 1731 0014 06D0     		beq	.L108
 1732              		.loc 1 664 0 is_stmt 0 discriminator 1
 1733 0016 0F4A     		ldr	r2, .L109+4
 1734 0018 A623     		mov	r3, #166
 1735 001a 9B00     		lsl	r3, r3, #2
 1736 001c 101C     		mov	r0, r2
 1737 001e 191C     		mov	r1, r3
 1738 0020 FFF7FEFF 		bl	assert_failed
 1739              	.L108:
 665:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 666:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART prescaler */
 667:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 1740              		.loc 1 667 0 is_stmt 1
 1741 0024 7B68     		ldr	r3, [r7, #4]
 1742 0026 1B8A     		ldrh	r3, [r3, #16]
 1743 0028 9BB2     		uxth	r3, r3
 1744 002a FF22     		mov	r2, #255
 1745 002c 9343     		bic	r3, r2
 1746 002e 9AB2     		uxth	r2, r3
 1747 0030 7B68     		ldr	r3, [r7, #4]
 1748 0032 1A82     		strh	r2, [r3, #16]
 668:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART prescaler */
 669:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 1749              		.loc 1 669 0
 1750 0034 7B68     		ldr	r3, [r7, #4]
 1751 0036 1B8A     		ldrh	r3, [r3, #16]
 1752 0038 9AB2     		uxth	r2, r3
 1753 003a FB1C     		add	r3, r7, #3
 1754 003c 1B78     		ldrb	r3, [r3]
 1755 003e 9BB2     		uxth	r3, r3
 1756 0040 1343     		orr	r3, r2
 1757 0042 9AB2     		uxth	r2, r3
 1758 0044 7B68     		ldr	r3, [r7, #4]
 1759 0046 1A82     		strh	r2, [r3, #16]
 670:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1760              		.loc 1 670 0
 1761 0048 BD46     		mov	sp, r7
 1762 004a 02B0     		add	sp, sp, #8
 1763              		@ sp needed
 1764 004c 80BD     		pop	{r7, pc}
 1765              	.L110:
 1766 004e C046     		.align	2
 1767              	.L109:
 1768 0050 00380140 		.word	1073821696
 1769 0054 00000000 		.word	.LC0
 1770              		.cfi_endproc
 1771              	.LFE47:
 1773              		.section	.text.USART_STOPModeCmd,"ax",%progbits
 1774              		.align	2
 1775              		.global	USART_STOPModeCmd
 1776              		.code	16
 1777              		.thumb_func
 1779              	USART_STOPModeCmd:
 1780              	.LFB48:
 671:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 672:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 673:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 674:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 675:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 676:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 677:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group2 STOP Mode functions
 678:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   STOP Mode functions
 679:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 680:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim
 681:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 682:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                         ##### STOP Mode functions #####
 683:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 684:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 685:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          WakeUp from STOP mode.
 686:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 687:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART is able to WakeUp from Stop Mode if USART clock is set to HSI
 688:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          or LSI.
 689:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 690:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The WakeUp source is configured by calling USART_StopModeWakeUpSourceConfig()
 691:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          function.
 692:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 693:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] After configuring the source of WakeUp and before entering in Stop Mode 
 694:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          USART_STOPModeCmd() function should be called to allow USART WakeUp.
 695:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                            
 696:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 697:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 698:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 699:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 700:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 701:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral in STOP Mode.
 702:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 703:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral state in stop mode.
 704:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 705:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 706:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called when USART clock is set to HSI or LSE. 
 707:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 708:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 709:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 710:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1781              		.loc 1 710 0
 1782              		.cfi_startproc
 1783 0000 80B5     		push	{r7, lr}
 1784              		.cfi_def_cfa_offset 8
 1785              		.cfi_offset 7, -8
 1786              		.cfi_offset 14, -4
 1787 0002 82B0     		sub	sp, sp, #8
 1788              		.cfi_def_cfa_offset 16
 1789 0004 00AF     		add	r7, sp, #0
 1790              		.cfi_def_cfa_register 7
 1791 0006 7860     		str	r0, [r7, #4]
 1792 0008 0A1C     		mov	r2, r1
 1793 000a FB1C     		add	r3, r7, #3
 1794 000c 1A70     		strb	r2, [r3]
 711:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 712:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1795              		.loc 1 712 0
 1796 000e 7A68     		ldr	r2, [r7, #4]
 1797 0010 164B     		ldr	r3, .L116
 1798 0012 9A42     		cmp	r2, r3
 1799 0014 06D0     		beq	.L112
 1800              		.loc 1 712 0 is_stmt 0 discriminator 1
 1801 0016 164A     		ldr	r2, .L116+4
 1802 0018 B223     		mov	r3, #178
 1803 001a 9B00     		lsl	r3, r3, #2
 1804 001c 101C     		mov	r0, r2
 1805 001e 191C     		mov	r1, r3
 1806 0020 FFF7FEFF 		bl	assert_failed
 1807              	.L112:
 713:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1808              		.loc 1 713 0 is_stmt 1
 1809 0024 FB1C     		add	r3, r7, #3
 1810 0026 1B78     		ldrb	r3, [r3]
 1811 0028 002B     		cmp	r3, #0
 1812 002a 09D0     		beq	.L113
 1813              		.loc 1 713 0 is_stmt 0 discriminator 1
 1814 002c FB1C     		add	r3, r7, #3
 1815 002e 1B78     		ldrb	r3, [r3]
 1816 0030 012B     		cmp	r3, #1
 1817 0032 05D0     		beq	.L113
 1818 0034 0E4A     		ldr	r2, .L116+4
 1819 0036 0F4B     		ldr	r3, .L116+8
 1820 0038 101C     		mov	r0, r2
 1821 003a 191C     		mov	r1, r3
 1822 003c FFF7FEFF 		bl	assert_failed
 1823              	.L113:
 714:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 715:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1824              		.loc 1 715 0 is_stmt 1
 1825 0040 FB1C     		add	r3, r7, #3
 1826 0042 1B78     		ldrb	r3, [r3]
 1827 0044 002B     		cmp	r3, #0
 1828 0046 06D0     		beq	.L114
 716:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 717:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
 718:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 719:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_UESM;
 1829              		.loc 1 719 0
 1830 0048 7B68     		ldr	r3, [r7, #4]
 1831 004a 1B68     		ldr	r3, [r3]
 1832 004c 0222     		mov	r2, #2
 1833 004e 1A43     		orr	r2, r3
 1834 0050 7B68     		ldr	r3, [r7, #4]
 1835 0052 1A60     		str	r2, [r3]
 1836 0054 07E0     		b	.L111
 1837              	.L114:
 720:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 721:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 722:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 723:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
 724:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 725:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 1838              		.loc 1 725 0
 1839 0056 7B68     		ldr	r3, [r7, #4]
 1840 0058 1B68     		ldr	r3, [r3]
 1841 005a 0222     		mov	r2, #2
 1842 005c 191C     		mov	r1, r3
 1843 005e 9143     		bic	r1, r2
 1844 0060 0A1C     		mov	r2, r1
 1845 0062 7B68     		ldr	r3, [r7, #4]
 1846 0064 1A60     		str	r2, [r3]
 1847              	.L111:
 726:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 727:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1848              		.loc 1 727 0
 1849 0066 BD46     		mov	sp, r7
 1850 0068 02B0     		add	sp, sp, #8
 1851              		@ sp needed
 1852 006a 80BD     		pop	{r7, pc}
 1853              	.L117:
 1854              		.align	2
 1855              	.L116:
 1856 006c 00380140 		.word	1073821696
 1857 0070 00000000 		.word	.LC0
 1858 0074 C9020000 		.word	713
 1859              		.cfi_endproc
 1860              	.LFE48:
 1862              		.section	.text.USART_StopModeWakeUpSourceConfig,"ax",%progbits
 1863              		.align	2
 1864              		.global	USART_StopModeWakeUpSourceConfig
 1865              		.code	16
 1866              		.thumb_func
 1868              	USART_StopModeWakeUpSourceConfig:
 1869              	.LFB49:
 728:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 729:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 730:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Selects the USART WakeUp method form stop mode.
 731:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 732:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_WakeUp: specifies the selected USART wakeup method.
 733:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
 734:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_WakeUpSource_AddressMatch: WUF active on address match.
 735:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_WakeUpSource_StartBit: WUF active on Start bit detection.
 736:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_WakeUpSource_RXNE: WUF active on RXNE.
 737:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 738:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.   
 739:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 740:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 741:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource)
 742:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1870              		.loc 1 742 0
 1871              		.cfi_startproc
 1872 0000 80B5     		push	{r7, lr}
 1873              		.cfi_def_cfa_offset 8
 1874              		.cfi_offset 7, -8
 1875              		.cfi_offset 14, -4
 1876 0002 82B0     		sub	sp, sp, #8
 1877              		.cfi_def_cfa_offset 16
 1878 0004 00AF     		add	r7, sp, #0
 1879              		.cfi_def_cfa_register 7
 1880 0006 7860     		str	r0, [r7, #4]
 1881 0008 3960     		str	r1, [r7]
 743:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 744:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1882              		.loc 1 744 0
 1883 000a 7A68     		ldr	r2, [r7, #4]
 1884 000c 154B     		ldr	r3, .L121
 1885 000e 9A42     		cmp	r2, r3
 1886 0010 06D0     		beq	.L119
 1887              		.loc 1 744 0 is_stmt 0 discriminator 1
 1888 0012 154A     		ldr	r2, .L121+4
 1889 0014 BA23     		mov	r3, #186
 1890 0016 9B00     		lsl	r3, r3, #2
 1891 0018 101C     		mov	r0, r2
 1892 001a 191C     		mov	r1, r3
 1893 001c FFF7FEFF 		bl	assert_failed
 1894              	.L119:
 745:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));
 1895              		.loc 1 745 0 is_stmt 1
 1896 0020 3B68     		ldr	r3, [r7]
 1897 0022 002B     		cmp	r3, #0
 1898 0024 0FD0     		beq	.L120
 1899              		.loc 1 745 0 is_stmt 0 discriminator 1
 1900 0026 3A68     		ldr	r2, [r7]
 1901 0028 8023     		mov	r3, #128
 1902 002a 9B03     		lsl	r3, r3, #14
 1903 002c 9A42     		cmp	r2, r3
 1904 002e 0AD0     		beq	.L120
 1905 0030 3A68     		ldr	r2, [r7]
 1906 0032 C023     		mov	r3, #192
 1907 0034 9B03     		lsl	r3, r3, #14
 1908 0036 9A42     		cmp	r2, r3
 1909 0038 05D0     		beq	.L120
 1910 003a 0B4A     		ldr	r2, .L121+4
 1911 003c 0B4B     		ldr	r3, .L121+8
 1912 003e 101C     		mov	r0, r2
 1913 0040 191C     		mov	r1, r3
 1914 0042 FFF7FEFF 		bl	assert_failed
 1915              	.L120:
 746:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 747:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 1916              		.loc 1 747 0 is_stmt 1
 1917 0046 7B68     		ldr	r3, [r7, #4]
 1918 0048 9A68     		ldr	r2, [r3, #8]
 1919 004a 094B     		ldr	r3, .L121+12
 1920 004c 1A40     		and	r2, r3
 1921 004e 7B68     		ldr	r3, [r7, #4]
 1922 0050 9A60     		str	r2, [r3, #8]
 748:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_WakeUpSource;
 1923              		.loc 1 748 0
 1924 0052 7B68     		ldr	r3, [r7, #4]
 1925 0054 9A68     		ldr	r2, [r3, #8]
 1926 0056 3B68     		ldr	r3, [r7]
 1927 0058 1A43     		orr	r2, r3
 1928 005a 7B68     		ldr	r3, [r7, #4]
 1929 005c 9A60     		str	r2, [r3, #8]
 749:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1930              		.loc 1 749 0
 1931 005e BD46     		mov	sp, r7
 1932 0060 02B0     		add	sp, sp, #8
 1933              		@ sp needed
 1934 0062 80BD     		pop	{r7, pc}
 1935              	.L122:
 1936              		.align	2
 1937              	.L121:
 1938 0064 00380140 		.word	1073821696
 1939 0068 00000000 		.word	.LC0
 1940 006c E9020000 		.word	745
 1941 0070 FFFFCFFF 		.word	-3145729
 1942              		.cfi_endproc
 1943              	.LFE49:
 1945              		.section	.text.USART_AutoBaudRateCmd,"ax",%progbits
 1946              		.align	2
 1947              		.global	USART_AutoBaudRateCmd
 1948              		.code	16
 1949              		.thumb_func
 1951              	USART_AutoBaudRateCmd:
 1952              	.LFB50:
 750:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 751:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 752:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 753:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 754:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 755:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 756:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group3 AutoBaudRate functions
 757:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   AutoBaudRate functions 
 758:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 759:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim
 760:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 761:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        ##### AutoBaudRate functions #####
 762:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 763:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 764:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the AutoBaudRate detections.
 765:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 766:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] Before Enabling AutoBaudRate detection using USART_AutoBaudRateCmd ()
 767:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          The character patterns used to calculate baudrate must be chosen by calling 
 768:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          USART_AutoBaudRateConfig() function. These function take as parameter :
 769:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#)USART_AutoBaudRate_StartBit : any character starting with a bit 1.
 770:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#)USART_AutoBaudRate_FallingEdge : any character starting with a 10xx bit pattern. 
 771:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                           
 772:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] At any later time, another request for AutoBaudRate detection can be performed
 773:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          using USART_AutoBaudRateNewRequest() function.
 774:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 775:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The AutoBaudRate detection is monitored by the status of ABRF flag which indicate
 776:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          that the AutoBaudRate detection is completed. In addition to ABRF flag, the ABRE flag
 777:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          indicate that this procedure is completed without success. USART_GetFlagStatus () 
 778:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          function should be used to monitor the status of these flags.  
 779:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              
 780:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 781:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 782:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 783:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 784:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 785:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the Auto Baud Rate.
 786:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 787:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param NewState: new state of the USARTx auto baud rate.
 788:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 789:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 790:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 791:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 792:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1953              		.loc 1 792 0
 1954              		.cfi_startproc
 1955 0000 80B5     		push	{r7, lr}
 1956              		.cfi_def_cfa_offset 8
 1957              		.cfi_offset 7, -8
 1958              		.cfi_offset 14, -4
 1959 0002 82B0     		sub	sp, sp, #8
 1960              		.cfi_def_cfa_offset 16
 1961 0004 00AF     		add	r7, sp, #0
 1962              		.cfi_def_cfa_register 7
 1963 0006 7860     		str	r0, [r7, #4]
 1964 0008 0A1C     		mov	r2, r1
 1965 000a FB1C     		add	r3, r7, #3
 1966 000c 1A70     		strb	r2, [r3]
 793:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 794:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1967              		.loc 1 794 0
 1968 000e 7A68     		ldr	r2, [r7, #4]
 1969 0010 154B     		ldr	r3, .L128
 1970 0012 9A42     		cmp	r2, r3
 1971 0014 05D0     		beq	.L124
 1972              		.loc 1 794 0 is_stmt 0 discriminator 1
 1973 0016 154A     		ldr	r2, .L128+4
 1974 0018 154B     		ldr	r3, .L128+8
 1975 001a 101C     		mov	r0, r2
 1976 001c 191C     		mov	r1, r3
 1977 001e FFF7FEFF 		bl	assert_failed
 1978              	.L124:
 795:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1979              		.loc 1 795 0 is_stmt 1
 1980 0022 FB1C     		add	r3, r7, #3
 1981 0024 1B78     		ldrb	r3, [r3]
 1982 0026 002B     		cmp	r3, #0
 1983 0028 09D0     		beq	.L125
 1984              		.loc 1 795 0 is_stmt 0 discriminator 1
 1985 002a FB1C     		add	r3, r7, #3
 1986 002c 1B78     		ldrb	r3, [r3]
 1987 002e 012B     		cmp	r3, #1
 1988 0030 05D0     		beq	.L125
 1989 0032 0E4A     		ldr	r2, .L128+4
 1990 0034 0F4B     		ldr	r3, .L128+12
 1991 0036 101C     		mov	r0, r2
 1992 0038 191C     		mov	r1, r3
 1993 003a FFF7FEFF 		bl	assert_failed
 1994              	.L125:
 796:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 797:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1995              		.loc 1 797 0 is_stmt 1
 1996 003e FB1C     		add	r3, r7, #3
 1997 0040 1B78     		ldrb	r3, [r3]
 1998 0042 002B     		cmp	r3, #0
 1999 0044 07D0     		beq	.L126
 798:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 799:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
 800:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 801:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_ABREN;
 2000              		.loc 1 801 0
 2001 0046 7B68     		ldr	r3, [r7, #4]
 2002 0048 5B68     		ldr	r3, [r3, #4]
 2003 004a 8022     		mov	r2, #128
 2004 004c 5203     		lsl	r2, r2, #13
 2005 004e 1A43     		orr	r2, r3
 2006 0050 7B68     		ldr	r3, [r7, #4]
 2007 0052 5A60     		str	r2, [r3, #4]
 2008 0054 05E0     		b	.L123
 2009              	.L126:
 802:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 803:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 804:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 805:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
 806:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 807:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 2010              		.loc 1 807 0
 2011 0056 7B68     		ldr	r3, [r7, #4]
 2012 0058 5A68     		ldr	r2, [r3, #4]
 2013 005a 074B     		ldr	r3, .L128+16
 2014 005c 1A40     		and	r2, r3
 2015 005e 7B68     		ldr	r3, [r7, #4]
 2016 0060 5A60     		str	r2, [r3, #4]
 2017              	.L123:
 808:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 809:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2018              		.loc 1 809 0
 2019 0062 BD46     		mov	sp, r7
 2020 0064 02B0     		add	sp, sp, #8
 2021              		@ sp needed
 2022 0066 80BD     		pop	{r7, pc}
 2023              	.L129:
 2024              		.align	2
 2025              	.L128:
 2026 0068 00380140 		.word	1073821696
 2027 006c 00000000 		.word	.LC0
 2028 0070 1A030000 		.word	794
 2029 0074 1B030000 		.word	795
 2030 0078 FFFFEFFF 		.word	-1048577
 2031              		.cfi_endproc
 2032              	.LFE50:
 2034              		.section	.text.USART_AutoBaudRateConfig,"ax",%progbits
 2035              		.align	2
 2036              		.global	USART_AutoBaudRateConfig
 2037              		.code	16
 2038              		.thumb_func
 2040              	USART_AutoBaudRateConfig:
 2041              	.LFB51:
 810:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 811:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 812:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Selects the USART auto baud rate method.
 813:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 814:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_AutoBaudRate: specifies the selected USART auto baud rate method.
 815:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
 816:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_AutoBaudRate_StartBit: Start Bit duration measurement.
 817:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_AutoBaudRate_FallingEdge: Falling edge to falling edge measurement.
 818:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 819:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.  
 820:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 821:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 822:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate)
 823:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2042              		.loc 1 823 0
 2043              		.cfi_startproc
 2044 0000 80B5     		push	{r7, lr}
 2045              		.cfi_def_cfa_offset 8
 2046              		.cfi_offset 7, -8
 2047              		.cfi_offset 14, -4
 2048 0002 82B0     		sub	sp, sp, #8
 2049              		.cfi_def_cfa_offset 16
 2050 0004 00AF     		add	r7, sp, #0
 2051              		.cfi_def_cfa_register 7
 2052 0006 7860     		str	r0, [r7, #4]
 2053 0008 3960     		str	r1, [r7]
 824:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 825:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 2054              		.loc 1 825 0
 2055 000a 7A68     		ldr	r2, [r7, #4]
 2056 000c 124B     		ldr	r3, .L133
 2057 000e 9A42     		cmp	r2, r3
 2058 0010 05D0     		beq	.L131
 2059              		.loc 1 825 0 is_stmt 0 discriminator 1
 2060 0012 124A     		ldr	r2, .L133+4
 2061 0014 124B     		ldr	r3, .L133+8
 2062 0016 101C     		mov	r0, r2
 2063 0018 191C     		mov	r1, r3
 2064 001a FFF7FEFF 		bl	assert_failed
 2065              	.L131:
 826:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));
 2066              		.loc 1 826 0 is_stmt 1
 2067 001e 3B68     		ldr	r3, [r7]
 2068 0020 002B     		cmp	r3, #0
 2069 0022 0AD0     		beq	.L132
 2070              		.loc 1 826 0 is_stmt 0 discriminator 1
 2071 0024 3A68     		ldr	r2, [r7]
 2072 0026 8023     		mov	r3, #128
 2073 0028 9B03     		lsl	r3, r3, #14
 2074 002a 9A42     		cmp	r2, r3
 2075 002c 05D0     		beq	.L132
 2076 002e 0B4A     		ldr	r2, .L133+4
 2077 0030 0C4B     		ldr	r3, .L133+12
 2078 0032 101C     		mov	r0, r2
 2079 0034 191C     		mov	r1, r3
 2080 0036 FFF7FEFF 		bl	assert_failed
 2081              	.L132:
 827:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 828:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 2082              		.loc 1 828 0 is_stmt 1
 2083 003a 7B68     		ldr	r3, [r7, #4]
 2084 003c 5A68     		ldr	r2, [r3, #4]
 2085 003e 0A4B     		ldr	r3, .L133+16
 2086 0040 1A40     		and	r2, r3
 2087 0042 7B68     		ldr	r3, [r7, #4]
 2088 0044 5A60     		str	r2, [r3, #4]
 829:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_AutoBaudRate;
 2089              		.loc 1 829 0
 2090 0046 7B68     		ldr	r3, [r7, #4]
 2091 0048 5A68     		ldr	r2, [r3, #4]
 2092 004a 3B68     		ldr	r3, [r7]
 2093 004c 1A43     		orr	r2, r3
 2094 004e 7B68     		ldr	r3, [r7, #4]
 2095 0050 5A60     		str	r2, [r3, #4]
 830:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2096              		.loc 1 830 0
 2097 0052 BD46     		mov	sp, r7
 2098 0054 02B0     		add	sp, sp, #8
 2099              		@ sp needed
 2100 0056 80BD     		pop	{r7, pc}
 2101              	.L134:
 2102              		.align	2
 2103              	.L133:
 2104 0058 00380140 		.word	1073821696
 2105 005c 00000000 		.word	.LC0
 2106 0060 39030000 		.word	825
 2107 0064 3A030000 		.word	826
 2108 0068 FFFF9FFF 		.word	-6291457
 2109              		.cfi_endproc
 2110              	.LFE51:
 2112              		.section	.text.USART_AutoBaudRateNewRequest,"ax",%progbits
 2113              		.align	2
 2114              		.global	USART_AutoBaudRateNewRequest
 2115              		.code	16
 2116              		.thumb_func
 2118              	USART_AutoBaudRateNewRequest:
 2119              	.LFB52:
 831:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 832:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 833:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Requests a new AutoBaudRate detection.
 834:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 835:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 836:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 837:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AutoBaudRateNewRequest(USART_TypeDef* USARTx)
 838:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2120              		.loc 1 838 0
 2121              		.cfi_startproc
 2122 0000 80B5     		push	{r7, lr}
 2123              		.cfi_def_cfa_offset 8
 2124              		.cfi_offset 7, -8
 2125              		.cfi_offset 14, -4
 2126 0002 82B0     		sub	sp, sp, #8
 2127              		.cfi_def_cfa_offset 16
 2128 0004 00AF     		add	r7, sp, #0
 2129              		.cfi_def_cfa_register 7
 2130 0006 7860     		str	r0, [r7, #4]
 839:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 840:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2131              		.loc 1 840 0
 2132 0008 7A68     		ldr	r2, [r7, #4]
 2133 000a 0B4B     		ldr	r3, .L137
 2134 000c 9A42     		cmp	r2, r3
 2135 000e 0AD0     		beq	.L136
 2136              		.loc 1 840 0 is_stmt 0 discriminator 1
 2137 0010 7A68     		ldr	r2, [r7, #4]
 2138 0012 0A4B     		ldr	r3, .L137+4
 2139 0014 9A42     		cmp	r2, r3
 2140 0016 06D0     		beq	.L136
 2141 0018 094A     		ldr	r2, .L137+8
 2142 001a D223     		mov	r3, #210
 2143 001c 9B00     		lsl	r3, r3, #2
 2144 001e 101C     		mov	r0, r2
 2145 0020 191C     		mov	r1, r3
 2146 0022 FFF7FEFF 		bl	assert_failed
 2147              	.L136:
 841:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 842:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->ISR &= (uint32_t)~((uint32_t)USART_FLAG_ABRF);
 2148              		.loc 1 842 0 is_stmt 1
 2149 0026 7B68     		ldr	r3, [r7, #4]
 2150 0028 DA69     		ldr	r2, [r3, #28]
 2151 002a 064B     		ldr	r3, .L137+12
 2152 002c 1A40     		and	r2, r3
 2153 002e 7B68     		ldr	r3, [r7, #4]
 2154 0030 DA61     		str	r2, [r3, #28]
 843:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2155              		.loc 1 843 0
 2156 0032 BD46     		mov	sp, r7
 2157 0034 02B0     		add	sp, sp, #8
 2158              		@ sp needed
 2159 0036 80BD     		pop	{r7, pc}
 2160              	.L138:
 2161              		.align	2
 2162              	.L137:
 2163 0038 00380140 		.word	1073821696
 2164 003c 00440040 		.word	1073759232
 2165 0040 00000000 		.word	.LC0
 2166 0044 FF7FFFFF 		.word	-32769
 2167              		.cfi_endproc
 2168              	.LFE52:
 2170              		.section	.text.USART_SendData,"ax",%progbits
 2171              		.align	2
 2172              		.global	USART_SendData
 2173              		.code	16
 2174              		.thumb_func
 2176              	USART_SendData:
 2177              	.LFB53:
 844:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 845:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 846:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 847:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 848:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 849:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 850:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group4 Data transfers functions
 851:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Data transfers functions 
 852:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 853:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
 854:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 855:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                     ##### Data transfers functions #####
 856:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 857:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 858:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the USART data transfers.
 859:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] During an USART reception, data shifts in least significant bit first 
 860:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          through the RX pin. When a transmission is taking place, a write instruction to 
 861:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the USART_TDR register stores the data in the shift register.
 862:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The read access of the USART_RDR register can be done using 
 863:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the USART_ReceiveData() function and returns the RDR value.
 864:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Whereas a write access to the USART_TDR can be done using USART_SendData()
 865:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          function and stores the written data into TDR.
 866:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 867:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 868:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 869:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 870:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 871:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 872:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 873:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 874:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  Data: the data to transmit.
 875:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 876:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 877:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 878:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2178              		.loc 1 878 0
 2179              		.cfi_startproc
 2180 0000 80B5     		push	{r7, lr}
 2181              		.cfi_def_cfa_offset 8
 2182              		.cfi_offset 7, -8
 2183              		.cfi_offset 14, -4
 2184 0002 82B0     		sub	sp, sp, #8
 2185              		.cfi_def_cfa_offset 16
 2186 0004 00AF     		add	r7, sp, #0
 2187              		.cfi_def_cfa_register 7
 2188 0006 7860     		str	r0, [r7, #4]
 2189 0008 0A1C     		mov	r2, r1
 2190 000a BB1C     		add	r3, r7, #2
 2191 000c 1A80     		strh	r2, [r3]
 879:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 880:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2192              		.loc 1 880 0
 2193 000e 7A68     		ldr	r2, [r7, #4]
 2194 0010 114B     		ldr	r3, .L142
 2195 0012 9A42     		cmp	r2, r3
 2196 0014 0AD0     		beq	.L140
 2197              		.loc 1 880 0 is_stmt 0 discriminator 1
 2198 0016 7A68     		ldr	r2, [r7, #4]
 2199 0018 104B     		ldr	r3, .L142+4
 2200 001a 9A42     		cmp	r2, r3
 2201 001c 06D0     		beq	.L140
 2202 001e 104A     		ldr	r2, .L142+8
 2203 0020 DC23     		mov	r3, #220
 2204 0022 9B00     		lsl	r3, r3, #2
 2205 0024 101C     		mov	r0, r2
 2206 0026 191C     		mov	r1, r3
 2207 0028 FFF7FEFF 		bl	assert_failed
 2208              	.L140:
 881:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 2209              		.loc 1 881 0 is_stmt 1
 2210 002c BB1C     		add	r3, r7, #2
 2211 002e 1A88     		ldrh	r2, [r3]
 2212 0030 0C4B     		ldr	r3, .L142+12
 2213 0032 9A42     		cmp	r2, r3
 2214 0034 05D9     		bls	.L141
 2215              		.loc 1 881 0 is_stmt 0 discriminator 1
 2216 0036 0A4A     		ldr	r2, .L142+8
 2217 0038 0B4B     		ldr	r3, .L142+16
 2218 003a 101C     		mov	r0, r2
 2219 003c 191C     		mov	r1, r3
 2220 003e FFF7FEFF 		bl	assert_failed
 2221              	.L141:
 882:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     
 883:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Transmit Data */
 884:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->TDR = (Data & (uint16_t)0x01FF);
 2222              		.loc 1 884 0 is_stmt 1
 2223 0042 BB1C     		add	r3, r7, #2
 2224 0044 1B88     		ldrh	r3, [r3]
 2225 0046 DB05     		lsl	r3, r3, #23
 2226 0048 DB0D     		lsr	r3, r3, #23
 2227 004a 9AB2     		uxth	r2, r3
 2228 004c 7B68     		ldr	r3, [r7, #4]
 2229 004e 1A85     		strh	r2, [r3, #40]
 885:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2230              		.loc 1 885 0
 2231 0050 BD46     		mov	sp, r7
 2232 0052 02B0     		add	sp, sp, #8
 2233              		@ sp needed
 2234 0054 80BD     		pop	{r7, pc}
 2235              	.L143:
 2236 0056 C046     		.align	2
 2237              	.L142:
 2238 0058 00380140 		.word	1073821696
 2239 005c 00440040 		.word	1073759232
 2240 0060 00000000 		.word	.LC0
 2241 0064 FF010000 		.word	511
 2242 0068 71030000 		.word	881
 2243              		.cfi_endproc
 2244              	.LFE53:
 2246              		.section	.text.USART_ReceiveData,"ax",%progbits
 2247              		.align	2
 2248              		.global	USART_ReceiveData
 2249              		.code	16
 2250              		.thumb_func
 2252              	USART_ReceiveData:
 2253              	.LFB54:
 886:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 887:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 888:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 889:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 890:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval The received data.
 891:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 892:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 893:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2254              		.loc 1 893 0
 2255              		.cfi_startproc
 2256 0000 80B5     		push	{r7, lr}
 2257              		.cfi_def_cfa_offset 8
 2258              		.cfi_offset 7, -8
 2259              		.cfi_offset 14, -4
 2260 0002 82B0     		sub	sp, sp, #8
 2261              		.cfi_def_cfa_offset 16
 2262 0004 00AF     		add	r7, sp, #0
 2263              		.cfi_def_cfa_register 7
 2264 0006 7860     		str	r0, [r7, #4]
 894:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 895:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2265              		.loc 1 895 0
 2266 0008 7A68     		ldr	r2, [r7, #4]
 2267 000a 0B4B     		ldr	r3, .L147
 2268 000c 9A42     		cmp	r2, r3
 2269 000e 09D0     		beq	.L145
 2270              		.loc 1 895 0 is_stmt 0 discriminator 1
 2271 0010 7A68     		ldr	r2, [r7, #4]
 2272 0012 0A4B     		ldr	r3, .L147+4
 2273 0014 9A42     		cmp	r2, r3
 2274 0016 05D0     		beq	.L145
 2275 0018 094A     		ldr	r2, .L147+8
 2276 001a 0A4B     		ldr	r3, .L147+12
 2277 001c 101C     		mov	r0, r2
 2278 001e 191C     		mov	r1, r3
 2279 0020 FFF7FEFF 		bl	assert_failed
 2280              	.L145:
 896:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 897:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Receive Data */
 898:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 2281              		.loc 1 898 0 is_stmt 1
 2282 0024 7B68     		ldr	r3, [r7, #4]
 2283 0026 9B8C     		ldrh	r3, [r3, #36]
 2284 0028 9BB2     		uxth	r3, r3
 2285 002a DB05     		lsl	r3, r3, #23
 2286 002c DB0D     		lsr	r3, r3, #23
 2287 002e 9BB2     		uxth	r3, r3
 899:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2288              		.loc 1 899 0
 2289 0030 181C     		mov	r0, r3
 2290 0032 BD46     		mov	sp, r7
 2291 0034 02B0     		add	sp, sp, #8
 2292              		@ sp needed
 2293 0036 80BD     		pop	{r7, pc}
 2294              	.L148:
 2295              		.align	2
 2296              	.L147:
 2297 0038 00380140 		.word	1073821696
 2298 003c 00440040 		.word	1073759232
 2299 0040 00000000 		.word	.LC0
 2300 0044 7F030000 		.word	895
 2301              		.cfi_endproc
 2302              	.LFE54:
 2304              		.section	.text.USART_SetAddress,"ax",%progbits
 2305              		.align	2
 2306              		.global	USART_SetAddress
 2307              		.code	16
 2308              		.thumb_func
 2310              	USART_SetAddress:
 2311              	.LFB55:
 900:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 901:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 902:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 903:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 904:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 905:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group5 MultiProcessor Communication functions
 906:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 907:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 908:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
 909:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 910:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              ##### Multi-Processor Communication functions #####
 911:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 912:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
 913:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          multiprocessor communication.
 914:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] For instance one of the USARTs can be the master, its TX output is
 915:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          connected to the RX input of the other USART. The others are slaves,
 916:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          their respective TX outputs are logically ANDed together and connected 
 917:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          to the RX input of the master. USART multiprocessor communication is 
 918:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          possible through the following procedure:
 919:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 9 bits, Stop bits, Parity, 
 920:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
 921:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_Init() function.
 922:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the USART address using the USART_SetAddress() function.
 923:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the wake up methode (USART_WakeUp_IdleLine or 
 924:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              USART_WakeUp_AddressMark) using USART_WakeUpConfig() function only 
 925:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              for the slaves.
 926:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
 927:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() 
 928:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
 929:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART Slave exit from mute mode when receive the wake up condition.
 930:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 931:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 932:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 933:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 934:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 935:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 936:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the address of the USART node.
 937:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 938:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 939:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 940:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 941:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 942:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2312              		.loc 1 942 0
 2313              		.cfi_startproc
 2314 0000 80B5     		push	{r7, lr}
 2315              		.cfi_def_cfa_offset 8
 2316              		.cfi_offset 7, -8
 2317              		.cfi_offset 14, -4
 2318 0002 82B0     		sub	sp, sp, #8
 2319              		.cfi_def_cfa_offset 16
 2320 0004 00AF     		add	r7, sp, #0
 2321              		.cfi_def_cfa_register 7
 2322 0006 7860     		str	r0, [r7, #4]
 2323 0008 0A1C     		mov	r2, r1
 2324 000a FB1C     		add	r3, r7, #3
 2325 000c 1A70     		strb	r2, [r3]
 943:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 944:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2326              		.loc 1 944 0
 2327 000e 7A68     		ldr	r2, [r7, #4]
 2328 0010 0F4B     		ldr	r3, .L151
 2329 0012 9A42     		cmp	r2, r3
 2330 0014 0AD0     		beq	.L150
 2331              		.loc 1 944 0 is_stmt 0 discriminator 1
 2332 0016 7A68     		ldr	r2, [r7, #4]
 2333 0018 0E4B     		ldr	r3, .L151+4
 2334 001a 9A42     		cmp	r2, r3
 2335 001c 06D0     		beq	.L150
 2336 001e 0E4A     		ldr	r2, .L151+8
 2337 0020 EC23     		mov	r3, #236
 2338 0022 9B00     		lsl	r3, r3, #2
 2339 0024 101C     		mov	r0, r2
 2340 0026 191C     		mov	r1, r3
 2341 0028 FFF7FEFF 		bl	assert_failed
 2342              	.L150:
 945:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 946:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART address */
 947:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 2343              		.loc 1 947 0 is_stmt 1
 2344 002c 7B68     		ldr	r3, [r7, #4]
 2345 002e 5B68     		ldr	r3, [r3, #4]
 2346 0030 1B02     		lsl	r3, r3, #8
 2347 0032 1A0A     		lsr	r2, r3, #8
 2348 0034 7B68     		ldr	r3, [r7, #4]
 2349 0036 5A60     		str	r2, [r3, #4]
 948:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART address node */
 949:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 2350              		.loc 1 949 0
 2351 0038 7B68     		ldr	r3, [r7, #4]
 2352 003a 5A68     		ldr	r2, [r3, #4]
 2353 003c FB1C     		add	r3, r7, #3
 2354 003e 1B78     		ldrb	r3, [r3]
 2355 0040 1B06     		lsl	r3, r3, #24
 2356 0042 1A43     		orr	r2, r3
 2357 0044 7B68     		ldr	r3, [r7, #4]
 2358 0046 5A60     		str	r2, [r3, #4]
 950:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2359              		.loc 1 950 0
 2360 0048 BD46     		mov	sp, r7
 2361 004a 02B0     		add	sp, sp, #8
 2362              		@ sp needed
 2363 004c 80BD     		pop	{r7, pc}
 2364              	.L152:
 2365 004e C046     		.align	2
 2366              	.L151:
 2367 0050 00380140 		.word	1073821696
 2368 0054 00440040 		.word	1073759232
 2369 0058 00000000 		.word	.LC0
 2370              		.cfi_endproc
 2371              	.LFE55:
 2373              		.section	.text.USART_MuteModeCmd,"ax",%progbits
 2374              		.align	2
 2375              		.global	USART_MuteModeCmd
 2376              		.code	16
 2377              		.thumb_func
 2379              	USART_MuteModeCmd:
 2380              	.LFB56:
 951:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 952:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 953:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's mute mode.
 954:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 955:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 956:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 957:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 958:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 959:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 960:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2381              		.loc 1 960 0
 2382              		.cfi_startproc
 2383 0000 80B5     		push	{r7, lr}
 2384              		.cfi_def_cfa_offset 8
 2385              		.cfi_offset 7, -8
 2386              		.cfi_offset 14, -4
 2387 0002 82B0     		sub	sp, sp, #8
 2388              		.cfi_def_cfa_offset 16
 2389 0004 00AF     		add	r7, sp, #0
 2390              		.cfi_def_cfa_register 7
 2391 0006 7860     		str	r0, [r7, #4]
 2392 0008 0A1C     		mov	r2, r1
 2393 000a FB1C     		add	r3, r7, #3
 2394 000c 1A70     		strb	r2, [r3]
 961:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 962:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2395              		.loc 1 962 0
 2396 000e 7A68     		ldr	r2, [r7, #4]
 2397 0010 174B     		ldr	r3, .L158
 2398 0012 9A42     		cmp	r2, r3
 2399 0014 09D0     		beq	.L154
 2400              		.loc 1 962 0 is_stmt 0 discriminator 1
 2401 0016 7A68     		ldr	r2, [r7, #4]
 2402 0018 164B     		ldr	r3, .L158+4
 2403 001a 9A42     		cmp	r2, r3
 2404 001c 05D0     		beq	.L154
 2405 001e 164A     		ldr	r2, .L158+8
 2406 0020 164B     		ldr	r3, .L158+12
 2407 0022 101C     		mov	r0, r2
 2408 0024 191C     		mov	r1, r3
 2409 0026 FFF7FEFF 		bl	assert_failed
 2410              	.L154:
 963:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 2411              		.loc 1 963 0 is_stmt 1
 2412 002a FB1C     		add	r3, r7, #3
 2413 002c 1B78     		ldrb	r3, [r3]
 2414 002e 002B     		cmp	r3, #0
 2415 0030 09D0     		beq	.L155
 2416              		.loc 1 963 0 is_stmt 0 discriminator 1
 2417 0032 FB1C     		add	r3, r7, #3
 2418 0034 1B78     		ldrb	r3, [r3]
 2419 0036 012B     		cmp	r3, #1
 2420 0038 05D0     		beq	.L155
 2421 003a 0F4A     		ldr	r2, .L158+8
 2422 003c 104B     		ldr	r3, .L158+16
 2423 003e 101C     		mov	r0, r2
 2424 0040 191C     		mov	r1, r3
 2425 0042 FFF7FEFF 		bl	assert_failed
 2426              	.L155:
 964:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 965:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 2427              		.loc 1 965 0 is_stmt 1
 2428 0046 FB1C     		add	r3, r7, #3
 2429 0048 1B78     		ldrb	r3, [r3]
 2430 004a 002B     		cmp	r3, #0
 2431 004c 07D0     		beq	.L156
 966:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 967:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the USART mute mode by setting the MME bit in the CR1 register */
 968:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_MME;
 2432              		.loc 1 968 0
 2433 004e 7B68     		ldr	r3, [r7, #4]
 2434 0050 1B68     		ldr	r3, [r3]
 2435 0052 8022     		mov	r2, #128
 2436 0054 9201     		lsl	r2, r2, #6
 2437 0056 1A43     		orr	r2, r3
 2438 0058 7B68     		ldr	r3, [r7, #4]
 2439 005a 1A60     		str	r2, [r3]
 2440 005c 05E0     		b	.L153
 2441              	.L156:
 969:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 970:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 971:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 972:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
 973:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 2442              		.loc 1 973 0
 2443 005e 7B68     		ldr	r3, [r7, #4]
 2444 0060 1A68     		ldr	r2, [r3]
 2445 0062 084B     		ldr	r3, .L158+20
 2446 0064 1A40     		and	r2, r3
 2447 0066 7B68     		ldr	r3, [r7, #4]
 2448 0068 1A60     		str	r2, [r3]
 2449              	.L153:
 974:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 975:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2450              		.loc 1 975 0
 2451 006a BD46     		mov	sp, r7
 2452 006c 02B0     		add	sp, sp, #8
 2453              		@ sp needed
 2454 006e 80BD     		pop	{r7, pc}
 2455              	.L159:
 2456              		.align	2
 2457              	.L158:
 2458 0070 00380140 		.word	1073821696
 2459 0074 00440040 		.word	1073759232
 2460 0078 00000000 		.word	.LC0
 2461 007c C2030000 		.word	962
 2462 0080 C3030000 		.word	963
 2463 0084 FFDFFFFF 		.word	-8193
 2464              		.cfi_endproc
 2465              	.LFE56:
 2467              		.section	.text.USART_MuteModeWakeUpConfig,"ax",%progbits
 2468              		.align	2
 2469              		.global	USART_MuteModeWakeUpConfig
 2470              		.code	16
 2471              		.thumb_func
 2473              	USART_MuteModeWakeUpConfig:
 2474              	.LFB57:
 976:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 977:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 978:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Selects the USART WakeUp method from mute mode.
 979:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 980:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 981:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
 982:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 983:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 984:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 985:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 986:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp)
 987:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2475              		.loc 1 987 0
 2476              		.cfi_startproc
 2477 0000 80B5     		push	{r7, lr}
 2478              		.cfi_def_cfa_offset 8
 2479              		.cfi_offset 7, -8
 2480              		.cfi_offset 14, -4
 2481 0002 82B0     		sub	sp, sp, #8
 2482              		.cfi_def_cfa_offset 16
 2483 0004 00AF     		add	r7, sp, #0
 2484              		.cfi_def_cfa_register 7
 2485 0006 7860     		str	r0, [r7, #4]
 2486 0008 3960     		str	r1, [r7]
 988:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 989:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2487              		.loc 1 989 0
 2488 000a 7A68     		ldr	r2, [r7, #4]
 2489 000c 144B     		ldr	r3, .L163
 2490 000e 9A42     		cmp	r2, r3
 2491 0010 09D0     		beq	.L161
 2492              		.loc 1 989 0 is_stmt 0 discriminator 1
 2493 0012 7A68     		ldr	r2, [r7, #4]
 2494 0014 134B     		ldr	r3, .L163+4
 2495 0016 9A42     		cmp	r2, r3
 2496 0018 05D0     		beq	.L161
 2497 001a 134A     		ldr	r2, .L163+8
 2498 001c 134B     		ldr	r3, .L163+12
 2499 001e 101C     		mov	r0, r2
 2500 0020 191C     		mov	r1, r3
 2501 0022 FFF7FEFF 		bl	assert_failed
 2502              	.L161:
 990:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));
 2503              		.loc 1 990 0 is_stmt 1
 2504 0026 3B68     		ldr	r3, [r7]
 2505 0028 002B     		cmp	r3, #0
 2506 002a 0AD0     		beq	.L162
 2507              		.loc 1 990 0 is_stmt 0 discriminator 1
 2508 002c 3A68     		ldr	r2, [r7]
 2509 002e 8023     		mov	r3, #128
 2510 0030 1B01     		lsl	r3, r3, #4
 2511 0032 9A42     		cmp	r2, r3
 2512 0034 05D0     		beq	.L162
 2513 0036 0C4A     		ldr	r2, .L163+8
 2514 0038 0D4B     		ldr	r3, .L163+16
 2515 003a 101C     		mov	r0, r2
 2516 003c 191C     		mov	r1, r3
 2517 003e FFF7FEFF 		bl	assert_failed
 2518              	.L162:
 991:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 992:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 2519              		.loc 1 992 0 is_stmt 1
 2520 0042 7B68     		ldr	r3, [r7, #4]
 2521 0044 1A68     		ldr	r2, [r3]
 2522 0046 0B4B     		ldr	r3, .L163+20
 2523 0048 1A40     		and	r2, r3
 2524 004a 7B68     		ldr	r3, [r7, #4]
 2525 004c 1A60     		str	r2, [r3]
 993:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 2526              		.loc 1 993 0
 2527 004e 7B68     		ldr	r3, [r7, #4]
 2528 0050 1A68     		ldr	r2, [r3]
 2529 0052 3B68     		ldr	r3, [r7]
 2530 0054 1A43     		orr	r2, r3
 2531 0056 7B68     		ldr	r3, [r7, #4]
 2532 0058 1A60     		str	r2, [r3]
 994:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2533              		.loc 1 994 0
 2534 005a BD46     		mov	sp, r7
 2535 005c 02B0     		add	sp, sp, #8
 2536              		@ sp needed
 2537 005e 80BD     		pop	{r7, pc}
 2538              	.L164:
 2539              		.align	2
 2540              	.L163:
 2541 0060 00380140 		.word	1073821696
 2542 0064 00440040 		.word	1073759232
 2543 0068 00000000 		.word	.LC0
 2544 006c DD030000 		.word	989
 2545 0070 DE030000 		.word	990
 2546 0074 FFF7FFFF 		.word	-2049
 2547              		.cfi_endproc
 2548              	.LFE57:
 2550              		.section	.text.USART_AddressDetectionConfig,"ax",%progbits
 2551              		.align	2
 2552              		.global	USART_AddressDetectionConfig
 2553              		.code	16
 2554              		.thumb_func
 2556              	USART_AddressDetectionConfig:
 2557              	.LFB58:
 995:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 996:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 997:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Configure the the USART Address detection length.
 998:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 999:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_AddressLength: specifies the USART address length detection.
1000:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1001:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_AddressLength_4b: 4-bit address length detection 
1002:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_AddressLength_7b: 7-bit address length detection 
1003:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1004:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1005:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength)
1006:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2558              		.loc 1 1006 0
 2559              		.cfi_startproc
 2560 0000 80B5     		push	{r7, lr}
 2561              		.cfi_def_cfa_offset 8
 2562              		.cfi_offset 7, -8
 2563              		.cfi_offset 14, -4
 2564 0002 82B0     		sub	sp, sp, #8
 2565              		.cfi_def_cfa_offset 16
 2566 0004 00AF     		add	r7, sp, #0
 2567              		.cfi_def_cfa_register 7
 2568 0006 7860     		str	r0, [r7, #4]
 2569 0008 3960     		str	r1, [r7]
1007:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1008:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2570              		.loc 1 1008 0
 2571 000a 7A68     		ldr	r2, [r7, #4]
 2572 000c 154B     		ldr	r3, .L168
 2573 000e 9A42     		cmp	r2, r3
 2574 0010 0AD0     		beq	.L166
 2575              		.loc 1 1008 0 is_stmt 0 discriminator 1
 2576 0012 7A68     		ldr	r2, [r7, #4]
 2577 0014 144B     		ldr	r3, .L168+4
 2578 0016 9A42     		cmp	r2, r3
 2579 0018 06D0     		beq	.L166
 2580 001a 144A     		ldr	r2, .L168+8
 2581 001c FC23     		mov	r3, #252
 2582 001e 9B00     		lsl	r3, r3, #2
 2583 0020 101C     		mov	r0, r2
 2584 0022 191C     		mov	r1, r3
 2585 0024 FFF7FEFF 		bl	assert_failed
 2586              	.L166:
1009:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));
 2587              		.loc 1 1009 0 is_stmt 1
 2588 0028 3B68     		ldr	r3, [r7]
 2589 002a 002B     		cmp	r3, #0
 2590 002c 08D0     		beq	.L167
 2591              		.loc 1 1009 0 is_stmt 0 discriminator 1
 2592 002e 3B68     		ldr	r3, [r7]
 2593 0030 102B     		cmp	r3, #16
 2594 0032 05D0     		beq	.L167
 2595 0034 0D4A     		ldr	r2, .L168+8
 2596 0036 0E4B     		ldr	r3, .L168+12
 2597 0038 101C     		mov	r0, r2
 2598 003a 191C     		mov	r1, r3
 2599 003c FFF7FEFF 		bl	assert_failed
 2600              	.L167:
1010:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1011:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 2601              		.loc 1 1011 0 is_stmt 1
 2602 0040 7B68     		ldr	r3, [r7, #4]
 2603 0042 5B68     		ldr	r3, [r3, #4]
 2604 0044 1022     		mov	r2, #16
 2605 0046 191C     		mov	r1, r3
 2606 0048 9143     		bic	r1, r2
 2607 004a 0A1C     		mov	r2, r1
 2608 004c 7B68     		ldr	r3, [r7, #4]
 2609 004e 5A60     		str	r2, [r3, #4]
1012:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_AddressLength;
 2610              		.loc 1 1012 0
 2611 0050 7B68     		ldr	r3, [r7, #4]
 2612 0052 5A68     		ldr	r2, [r3, #4]
 2613 0054 3B68     		ldr	r3, [r7]
 2614 0056 1A43     		orr	r2, r3
 2615 0058 7B68     		ldr	r3, [r7, #4]
 2616 005a 5A60     		str	r2, [r3, #4]
1013:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2617              		.loc 1 1013 0
 2618 005c BD46     		mov	sp, r7
 2619 005e 02B0     		add	sp, sp, #8
 2620              		@ sp needed
 2621 0060 80BD     		pop	{r7, pc}
 2622              	.L169:
 2623 0062 C046     		.align	2
 2624              	.L168:
 2625 0064 00380140 		.word	1073821696
 2626 0068 00440040 		.word	1073759232
 2627 006c 00000000 		.word	.LC0
 2628 0070 F1030000 		.word	1009
 2629              		.cfi_endproc
 2630              	.LFE58:
 2632              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 2633              		.align	2
 2634              		.global	USART_LINBreakDetectLengthConfig
 2635              		.code	16
 2636              		.thumb_func
 2638              	USART_LINBreakDetectLengthConfig:
 2639              	.LFB59:
1014:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1015:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1016:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1017:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1018:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1019:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group6 LIN mode functions
1020:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   LIN mode functions 
1021:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1022:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1023:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1024:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        ##### LIN mode functions #####
1025:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1026:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART 
1027:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          LIN Mode communication.
1028:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In LIN mode, 8-bit data format with 1 stop bit is required in accordance 
1029:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          with the LIN standard.
1030:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] Only this LIN Feature is supported by the USART IP:
1031:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) LIN Master Synchronous Break send capability and LIN slave break 
1032:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              detection capability :  13-bit break generation and 10/11 bit break 
1033:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              detection.
1034:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] USART LIN Master transmitter communication is possible through the 
1035:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          following procedure:
1036:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
1037:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
1038:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_Init() function.
1039:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the LIN mode using the USART_LINCmd() function.
1040:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1041:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Send the break character using USART_SendBreak() function.
1042:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] USART LIN Master receiver communication is possible through the 
1043:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          following procedure:
1044:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
1045:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
1046:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_Init() function.
1047:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the break detection length 
1048:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_LINBreakDetectLengthConfig() function.
1049:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the LIN mode using the USART_LINCmd() function.
1050:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          -@- In LIN mode, the following bits must be kept cleared:
1051:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) CLKEN in the USART_CR2 register.
1052:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
1053:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1054:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1055:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1056:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1057:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1058:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1059:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1060:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
1061:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1062:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
1063:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1064:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
1065:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
1066:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1067:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1068:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength)
1069:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2640              		.loc 1 1069 0
 2641              		.cfi_startproc
 2642 0000 80B5     		push	{r7, lr}
 2643              		.cfi_def_cfa_offset 8
 2644              		.cfi_offset 7, -8
 2645              		.cfi_offset 14, -4
 2646 0002 82B0     		sub	sp, sp, #8
 2647              		.cfi_def_cfa_offset 16
 2648 0004 00AF     		add	r7, sp, #0
 2649              		.cfi_def_cfa_register 7
 2650 0006 7860     		str	r0, [r7, #4]
 2651 0008 3960     		str	r1, [r7]
1070:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1071:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 2652              		.loc 1 1071 0
 2653 000a 7A68     		ldr	r2, [r7, #4]
 2654 000c 134B     		ldr	r3, .L173
 2655 000e 9A42     		cmp	r2, r3
 2656 0010 05D0     		beq	.L171
 2657              		.loc 1 1071 0 is_stmt 0 discriminator 1
 2658 0012 134A     		ldr	r2, .L173+4
 2659 0014 134B     		ldr	r3, .L173+8
 2660 0016 101C     		mov	r0, r2
 2661 0018 191C     		mov	r1, r3
 2662 001a FFF7FEFF 		bl	assert_failed
 2663              	.L171:
1072:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 2664              		.loc 1 1072 0 is_stmt 1
 2665 001e 3B68     		ldr	r3, [r7]
 2666 0020 002B     		cmp	r3, #0
 2667 0022 09D0     		beq	.L172
 2668              		.loc 1 1072 0 is_stmt 0 discriminator 1
 2669 0024 3B68     		ldr	r3, [r7]
 2670 0026 202B     		cmp	r3, #32
 2671 0028 06D0     		beq	.L172
 2672 002a 0D4A     		ldr	r2, .L173+4
 2673 002c 8623     		mov	r3, #134
 2674 002e DB00     		lsl	r3, r3, #3
 2675 0030 101C     		mov	r0, r2
 2676 0032 191C     		mov	r1, r3
 2677 0034 FFF7FEFF 		bl	assert_failed
 2678              	.L172:
1073:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1074:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 2679              		.loc 1 1074 0 is_stmt 1
 2680 0038 7B68     		ldr	r3, [r7, #4]
 2681 003a 5B68     		ldr	r3, [r3, #4]
 2682 003c 2022     		mov	r2, #32
 2683 003e 191C     		mov	r1, r3
 2684 0040 9143     		bic	r1, r2
 2685 0042 0A1C     		mov	r2, r1
 2686 0044 7B68     		ldr	r3, [r7, #4]
 2687 0046 5A60     		str	r2, [r3, #4]
1075:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 2688              		.loc 1 1075 0
 2689 0048 7B68     		ldr	r3, [r7, #4]
 2690 004a 5A68     		ldr	r2, [r3, #4]
 2691 004c 3B68     		ldr	r3, [r7]
 2692 004e 1A43     		orr	r2, r3
 2693 0050 7B68     		ldr	r3, [r7, #4]
 2694 0052 5A60     		str	r2, [r3, #4]
1076:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2695              		.loc 1 1076 0
 2696 0054 BD46     		mov	sp, r7
 2697 0056 02B0     		add	sp, sp, #8
 2698              		@ sp needed
 2699 0058 80BD     		pop	{r7, pc}
 2700              	.L174:
 2701 005a C046     		.align	2
 2702              	.L173:
 2703 005c 00380140 		.word	1073821696
 2704 0060 00000000 		.word	.LC0
 2705 0064 2F040000 		.word	1071
 2706              		.cfi_endproc
 2707              	.LFE59:
 2709              		.section	.text.USART_LINCmd,"ax",%progbits
 2710              		.align	2
 2711              		.global	USART_LINCmd
 2712              		.code	16
 2713              		.thumb_func
 2715              	USART_LINCmd:
 2716              	.LFB60:
1077:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1078:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1079:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
1080:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1081:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
1082:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
1083:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1084:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1085:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1086:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2717              		.loc 1 1086 0
 2718              		.cfi_startproc
 2719 0000 80B5     		push	{r7, lr}
 2720              		.cfi_def_cfa_offset 8
 2721              		.cfi_offset 7, -8
 2722              		.cfi_offset 14, -4
 2723 0002 82B0     		sub	sp, sp, #8
 2724              		.cfi_def_cfa_offset 16
 2725 0004 00AF     		add	r7, sp, #0
 2726              		.cfi_def_cfa_register 7
 2727 0006 7860     		str	r0, [r7, #4]
 2728 0008 0A1C     		mov	r2, r1
 2729 000a FB1C     		add	r3, r7, #3
 2730 000c 1A70     		strb	r2, [r3]
1087:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1088:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 2731              		.loc 1 1088 0
 2732 000e 7A68     		ldr	r2, [r7, #4]
 2733 0010 164B     		ldr	r3, .L180
 2734 0012 9A42     		cmp	r2, r3
 2735 0014 06D0     		beq	.L176
 2736              		.loc 1 1088 0 is_stmt 0 discriminator 1
 2737 0016 164A     		ldr	r2, .L180+4
 2738 0018 8823     		mov	r3, #136
 2739 001a DB00     		lsl	r3, r3, #3
 2740 001c 101C     		mov	r0, r2
 2741 001e 191C     		mov	r1, r3
 2742 0020 FFF7FEFF 		bl	assert_failed
 2743              	.L176:
1089:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2744              		.loc 1 1089 0 is_stmt 1
 2745 0024 FB1C     		add	r3, r7, #3
 2746 0026 1B78     		ldrb	r3, [r3]
 2747 0028 002B     		cmp	r3, #0
 2748 002a 09D0     		beq	.L177
 2749              		.loc 1 1089 0 is_stmt 0 discriminator 1
 2750 002c FB1C     		add	r3, r7, #3
 2751 002e 1B78     		ldrb	r3, [r3]
 2752 0030 012B     		cmp	r3, #1
 2753 0032 05D0     		beq	.L177
 2754 0034 0E4A     		ldr	r2, .L180+4
 2755 0036 0F4B     		ldr	r3, .L180+8
 2756 0038 101C     		mov	r0, r2
 2757 003a 191C     		mov	r1, r3
 2758 003c FFF7FEFF 		bl	assert_failed
 2759              	.L177:
1090:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1091:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 2760              		.loc 1 1091 0 is_stmt 1
 2761 0040 FB1C     		add	r3, r7, #3
 2762 0042 1B78     		ldrb	r3, [r3]
 2763 0044 002B     		cmp	r3, #0
 2764 0046 07D0     		beq	.L178
1092:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1093:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
1094:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 2765              		.loc 1 1094 0
 2766 0048 7B68     		ldr	r3, [r7, #4]
 2767 004a 5B68     		ldr	r3, [r3, #4]
 2768 004c 8022     		mov	r2, #128
 2769 004e D201     		lsl	r2, r2, #7
 2770 0050 1A43     		orr	r2, r3
 2771 0052 7B68     		ldr	r3, [r7, #4]
 2772 0054 5A60     		str	r2, [r3, #4]
 2773 0056 05E0     		b	.L175
 2774              	.L178:
1095:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1096:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1097:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1098:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
1099:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 2775              		.loc 1 1099 0
 2776 0058 7B68     		ldr	r3, [r7, #4]
 2777 005a 5A68     		ldr	r2, [r3, #4]
 2778 005c 064B     		ldr	r3, .L180+12
 2779 005e 1A40     		and	r2, r3
 2780 0060 7B68     		ldr	r3, [r7, #4]
 2781 0062 5A60     		str	r2, [r3, #4]
 2782              	.L175:
1100:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1101:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2783              		.loc 1 1101 0
 2784 0064 BD46     		mov	sp, r7
 2785 0066 02B0     		add	sp, sp, #8
 2786              		@ sp needed
 2787 0068 80BD     		pop	{r7, pc}
 2788              	.L181:
 2789 006a C046     		.align	2
 2790              	.L180:
 2791 006c 00380140 		.word	1073821696
 2792 0070 00000000 		.word	.LC0
 2793 0074 41040000 		.word	1089
 2794 0078 FFBFFFFF 		.word	-16385
 2795              		.cfi_endproc
 2796              	.LFE60:
 2798              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 2799              		.align	2
 2800              		.global	USART_HalfDuplexCmd
 2801              		.code	16
 2802              		.thumb_func
 2804              	USART_HalfDuplexCmd:
 2805              	.LFB61:
1102:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1103:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1104:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1105:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1106:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1107:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group7 Halfduplex mode function
1108:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Half-duplex mode function 
1109:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1110:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1111:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1112:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                    ##### Half-duplex mode function #####
1113:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1114:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1115:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Half-duplex communication.
1116:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART can be configured to follow a single-wire half-duplex protocol 
1117:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          where the TX and RX lines are internally connected.
1118:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] USART Half duplex communication is possible through the following procedure:
1119:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
1120:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              or Mode receiver and hardware flow control values using the USART_Init()
1121:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function.
1122:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the USART address using the USART_SetAddress() function.
1123:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the half duplex mode using USART_HalfDuplexCmd() function.
1124:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1125:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          -@- The RX pin is no longer used.
1126:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          -@- In Half-duplex mode the following bits must be kept cleared:
1127:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) LINEN and CLKEN bits in the USART_CR2 register.
1128:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) SCEN and IREN bits in the USART_CR3 register.
1129:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1130:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1131:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1132:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1133:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1134:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1135:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
1136:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1137:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART Communication.
1138:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
1139:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1140:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1141:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1142:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2806              		.loc 1 1142 0
 2807              		.cfi_startproc
 2808 0000 80B5     		push	{r7, lr}
 2809              		.cfi_def_cfa_offset 8
 2810              		.cfi_offset 7, -8
 2811              		.cfi_offset 14, -4
 2812 0002 82B0     		sub	sp, sp, #8
 2813              		.cfi_def_cfa_offset 16
 2814 0004 00AF     		add	r7, sp, #0
 2815              		.cfi_def_cfa_register 7
 2816 0006 7860     		str	r0, [r7, #4]
 2817 0008 0A1C     		mov	r2, r1
 2818 000a FB1C     		add	r3, r7, #3
 2819 000c 1A70     		strb	r2, [r3]
1143:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1144:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2820              		.loc 1 1144 0
 2821 000e 7A68     		ldr	r2, [r7, #4]
 2822 0010 184B     		ldr	r3, .L187
 2823 0012 9A42     		cmp	r2, r3
 2824 0014 0AD0     		beq	.L183
 2825              		.loc 1 1144 0 is_stmt 0 discriminator 1
 2826 0016 7A68     		ldr	r2, [r7, #4]
 2827 0018 174B     		ldr	r3, .L187+4
 2828 001a 9A42     		cmp	r2, r3
 2829 001c 06D0     		beq	.L183
 2830 001e 174A     		ldr	r2, .L187+8
 2831 0020 8F23     		mov	r3, #143
 2832 0022 DB00     		lsl	r3, r3, #3
 2833 0024 101C     		mov	r0, r2
 2834 0026 191C     		mov	r1, r3
 2835 0028 FFF7FEFF 		bl	assert_failed
 2836              	.L183:
1145:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2837              		.loc 1 1145 0 is_stmt 1
 2838 002c FB1C     		add	r3, r7, #3
 2839 002e 1B78     		ldrb	r3, [r3]
 2840 0030 002B     		cmp	r3, #0
 2841 0032 09D0     		beq	.L184
 2842              		.loc 1 1145 0 is_stmt 0 discriminator 1
 2843 0034 FB1C     		add	r3, r7, #3
 2844 0036 1B78     		ldrb	r3, [r3]
 2845 0038 012B     		cmp	r3, #1
 2846 003a 05D0     		beq	.L184
 2847 003c 0F4A     		ldr	r2, .L187+8
 2848 003e 104B     		ldr	r3, .L187+12
 2849 0040 101C     		mov	r0, r2
 2850 0042 191C     		mov	r1, r3
 2851 0044 FFF7FEFF 		bl	assert_failed
 2852              	.L184:
1146:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1147:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 2853              		.loc 1 1147 0 is_stmt 1
 2854 0048 FB1C     		add	r3, r7, #3
 2855 004a 1B78     		ldrb	r3, [r3]
 2856 004c 002B     		cmp	r3, #0
 2857 004e 06D0     		beq	.L185
1148:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1149:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
1150:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 2858              		.loc 1 1150 0
 2859 0050 7B68     		ldr	r3, [r7, #4]
 2860 0052 9B68     		ldr	r3, [r3, #8]
 2861 0054 0822     		mov	r2, #8
 2862 0056 1A43     		orr	r2, r3
 2863 0058 7B68     		ldr	r3, [r7, #4]
 2864 005a 9A60     		str	r2, [r3, #8]
 2865 005c 07E0     		b	.L182
 2866              	.L185:
1151:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1152:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1153:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1154:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
1155:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 2867              		.loc 1 1155 0
 2868 005e 7B68     		ldr	r3, [r7, #4]
 2869 0060 9B68     		ldr	r3, [r3, #8]
 2870 0062 0822     		mov	r2, #8
 2871 0064 191C     		mov	r1, r3
 2872 0066 9143     		bic	r1, r2
 2873 0068 0A1C     		mov	r2, r1
 2874 006a 7B68     		ldr	r3, [r7, #4]
 2875 006c 9A60     		str	r2, [r3, #8]
 2876              	.L182:
1156:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1157:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2877              		.loc 1 1157 0
 2878 006e BD46     		mov	sp, r7
 2879 0070 02B0     		add	sp, sp, #8
 2880              		@ sp needed
 2881 0072 80BD     		pop	{r7, pc}
 2882              	.L188:
 2883              		.align	2
 2884              	.L187:
 2885 0074 00380140 		.word	1073821696
 2886 0078 00440040 		.word	1073759232
 2887 007c 00000000 		.word	.LC0
 2888 0080 79040000 		.word	1145
 2889              		.cfi_endproc
 2890              	.LFE61:
 2892              		.section	.text.USART_SetGuardTime,"ax",%progbits
 2893              		.align	2
 2894              		.global	USART_SetGuardTime
 2895              		.code	16
 2896              		.thumb_func
 2898              	USART_SetGuardTime:
 2899              	.LFB62:
1158:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1159:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1160:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1161:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1162:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1163:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1164:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group8 Smartcard mode functions
1165:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Smartcard mode functions 
1166:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1167:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1168:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1169:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                      ##### Smartcard mode functions #####
1170:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1171:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1172:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Smartcard communication.
1173:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The Smartcard interface is designed to support asynchronous protocol 
1174:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Smartcards as defined in the ISO 7816-3 standard. The USART can provide 
1175:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          a clock to the smartcard through the SCLK output. In smartcard mode, 
1176:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          SCLK is not associated to the communication but is simply derived from 
1177:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the internal peripheral input clock through a 5-bit prescaler.
1178:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] Smartcard communication is possible through the following procedure:
1179:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Smartcard Prsecaler using the USART_SetPrescaler() 
1180:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1181:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Smartcard Guard Time using the USART_SetGuardTime() 
1182:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1183:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the USART clock using the USART_ClockInit() function as following:
1184:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART Clock enabled.
1185:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART CPOL Low.
1186:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART CPHA on first edge.
1187:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART Last Bit Clock Enabled.
1188:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Smartcard interface using the USART_Init() function as 
1189:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              following:
1190:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Word Length = 9 Bits.
1191:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) 1.5 Stop Bit.
1192:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Even parity.
1193:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) BaudRate = 12096 baud.
1194:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Hardware flow control disabled (RTS and CTS signals).
1195:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Tx and Rx enabled
1196:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Optionally you can enable the parity error interrupt using 
1197:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_ITConfig() function.
1198:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
1199:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the Smartcard interface using the USART_SmartCardCmd() function.
1200:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1201:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] 
1202:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
1203:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] 
1204:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (@) It is also possible to choose 0.5 stop bit for receiving but it is 
1205:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              recommended to use 1.5 stop bits for both transmitting and receiving 
1206:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              to avoid switching between the two configurations.
1207:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (@) In smartcard mode, the following bits must be kept cleared:
1208:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) LINEN bit in the USART_CR2 register.
1209:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) HDSEL and IREN bits in the USART_CR3 register.
1210:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1211:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1212:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1213:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1214:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1215:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1216:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the specified USART guard time.
1217:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1218:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.
1219:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1220:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1221:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
1222:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 2900              		.loc 1 1222 0
 2901              		.cfi_startproc
 2902 0000 80B5     		push	{r7, lr}
 2903              		.cfi_def_cfa_offset 8
 2904              		.cfi_offset 7, -8
 2905              		.cfi_offset 14, -4
 2906 0002 82B0     		sub	sp, sp, #8
 2907              		.cfi_def_cfa_offset 16
 2908 0004 00AF     		add	r7, sp, #0
 2909              		.cfi_def_cfa_register 7
 2910 0006 7860     		str	r0, [r7, #4]
 2911 0008 0A1C     		mov	r2, r1
 2912 000a FB1C     		add	r3, r7, #3
 2913 000c 1A70     		strb	r2, [r3]
1223:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1224:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 2914              		.loc 1 1224 0
 2915 000e 7A68     		ldr	r2, [r7, #4]
 2916 0010 104B     		ldr	r3, .L191
 2917 0012 9A42     		cmp	r2, r3
 2918 0014 06D0     		beq	.L190
 2919              		.loc 1 1224 0 is_stmt 0 discriminator 1
 2920 0016 104A     		ldr	r2, .L191+4
 2921 0018 9923     		mov	r3, #153
 2922 001a DB00     		lsl	r3, r3, #3
 2923 001c 101C     		mov	r0, r2
 2924 001e 191C     		mov	r1, r3
 2925 0020 FFF7FEFF 		bl	assert_failed
 2926              	.L190:
1225:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1226:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART Guard time */
1227:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 2927              		.loc 1 1227 0 is_stmt 1
 2928 0024 7B68     		ldr	r3, [r7, #4]
 2929 0026 1B8A     		ldrh	r3, [r3, #16]
 2930 0028 9AB2     		uxth	r2, r3
 2931 002a FF23     		mov	r3, #255
 2932 002c 1340     		and	r3, r2
 2933 002e 9AB2     		uxth	r2, r3
 2934 0030 7B68     		ldr	r3, [r7, #4]
 2935 0032 1A82     		strh	r2, [r3, #16]
1228:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART guard time */
1229:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 2936              		.loc 1 1229 0
 2937 0034 7B68     		ldr	r3, [r7, #4]
 2938 0036 1B8A     		ldrh	r3, [r3, #16]
 2939 0038 9AB2     		uxth	r2, r3
 2940 003a FB1C     		add	r3, r7, #3
 2941 003c 1B78     		ldrb	r3, [r3]
 2942 003e 9BB2     		uxth	r3, r3
 2943 0040 1B02     		lsl	r3, r3, #8
 2944 0042 9BB2     		uxth	r3, r3
 2945 0044 1343     		orr	r3, r2
 2946 0046 9AB2     		uxth	r2, r3
 2947 0048 7B68     		ldr	r3, [r7, #4]
 2948 004a 1A82     		strh	r2, [r3, #16]
1230:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2949              		.loc 1 1230 0
 2950 004c BD46     		mov	sp, r7
 2951 004e 02B0     		add	sp, sp, #8
 2952              		@ sp needed
 2953 0050 80BD     		pop	{r7, pc}
 2954              	.L192:
 2955 0052 C046     		.align	2
 2956              	.L191:
 2957 0054 00380140 		.word	1073821696
 2958 0058 00000000 		.word	.LC0
 2959              		.cfi_endproc
 2960              	.LFE62:
 2962              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 2963              		.align	2
 2964              		.global	USART_SmartCardCmd
 2965              		.code	16
 2966              		.thumb_func
 2968              	USART_SmartCardCmd:
 2969              	.LFB63:
1231:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1232:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1233:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
1234:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1235:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
1236:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.      
1237:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1238:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1239:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1240:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2970              		.loc 1 1240 0
 2971              		.cfi_startproc
 2972 0000 80B5     		push	{r7, lr}
 2973              		.cfi_def_cfa_offset 8
 2974              		.cfi_offset 7, -8
 2975              		.cfi_offset 14, -4
 2976 0002 82B0     		sub	sp, sp, #8
 2977              		.cfi_def_cfa_offset 16
 2978 0004 00AF     		add	r7, sp, #0
 2979              		.cfi_def_cfa_register 7
 2980 0006 7860     		str	r0, [r7, #4]
 2981 0008 0A1C     		mov	r2, r1
 2982 000a FB1C     		add	r3, r7, #3
 2983 000c 1A70     		strb	r2, [r3]
1241:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1242:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 2984              		.loc 1 1242 0
 2985 000e 7A68     		ldr	r2, [r7, #4]
 2986 0010 164B     		ldr	r3, .L198
 2987 0012 9A42     		cmp	r2, r3
 2988 0014 05D0     		beq	.L194
 2989              		.loc 1 1242 0 is_stmt 0 discriminator 1
 2990 0016 164A     		ldr	r2, .L198+4
 2991 0018 164B     		ldr	r3, .L198+8
 2992 001a 101C     		mov	r0, r2
 2993 001c 191C     		mov	r1, r3
 2994 001e FFF7FEFF 		bl	assert_failed
 2995              	.L194:
1243:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2996              		.loc 1 1243 0 is_stmt 1
 2997 0022 FB1C     		add	r3, r7, #3
 2998 0024 1B78     		ldrb	r3, [r3]
 2999 0026 002B     		cmp	r3, #0
 3000 0028 09D0     		beq	.L195
 3001              		.loc 1 1243 0 is_stmt 0 discriminator 1
 3002 002a FB1C     		add	r3, r7, #3
 3003 002c 1B78     		ldrb	r3, [r3]
 3004 002e 012B     		cmp	r3, #1
 3005 0030 05D0     		beq	.L195
 3006 0032 0F4A     		ldr	r2, .L198+4
 3007 0034 104B     		ldr	r3, .L198+12
 3008 0036 101C     		mov	r0, r2
 3009 0038 191C     		mov	r1, r3
 3010 003a FFF7FEFF 		bl	assert_failed
 3011              	.L195:
1244:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 3012              		.loc 1 1244 0 is_stmt 1
 3013 003e FB1C     		add	r3, r7, #3
 3014 0040 1B78     		ldrb	r3, [r3]
 3015 0042 002B     		cmp	r3, #0
 3016 0044 06D0     		beq	.L196
1245:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1246:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
1247:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 3017              		.loc 1 1247 0
 3018 0046 7B68     		ldr	r3, [r7, #4]
 3019 0048 9B68     		ldr	r3, [r3, #8]
 3020 004a 2022     		mov	r2, #32
 3021 004c 1A43     		orr	r2, r3
 3022 004e 7B68     		ldr	r3, [r7, #4]
 3023 0050 9A60     		str	r2, [r3, #8]
 3024 0052 07E0     		b	.L193
 3025              	.L196:
1248:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1249:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1250:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1251:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
1252:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 3026              		.loc 1 1252 0
 3027 0054 7B68     		ldr	r3, [r7, #4]
 3028 0056 9B68     		ldr	r3, [r3, #8]
 3029 0058 2022     		mov	r2, #32
 3030 005a 191C     		mov	r1, r3
 3031 005c 9143     		bic	r1, r2
 3032 005e 0A1C     		mov	r2, r1
 3033 0060 7B68     		ldr	r3, [r7, #4]
 3034 0062 9A60     		str	r2, [r3, #8]
 3035              	.L193:
1253:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1254:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 3036              		.loc 1 1254 0
 3037 0064 BD46     		mov	sp, r7
 3038 0066 02B0     		add	sp, sp, #8
 3039              		@ sp needed
 3040 0068 80BD     		pop	{r7, pc}
 3041              	.L199:
 3042 006a C046     		.align	2
 3043              	.L198:
 3044 006c 00380140 		.word	1073821696
 3045 0070 00000000 		.word	.LC0
 3046 0074 DA040000 		.word	1242
 3047 0078 DB040000 		.word	1243
 3048              		.cfi_endproc
 3049              	.LFE63:
 3051              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 3052              		.align	2
 3053              		.global	USART_SmartCardNACKCmd
 3054              		.code	16
 3055              		.thumb_func
 3057              	USART_SmartCardNACKCmd:
 3058              	.LFB64:
1255:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1256:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1257:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables NACK transmission.
1258:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1259:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
1260:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.  
1261:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1262:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1263:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1264:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 3059              		.loc 1 1264 0
 3060              		.cfi_startproc
 3061 0000 80B5     		push	{r7, lr}
 3062              		.cfi_def_cfa_offset 8
 3063              		.cfi_offset 7, -8
 3064              		.cfi_offset 14, -4
 3065 0002 82B0     		sub	sp, sp, #8
 3066              		.cfi_def_cfa_offset 16
 3067 0004 00AF     		add	r7, sp, #0
 3068              		.cfi_def_cfa_register 7
 3069 0006 7860     		str	r0, [r7, #4]
 3070 0008 0A1C     		mov	r2, r1
 3071 000a FB1C     		add	r3, r7, #3
 3072 000c 1A70     		strb	r2, [r3]
1265:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1266:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx)); 
 3073              		.loc 1 1266 0
 3074 000e 7A68     		ldr	r2, [r7, #4]
 3075 0010 164B     		ldr	r3, .L205
 3076 0012 9A42     		cmp	r2, r3
 3077 0014 05D0     		beq	.L201
 3078              		.loc 1 1266 0 is_stmt 0 discriminator 1
 3079 0016 164A     		ldr	r2, .L205+4
 3080 0018 164B     		ldr	r3, .L205+8
 3081 001a 101C     		mov	r0, r2
 3082 001c 191C     		mov	r1, r3
 3083 001e FFF7FEFF 		bl	assert_failed
 3084              	.L201:
1267:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 3085              		.loc 1 1267 0 is_stmt 1
 3086 0022 FB1C     		add	r3, r7, #3
 3087 0024 1B78     		ldrb	r3, [r3]
 3088 0026 002B     		cmp	r3, #0
 3089 0028 09D0     		beq	.L202
 3090              		.loc 1 1267 0 is_stmt 0 discriminator 1
 3091 002a FB1C     		add	r3, r7, #3
 3092 002c 1B78     		ldrb	r3, [r3]
 3093 002e 012B     		cmp	r3, #1
 3094 0030 05D0     		beq	.L202
 3095 0032 0F4A     		ldr	r2, .L205+4
 3096 0034 104B     		ldr	r3, .L205+12
 3097 0036 101C     		mov	r0, r2
 3098 0038 191C     		mov	r1, r3
 3099 003a FFF7FEFF 		bl	assert_failed
 3100              	.L202:
1268:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 3101              		.loc 1 1268 0 is_stmt 1
 3102 003e FB1C     		add	r3, r7, #3
 3103 0040 1B78     		ldrb	r3, [r3]
 3104 0042 002B     		cmp	r3, #0
 3105 0044 06D0     		beq	.L203
1269:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1270:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
1271:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 3106              		.loc 1 1271 0
 3107 0046 7B68     		ldr	r3, [r7, #4]
 3108 0048 9B68     		ldr	r3, [r3, #8]
 3109 004a 1022     		mov	r2, #16
 3110 004c 1A43     		orr	r2, r3
 3111 004e 7B68     		ldr	r3, [r7, #4]
 3112 0050 9A60     		str	r2, [r3, #8]
 3113 0052 07E0     		b	.L200
 3114              	.L203:
1272:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1273:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1274:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1275:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
1276:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 3115              		.loc 1 1276 0
 3116 0054 7B68     		ldr	r3, [r7, #4]
 3117 0056 9B68     		ldr	r3, [r3, #8]
 3118 0058 1022     		mov	r2, #16
 3119 005a 191C     		mov	r1, r3
 3120 005c 9143     		bic	r1, r2
 3121 005e 0A1C     		mov	r2, r1
 3122 0060 7B68     		ldr	r3, [r7, #4]
 3123 0062 9A60     		str	r2, [r3, #8]
 3124              	.L200:
1277:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1278:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 3125              		.loc 1 1278 0
 3126 0064 BD46     		mov	sp, r7
 3127 0066 02B0     		add	sp, sp, #8
 3128              		@ sp needed
 3129 0068 80BD     		pop	{r7, pc}
 3130              	.L206:
 3131 006a C046     		.align	2
 3132              	.L205:
 3133 006c 00380140 		.word	1073821696
 3134 0070 00000000 		.word	.LC0
 3135 0074 F2040000 		.word	1266
 3136 0078 F3040000 		.word	1267
 3137              		.cfi_endproc
 3138              	.LFE64:
 3140              		.section	.text.USART_SetAutoRetryCount,"ax",%progbits
 3141              		.align	2
 3142              		.global	USART_SetAutoRetryCount
 3143              		.code	16
 3144              		.thumb_func
 3146              	USART_SetAutoRetryCount:
 3147              	.LFB65:
1279:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1280:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1281:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the Smart Card number of retries in transmit and receive.
1282:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1283:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_AutoCount: specifies the Smart Card auto retry count.
1284:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1285:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1286:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount)
1287:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 3148              		.loc 1 1287 0
 3149              		.cfi_startproc
 3150 0000 80B5     		push	{r7, lr}
 3151              		.cfi_def_cfa_offset 8
 3152              		.cfi_offset 7, -8
 3153              		.cfi_offset 14, -4
 3154 0002 82B0     		sub	sp, sp, #8
 3155              		.cfi_def_cfa_offset 16
 3156 0004 00AF     		add	r7, sp, #0
 3157              		.cfi_def_cfa_register 7
 3158 0006 7860     		str	r0, [r7, #4]
 3159 0008 0A1C     		mov	r2, r1
 3160 000a FB1C     		add	r3, r7, #3
 3161 000c 1A70     		strb	r2, [r3]
1288:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1289:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 3162              		.loc 1 1289 0
 3163 000e 7A68     		ldr	r2, [r7, #4]
 3164 0010 114B     		ldr	r3, .L210
 3165 0012 9A42     		cmp	r2, r3
 3166 0014 05D0     		beq	.L208
 3167              		.loc 1 1289 0 is_stmt 0 discriminator 1
 3168 0016 114A     		ldr	r2, .L210+4
 3169 0018 114B     		ldr	r3, .L210+8
 3170 001a 101C     		mov	r0, r2
 3171 001c 191C     		mov	r1, r3
 3172 001e FFF7FEFF 		bl	assert_failed
 3173              	.L208:
1290:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
 3174              		.loc 1 1290 0 is_stmt 1
 3175 0022 FB1C     		add	r3, r7, #3
 3176 0024 1B78     		ldrb	r3, [r3]
 3177 0026 072B     		cmp	r3, #7
 3178 0028 05D9     		bls	.L209
 3179              		.loc 1 1290 0 is_stmt 0 discriminator 1
 3180 002a 0C4A     		ldr	r2, .L210+4
 3181 002c 0D4B     		ldr	r3, .L210+12
 3182 002e 101C     		mov	r0, r2
 3183 0030 191C     		mov	r1, r3
 3184 0032 FFF7FEFF 		bl	assert_failed
 3185              	.L209:
1291:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART auto retry count */
1292:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 3186              		.loc 1 1292 0 is_stmt 1
 3187 0036 7B68     		ldr	r3, [r7, #4]
 3188 0038 9A68     		ldr	r2, [r3, #8]
 3189 003a 0B4B     		ldr	r3, .L210+16
 3190 003c 1A40     		and	r2, r3
 3191 003e 7B68     		ldr	r3, [r7, #4]
 3192 0040 9A60     		str	r2, [r3, #8]
1293:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART auto retry count*/
1294:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 3193              		.loc 1 1294 0
 3194 0042 7B68     		ldr	r3, [r7, #4]
 3195 0044 9A68     		ldr	r2, [r3, #8]
 3196 0046 FB1C     		add	r3, r7, #3
 3197 0048 1B78     		ldrb	r3, [r3]
 3198 004a 5B04     		lsl	r3, r3, #17
 3199 004c 1A43     		orr	r2, r3
 3200 004e 7B68     		ldr	r3, [r7, #4]
 3201 0050 9A60     		str	r2, [r3, #8]
1295:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 3202              		.loc 1 1295 0
 3203 0052 BD46     		mov	sp, r7
 3204 0054 02B0     		add	sp, sp, #8
 3205              		@ sp needed
 3206 0056 80BD     		pop	{r7, pc}
 3207              	.L211:
 3208              		.align	2
 3209              	.L210:
 3210 0058 00380140 		.word	1073821696
 3211 005c 00000000 		.word	.LC0
 3212 0060 09050000 		.word	1289
 3213 0064 0A050000 		.word	1290
 3214 0068 FFFFF1FF 		.word	-917505
 3215              		.cfi_endproc
 3216              	.LFE65:
 3218              		.section	.text.USART_SetBlockLength,"ax",%progbits
 3219              		.align	2
 3220              		.global	USART_SetBlockLength
 3221              		.code	16
 3222              		.thumb_func
 3224              	USART_SetBlockLength:
 3225              	.LFB66:
1296:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1297:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1298:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the Smart Card Block length.
1299:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1300:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_BlockLength: specifies the Smart Card block length.
1301:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1302:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1303:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength)
1304:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 3226              		.loc 1 1304 0
 3227              		.cfi_startproc
 3228 0000 80B5     		push	{r7, lr}
 3229              		.cfi_def_cfa_offset 8
 3230              		.cfi_offset 7, -8
 3231              		.cfi_offset 14, -4
 3232 0002 82B0     		sub	sp, sp, #8
 3233              		.cfi_def_cfa_offset 16
 3234 0004 00AF     		add	r7, sp, #0
 3235              		.cfi_def_cfa_register 7
 3236 0006 7860     		str	r0, [r7, #4]
 3237 0008 0A1C     		mov	r2, r1
 3238 000a FB1C     		add	r3, r7, #3
 3239 000c 1A70     		strb	r2, [r3]
1305:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1306:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 3240              		.loc 1 1306 0
 3241 000e 7A68     		ldr	r2, [r7, #4]
 3242 0010 0C4B     		ldr	r3, .L214
 3243 0012 9A42     		cmp	r2, r3
 3244 0014 05D0     		beq	.L213
 3245              		.loc 1 1306 0 is_stmt 0 discriminator 1
 3246 0016 0C4A     		ldr	r2, .L214+4
 3247 0018 0C4B     		ldr	r3, .L214+8
 3248 001a 101C     		mov	r0, r2
 3249 001c 191C     		mov	r1, r3
 3250 001e FFF7FEFF 		bl	assert_failed
 3251              	.L213:
1307:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1308:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the Smart card block length */
1309:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 3252              		.loc 1 1309 0 is_stmt 1
 3253 0022 7B68     		ldr	r3, [r7, #4]
 3254 0024 5B69     		ldr	r3, [r3, #20]
 3255 0026 1B02     		lsl	r3, r3, #8
 3256 0028 1A0A     		lsr	r2, r3, #8
 3257 002a 7B68     		ldr	r3, [r7, #4]
 3258 002c 5A61     		str	r2, [r3, #20]
1310:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the Smart Card block length */
1311:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 3259              		.loc 1 1311 0
 3260 002e 7B68     		ldr	r3, [r7, #4]
 3261 0030 5A69     		ldr	r2, [r3, #20]
 3262 0032 FB1C     		add	r3, r7, #3
 3263 0034 1B78     		ldrb	r3, [r3]
 3264 0036 1B06     		lsl	r3, r3, #24
 3265 0038 1A43     		orr	r2, r3
 3266 003a 7B68     		ldr	r3, [r7, #4]
 3267 003c 5A61     		str	r2, [r3, #20]
1312:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 3268              		.loc 1 1312 0
 3269 003e BD46     		mov	sp, r7
 3270 0040 02B0     		add	sp, sp, #8
 3271              		@ sp needed
 3272 0042 80BD     		pop	{r7, pc}
 3273              	.L215:
 3274              		.align	2
 3275              	.L214:
 3276 0044 00380140 		.word	1073821696
 3277 0048 00000000 		.word	.LC0
 3278 004c 1A050000 		.word	1306
 3279              		.cfi_endproc
 3280              	.LFE66:
 3282              		.section	.text.USART_IrDAConfig,"ax",%progbits
 3283              		.align	2
 3284              		.global	USART_IrDAConfig
 3285              		.code	16
 3286              		.thumb_func
 3288              	USART_IrDAConfig:
 3289              	.LFB67:
1313:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1314:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1315:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1316:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1317:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1318:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group9 IrDA mode functions
1319:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   IrDA mode functions 
1320:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1321:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1322:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1323:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                         ##### IrDA mode functions #####
1324:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1325:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1326:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          IrDA communication.
1327:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] IrDA is a half duplex communication protocol. If the Transmitter is busy, 
1328:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          any data on the IrDA receive line will be ignored by the IrDA decoder 
1329:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          and if the Receiver is busy, data on the TX from the USART to IrDA will 
1330:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          not be encoded by IrDA. While receiving data, transmission should be 
1331:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          avoided as the data to be transmitted could be corrupted.
1332:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] IrDA communication is possible through the following procedure:
1333:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, 
1334:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Transmitter/Receiver modes and hardware flow control values using 
1335:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_Init() function.
1336:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the IrDA pulse width by configuring the prescaler using  
1337:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_SetPrescaler() function.
1338:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal 
1339:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              mode using the USART_IrDAConfig() function.
1340:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the IrDA using the USART_IrDACmd() function.
1341:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.         
1342:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
1343:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     (@) A pulse of width less than two and greater than one PSC period(s) may or 
1344:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         may not be rejected.
1345:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     (@) The receiver set up time should be managed by software. The IrDA physical 
1346:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         layer specification specifies a minimum of 10 ms delay between 
1347:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         transmission and reception (IrDA is a half duplex protocol).
1348:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     (@) In IrDA mode, the following bits must be kept cleared:
1349:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+@) LINEN, STOP and CLKEN bits in the USART_CR2 register.
1350:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+@) SCEN and HDSEL bits in the USART_CR3 register.
1351:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1352:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1353:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1354:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1355:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1356:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1357:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1358:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1359:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1360:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1361:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IrDAMode_LowPower
1362:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IrDAMode_Normal
1363:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1364:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1365:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode)
1366:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 3290              		.loc 1 1366 0
 3291              		.cfi_startproc
 3292 0000 80B5     		push	{r7, lr}
 3293              		.cfi_def_cfa_offset 8
 3294              		.cfi_offset 7, -8
 3295              		.cfi_offset 14, -4
 3296 0002 82B0     		sub	sp, sp, #8
 3297              		.cfi_def_cfa_offset 16
 3298 0004 00AF     		add	r7, sp, #0
 3299              		.cfi_def_cfa_register 7
 3300 0006 7860     		str	r0, [r7, #4]
 3301 0008 3960     		str	r1, [r7]
1367:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1368:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 3302              		.loc 1 1368 0
 3303 000a 7A68     		ldr	r2, [r7, #4]
 3304 000c 134B     		ldr	r3, .L219
 3305 000e 9A42     		cmp	r2, r3
 3306 0010 06D0     		beq	.L217
 3307              		.loc 1 1368 0 is_stmt 0 discriminator 1
 3308 0012 134A     		ldr	r2, .L219+4
 3309 0014 AB23     		mov	r3, #171
 3310 0016 DB00     		lsl	r3, r3, #3
 3311 0018 101C     		mov	r0, r2
 3312 001a 191C     		mov	r1, r3
 3313 001c FFF7FEFF 		bl	assert_failed
 3314              	.L217:
1369:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
 3315              		.loc 1 1369 0 is_stmt 1
 3316 0020 3B68     		ldr	r3, [r7]
 3317 0022 042B     		cmp	r3, #4
 3318 0024 08D0     		beq	.L218
 3319              		.loc 1 1369 0 is_stmt 0 discriminator 1
 3320 0026 3B68     		ldr	r3, [r7]
 3321 0028 002B     		cmp	r3, #0
 3322 002a 05D0     		beq	.L218
 3323 002c 0C4A     		ldr	r2, .L219+4
 3324 002e 0D4B     		ldr	r3, .L219+8
 3325 0030 101C     		mov	r0, r2
 3326 0032 191C     		mov	r1, r3
 3327 0034 FFF7FEFF 		bl	assert_failed
 3328              	.L218:
1370:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1371:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 3329              		.loc 1 1371 0 is_stmt 1
 3330 0038 7B68     		ldr	r3, [r7, #4]
 3331 003a 9B68     		ldr	r3, [r3, #8]
 3332 003c 0422     		mov	r2, #4
 3333 003e 191C     		mov	r1, r3
 3334 0040 9143     		bic	r1, r2
 3335 0042 0A1C     		mov	r2, r1
 3336 0044 7B68     		ldr	r3, [r7, #4]
 3337 0046 9A60     		str	r2, [r3, #8]
1372:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 3338              		.loc 1 1372 0
 3339 0048 7B68     		ldr	r3, [r7, #4]
 3340 004a 9A68     		ldr	r2, [r3, #8]
 3341 004c 3B68     		ldr	r3, [r7]
 3342 004e 1A43     		orr	r2, r3
 3343 0050 7B68     		ldr	r3, [r7, #4]
 3344 0052 9A60     		str	r2, [r3, #8]
1373:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 3345              		.loc 1 1373 0
 3346 0054 BD46     		mov	sp, r7
 3347 0056 02B0     		add	sp, sp, #8
 3348              		@ sp needed
 3349 0058 80BD     		pop	{r7, pc}
 3350              	.L220:
 3351 005a C046     		.align	2
 3352              	.L219:
 3353 005c 00380140 		.word	1073821696
 3354 0060 00000000 		.word	.LC0
 3355 0064 59050000 		.word	1369
 3356              		.cfi_endproc
 3357              	.LFE67:
 3359              		.section	.text.USART_IrDACmd,"ax",%progbits
 3360              		.align	2
 3361              		.global	USART_IrDACmd
 3362              		.code	16
 3363              		.thumb_func
 3365              	USART_IrDACmd:
 3366              	.LFB68:
1374:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1375:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1376:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1377:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1378:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1379:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
1380:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1381:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1382:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1383:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 3367              		.loc 1 1383 0
 3368              		.cfi_startproc
 3369 0000 80B5     		push	{r7, lr}
 3370              		.cfi_def_cfa_offset 8
 3371              		.cfi_offset 7, -8
 3372              		.cfi_offset 14, -4
 3373 0002 82B0     		sub	sp, sp, #8
 3374              		.cfi_def_cfa_offset 16
 3375 0004 00AF     		add	r7, sp, #0
 3376              		.cfi_def_cfa_register 7
 3377 0006 7860     		str	r0, [r7, #4]
 3378 0008 0A1C     		mov	r2, r1
 3379 000a FB1C     		add	r3, r7, #3
 3380 000c 1A70     		strb	r2, [r3]
1384:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1385:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 3381              		.loc 1 1385 0
 3382 000e 7A68     		ldr	r2, [r7, #4]
 3383 0010 164B     		ldr	r3, .L226
 3384 0012 9A42     		cmp	r2, r3
 3385 0014 05D0     		beq	.L222
 3386              		.loc 1 1385 0 is_stmt 0 discriminator 1
 3387 0016 164A     		ldr	r2, .L226+4
 3388 0018 164B     		ldr	r3, .L226+8
 3389 001a 101C     		mov	r0, r2
 3390 001c 191C     		mov	r1, r3
 3391 001e FFF7FEFF 		bl	assert_failed
 3392              	.L222:
1386:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 3393              		.loc 1 1386 0 is_stmt 1
 3394 0022 FB1C     		add	r3, r7, #3
 3395 0024 1B78     		ldrb	r3, [r3]
 3396 0026 002B     		cmp	r3, #0
 3397 0028 09D0     		beq	.L223
 3398              		.loc 1 1386 0 is_stmt 0 discriminator 1
 3399 002a FB1C     		add	r3, r7, #3
 3400 002c 1B78     		ldrb	r3, [r3]
 3401 002e 012B     		cmp	r3, #1
 3402 0030 05D0     		beq	.L223
 3403 0032 0F4A     		ldr	r2, .L226+4
 3404 0034 104B     		ldr	r3, .L226+12
 3405 0036 101C     		mov	r0, r2
 3406 0038 191C     		mov	r1, r3
 3407 003a FFF7FEFF 		bl	assert_failed
 3408              	.L223:
1387:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1388:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 3409              		.loc 1 1388 0 is_stmt 1
 3410 003e FB1C     		add	r3, r7, #3
 3411 0040 1B78     		ldrb	r3, [r3]
 3412 0042 002B     		cmp	r3, #0
 3413 0044 06D0     		beq	.L224
1389:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1390:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1391:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 3414              		.loc 1 1391 0
 3415 0046 7B68     		ldr	r3, [r7, #4]
 3416 0048 9B68     		ldr	r3, [r3, #8]
 3417 004a 0222     		mov	r2, #2
 3418 004c 1A43     		orr	r2, r3
 3419 004e 7B68     		ldr	r3, [r7, #4]
 3420 0050 9A60     		str	r2, [r3, #8]
 3421 0052 07E0     		b	.L221
 3422              	.L224:
1392:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1393:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1394:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1395:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1396:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 3423              		.loc 1 1396 0
 3424 0054 7B68     		ldr	r3, [r7, #4]
 3425 0056 9B68     		ldr	r3, [r3, #8]
 3426 0058 0222     		mov	r2, #2
 3427 005a 191C     		mov	r1, r3
 3428 005c 9143     		bic	r1, r2
 3429 005e 0A1C     		mov	r2, r1
 3430 0060 7B68     		ldr	r3, [r7, #4]
 3431 0062 9A60     		str	r2, [r3, #8]
 3432              	.L221:
1397:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1398:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 3433              		.loc 1 1398 0
 3434 0064 BD46     		mov	sp, r7
 3435 0066 02B0     		add	sp, sp, #8
 3436              		@ sp needed
 3437 0068 80BD     		pop	{r7, pc}
 3438              	.L227:
 3439 006a C046     		.align	2
 3440              	.L226:
 3441 006c 00380140 		.word	1073821696
 3442 0070 00000000 		.word	.LC0
 3443 0074 69050000 		.word	1385
 3444 0078 6A050000 		.word	1386
 3445              		.cfi_endproc
 3446              	.LFE68:
 3448              		.section	.text.USART_DECmd,"ax",%progbits
 3449              		.align	2
 3450              		.global	USART_DECmd
 3451              		.code	16
 3452              		.thumb_func
 3454              	USART_DECmd:
 3455              	.LFB69:
1399:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1400:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1401:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1402:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1403:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group10 RS485 mode function
1404:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief  RS485 mode function 
1405:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1406:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim  
1407:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1408:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                         ##### RS485 mode functions #####
1409:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1410:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1411:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          RS485 flow control.
1412:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] RS485 flow control (Driver enable feature) handling is possible through
1413:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the following procedure:
1414:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, 
1415:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Transmitter/Receiver modes and hardware flow control values using 
1416:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_Init() function.
1417:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the Driver Enable using the USART_DECmd() function.
1418:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Driver Enable polarity using the USART_DEPolarityConfig()
1419:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1420:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Driver Enable assertion time using USART_SetDEAssertionTime() 
1421:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function and deassertion time using the USART_SetDEDeassertionTime()
1422:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.    
1423:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1424:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       -@-  
1425:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        (+@) The assertion and dessertion times are expressed in sample time units (1/8 or 
1426:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             1/16 bit time, depending on the oversampling rate).
1427:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        
1428:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1429:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1430:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1431:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1432:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1433:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's DE functionality.
1434:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1435:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the driver enable mode.
1436:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.      
1437:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1438:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1439:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
1440:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 3456              		.loc 1 1440 0
 3457              		.cfi_startproc
 3458 0000 80B5     		push	{r7, lr}
 3459              		.cfi_def_cfa_offset 8
 3460              		.cfi_offset 7, -8
 3461              		.cfi_offset 14, -4
 3462 0002 82B0     		sub	sp, sp, #8
 3463              		.cfi_def_cfa_offset 16
 3464 0004 00AF     		add	r7, sp, #0
 3465              		.cfi_def_cfa_register 7
 3466 0006 7860     		str	r0, [r7, #4]
 3467 0008 0A1C     		mov	r2, r1
 3468 000a FB1C     		add	r3, r7, #3
 3469 000c 1A70     		strb	r2, [r3]
1441:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1442:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 3470              		.loc 1 1442 0
 3471 000e 7A68     		ldr	r2, [r7, #4]
 3472 0010 174B     		ldr	r3, .L233
 3473 0012 9A42     		cmp	r2, r3
 3474 0014 09D0     		beq	.L229
 3475              		.loc 1 1442 0 is_stmt 0 discriminator 1
 3476 0016 7A68     		ldr	r2, [r7, #4]
 3477 0018 164B     		ldr	r3, .L233+4
 3478 001a 9A42     		cmp	r2, r3
 3479 001c 05D0     		beq	.L229
 3480 001e 164A     		ldr	r2, .L233+8
 3481 0020 164B     		ldr	r3, .L233+12
 3482 0022 101C     		mov	r0, r2
 3483 0024 191C     		mov	r1, r3
 3484 0026 FFF7FEFF 		bl	assert_failed
 3485              	.L229:
1443:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 3486              		.loc 1 1443 0 is_stmt 1
 3487 002a FB1C     		add	r3, r7, #3
 3488 002c 1B78     		ldrb	r3, [r3]
 3489 002e 002B     		cmp	r3, #0
 3490 0030 09D0     		beq	.L230
 3491              		.loc 1 1443 0 is_stmt 0 discriminator 1
 3492 0032 FB1C     		add	r3, r7, #3
 3493 0034 1B78     		ldrb	r3, [r3]
 3494 0036 012B     		cmp	r3, #1
 3495 0038 05D0     		beq	.L230
 3496 003a 0F4A     		ldr	r2, .L233+8
 3497 003c 104B     		ldr	r3, .L233+16
 3498 003e 101C     		mov	r0, r2
 3499 0040 191C     		mov	r1, r3
 3500 0042 FFF7FEFF 		bl	assert_failed
 3501              	.L230:
1444:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 3502              		.loc 1 1444 0 is_stmt 1
 3503 0046 FB1C     		add	r3, r7, #3
 3504 0048 1B78     		ldrb	r3, [r3]
 3505 004a 002B     		cmp	r3, #0
 3506 004c 07D0     		beq	.L231
1445:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1446:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the DE functionality by setting the DEM bit in the CR3 register */
1447:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_DEM;
 3507              		.loc 1 1447 0
 3508 004e 7B68     		ldr	r3, [r7, #4]
 3509 0050 9B68     		ldr	r3, [r3, #8]
 3510 0052 8022     		mov	r2, #128
 3511 0054 D201     		lsl	r2, r2, #7
 3512 0056 1A43     		orr	r2, r3
 3513 0058 7B68     		ldr	r3, [r7, #4]
 3514 005a 9A60     		str	r2, [r3, #8]
 3515 005c 05E0     		b	.L228
 3516              	.L231:
1448:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1449:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1450:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1451:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
1452:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 3517              		.loc 1 1452 0
 3518 005e 7B68     		ldr	r3, [r7, #4]
 3519 0060 9A68     		ldr	r2, [r3, #8]
 3520 0062 084B     		ldr	r3, .L233+20
 3521 0064 1A40     		and	r2, r3
 3522 0066 7B68     		ldr	r3, [r7, #4]
 3523 0068 9A60     		str	r2, [r3, #8]
 3524              	.L228:
1453:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1454:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 3525              		.loc 1 1454 0
 3526 006a BD46     		mov	sp, r7
 3527 006c 02B0     		add	sp, sp, #8
 3528              		@ sp needed
 3529 006e 80BD     		pop	{r7, pc}
 3530              	.L234:
 3531              		.align	2
 3532              	.L233:
 3533 0070 00380140 		.word	1073821696
 3534 0074 00440040 		.word	1073759232
 3535 0078 00000000 		.word	.LC0
 3536 007c A2050000 		.word	1442
 3537 0080 A3050000 		.word	1443
 3538 0084 FFBFFFFF 		.word	-16385
 3539              		.cfi_endproc
 3540              	.LFE69:
 3542              		.section	.text.USART_DEPolarityConfig,"ax",%progbits
 3543              		.align	2
 3544              		.global	USART_DEPolarityConfig
 3545              		.code	16
 3546              		.thumb_func
 3548              	USART_DEPolarityConfig:
 3549              	.LFB70:
1455:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1456:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1457:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Configures the USART's DE polarity
1458:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1459:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DEPolarity: specifies the DE polarity.
1460:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1461:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_DEPolarity_Low
1462:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_DEPolarity_High
1463:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1464:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1465:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity)
1466:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 3550              		.loc 1 1466 0
 3551              		.cfi_startproc
 3552 0000 80B5     		push	{r7, lr}
 3553              		.cfi_def_cfa_offset 8
 3554              		.cfi_offset 7, -8
 3555              		.cfi_offset 14, -4
 3556 0002 82B0     		sub	sp, sp, #8
 3557              		.cfi_def_cfa_offset 16
 3558 0004 00AF     		add	r7, sp, #0
 3559              		.cfi_def_cfa_register 7
 3560 0006 7860     		str	r0, [r7, #4]
 3561 0008 3960     		str	r1, [r7]
1467:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1468:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 3562              		.loc 1 1468 0
 3563 000a 7A68     		ldr	r2, [r7, #4]
 3564 000c 144B     		ldr	r3, .L238
 3565 000e 9A42     		cmp	r2, r3
 3566 0010 09D0     		beq	.L236
 3567              		.loc 1 1468 0 is_stmt 0 discriminator 1
 3568 0012 7A68     		ldr	r2, [r7, #4]
 3569 0014 134B     		ldr	r3, .L238+4
 3570 0016 9A42     		cmp	r2, r3
 3571 0018 05D0     		beq	.L236
 3572 001a 134A     		ldr	r2, .L238+8
 3573 001c 134B     		ldr	r3, .L238+12
 3574 001e 101C     		mov	r0, r2
 3575 0020 191C     		mov	r1, r3
 3576 0022 FFF7FEFF 		bl	assert_failed
 3577              	.L236:
1469:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));
 3578              		.loc 1 1469 0 is_stmt 1
 3579 0026 3A68     		ldr	r2, [r7]
 3580 0028 8023     		mov	r3, #128
 3581 002a 1B02     		lsl	r3, r3, #8
 3582 002c 9A42     		cmp	r2, r3
 3583 002e 08D0     		beq	.L237
 3584              		.loc 1 1469 0 is_stmt 0 discriminator 1
 3585 0030 3B68     		ldr	r3, [r7]
 3586 0032 002B     		cmp	r3, #0
 3587 0034 05D0     		beq	.L237
 3588 0036 0C4A     		ldr	r2, .L238+8
 3589 0038 0D4B     		ldr	r3, .L238+16
 3590 003a 101C     		mov	r0, r2
 3591 003c 191C     		mov	r1, r3
 3592 003e FFF7FEFF 		bl	assert_failed
 3593              	.L237:
1470:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1471:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 3594              		.loc 1 1471 0 is_stmt 1
 3595 0042 7B68     		ldr	r3, [r7, #4]
 3596 0044 9A68     		ldr	r2, [r3, #8]
 3597 0046 0B4B     		ldr	r3, .L238+20
 3598 0048 1A40     		and	r2, r3
 3599 004a 7B68     		ldr	r3, [r7, #4]
 3600 004c 9A60     		str	r2, [r3, #8]
1472:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_DEPolarity;
 3601              		.loc 1 1472 0
 3602 004e 7B68     		ldr	r3, [r7, #4]
 3603 0050 9A68     		ldr	r2, [r3, #8]
 3604 0052 3B68     		ldr	r3, [r7]
 3605 0054 1A43     		orr	r2, r3
 3606 0056 7B68     		ldr	r3, [r7, #4]
 3607 0058 9A60     		str	r2, [r3, #8]
1473:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 3608              		.loc 1 1473 0
 3609 005a BD46     		mov	sp, r7
 3610 005c 02B0     		add	sp, sp, #8
 3611              		@ sp needed
 3612 005e 80BD     		pop	{r7, pc}
 3613              	.L239:
 3614              		.align	2
 3615              	.L238:
 3616 0060 00380140 		.word	1073821696
 3617 0064 00440040 		.word	1073759232
 3618 0068 00000000 		.word	.LC0
 3619 006c BC050000 		.word	1468
 3620 0070 BD050000 		.word	1469
 3621 0074 FF7FFFFF 		.word	-32769
 3622              		.cfi_endproc
 3623              	.LFE70:
 3625              		.section	.text.USART_SetDEAssertionTime,"ax",%progbits
 3626              		.align	2
 3627              		.global	USART_SetDEAssertionTime
 3628              		.code	16
 3629              		.thumb_func
 3631              	USART_SetDEAssertionTime:
 3632              	.LFB71:
1474:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1475:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1476:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the specified RS485 DE assertion time
1477:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1478:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *  @param  USART_AssertionTime: specifies the time between the activation of the DE
1479:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *  signal and the beginning of the start bit
1480:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1481:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1482:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime)
1483:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 3633              		.loc 1 1483 0
 3634              		.cfi_startproc
 3635 0000 80B5     		push	{r7, lr}
 3636              		.cfi_def_cfa_offset 8
 3637              		.cfi_offset 7, -8
 3638              		.cfi_offset 14, -4
 3639 0002 82B0     		sub	sp, sp, #8
 3640              		.cfi_def_cfa_offset 16
 3641 0004 00AF     		add	r7, sp, #0
 3642              		.cfi_def_cfa_register 7
 3643 0006 7860     		str	r0, [r7, #4]
 3644 0008 3960     		str	r1, [r7]
1484:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1485:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 3645              		.loc 1 1485 0
 3646 000a 7A68     		ldr	r2, [r7, #4]
 3647 000c 124B     		ldr	r3, .L243
 3648 000e 9A42     		cmp	r2, r3
 3649 0010 09D0     		beq	.L241
 3650              		.loc 1 1485 0 is_stmt 0 discriminator 1
 3651 0012 7A68     		ldr	r2, [r7, #4]
 3652 0014 114B     		ldr	r3, .L243+4
 3653 0016 9A42     		cmp	r2, r3
 3654 0018 05D0     		beq	.L241
 3655 001a 114A     		ldr	r2, .L243+8
 3656 001c 114B     		ldr	r3, .L243+12
 3657 001e 101C     		mov	r0, r2
 3658 0020 191C     		mov	r1, r3
 3659 0022 FFF7FEFF 		bl	assert_failed
 3660              	.L241:
1486:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 
 3661              		.loc 1 1486 0 is_stmt 1
 3662 0026 3B68     		ldr	r3, [r7]
 3663 0028 1F2B     		cmp	r3, #31
 3664 002a 05D9     		bls	.L242
 3665              		.loc 1 1486 0 is_stmt 0 discriminator 1
 3666 002c 0C4A     		ldr	r2, .L243+8
 3667 002e 0E4B     		ldr	r3, .L243+16
 3668 0030 101C     		mov	r0, r2
 3669 0032 191C     		mov	r1, r3
 3670 0034 FFF7FEFF 		bl	assert_failed
 3671              	.L242:
1487:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1488:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the DE assertion time */
1489:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 3672              		.loc 1 1489 0 is_stmt 1
 3673 0038 7B68     		ldr	r3, [r7, #4]
 3674 003a 1A68     		ldr	r2, [r3]
 3675 003c 0B4B     		ldr	r3, .L243+20
 3676 003e 1A40     		and	r2, r3
 3677 0040 7B68     		ldr	r3, [r7, #4]
 3678 0042 1A60     		str	r2, [r3]
1490:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the DE assertion time */
1491:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 3679              		.loc 1 1491 0
 3680 0044 7B68     		ldr	r3, [r7, #4]
 3681 0046 1A68     		ldr	r2, [r3]
 3682 0048 3B68     		ldr	r3, [r7]
 3683 004a 5B05     		lsl	r3, r3, #21
 3684 004c 1A43     		orr	r2, r3
 3685 004e 7B68     		ldr	r3, [r7, #4]
 3686 0050 1A60     		str	r2, [r3]
1492:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 3687              		.loc 1 1492 0
 3688 0052 BD46     		mov	sp, r7
 3689 0054 02B0     		add	sp, sp, #8
 3690              		@ sp needed
 3691 0056 80BD     		pop	{r7, pc}
 3692              	.L244:
 3693              		.align	2
 3694              	.L243:
 3695 0058 00380140 		.word	1073821696
 3696 005c 00440040 		.word	1073759232
 3697 0060 00000000 		.word	.LC0
 3698 0064 CD050000 		.word	1485
 3699 0068 CE050000 		.word	1486
 3700 006c FFFF1FFC 		.word	-65011713
 3701              		.cfi_endproc
 3702              	.LFE71:
 3704              		.section	.text.USART_SetDEDeassertionTime,"ax",%progbits
 3705              		.align	2
 3706              		.global	USART_SetDEDeassertionTime
 3707              		.code	16
 3708              		.thumb_func
 3710              	USART_SetDEDeassertionTime:
 3711              	.LFB72:
1493:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1494:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1495:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the specified RS485 DE deassertion time
1496:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1497:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *  @param  USART_DeassertionTime: specifies the time between the middle of the last 
1498:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   stop bit in a transmitted message and the de-activation of the DE signal
1499:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1500:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1501:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime)
1502:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 3712              		.loc 1 1502 0
 3713              		.cfi_startproc
 3714 0000 80B5     		push	{r7, lr}
 3715              		.cfi_def_cfa_offset 8
 3716              		.cfi_offset 7, -8
 3717              		.cfi_offset 14, -4
 3718 0002 82B0     		sub	sp, sp, #8
 3719              		.cfi_def_cfa_offset 16
 3720 0004 00AF     		add	r7, sp, #0
 3721              		.cfi_def_cfa_register 7
 3722 0006 7860     		str	r0, [r7, #4]
 3723 0008 3960     		str	r1, [r7]
1503:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1504:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 3724              		.loc 1 1504 0
 3725 000a 7A68     		ldr	r2, [r7, #4]
 3726 000c 134B     		ldr	r3, .L248
 3727 000e 9A42     		cmp	r2, r3
 3728 0010 0AD0     		beq	.L246
 3729              		.loc 1 1504 0 is_stmt 0 discriminator 1
 3730 0012 7A68     		ldr	r2, [r7, #4]
 3731 0014 124B     		ldr	r3, .L248+4
 3732 0016 9A42     		cmp	r2, r3
 3733 0018 06D0     		beq	.L246
 3734 001a 124A     		ldr	r2, .L248+8
 3735 001c BC23     		mov	r3, #188
 3736 001e DB00     		lsl	r3, r3, #3
 3737 0020 101C     		mov	r0, r2
 3738 0022 191C     		mov	r1, r3
 3739 0024 FFF7FEFF 		bl	assert_failed
 3740              	.L246:
1505:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 
 3741              		.loc 1 1505 0 is_stmt 1
 3742 0028 3B68     		ldr	r3, [r7]
 3743 002a 1F2B     		cmp	r3, #31
 3744 002c 05D9     		bls	.L247
 3745              		.loc 1 1505 0 is_stmt 0 discriminator 1
 3746 002e 0D4A     		ldr	r2, .L248+8
 3747 0030 0D4B     		ldr	r3, .L248+12
 3748 0032 101C     		mov	r0, r2
 3749 0034 191C     		mov	r1, r3
 3750 0036 FFF7FEFF 		bl	assert_failed
 3751              	.L247:
1506:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1507:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the DE deassertion time */
1508:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 3752              		.loc 1 1508 0 is_stmt 1
 3753 003a 7B68     		ldr	r3, [r7, #4]
 3754 003c 1A68     		ldr	r2, [r3]
 3755 003e 0B4B     		ldr	r3, .L248+16
 3756 0040 1A40     		and	r2, r3
 3757 0042 7B68     		ldr	r3, [r7, #4]
 3758 0044 1A60     		str	r2, [r3]
1509:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the DE deassertion time */
1510:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 3759              		.loc 1 1510 0
 3760 0046 7B68     		ldr	r3, [r7, #4]
 3761 0048 1A68     		ldr	r2, [r3]
 3762 004a 3B68     		ldr	r3, [r7]
 3763 004c 1B04     		lsl	r3, r3, #16
 3764 004e 1A43     		orr	r2, r3
 3765 0050 7B68     		ldr	r3, [r7, #4]
 3766 0052 1A60     		str	r2, [r3]
1511:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 3767              		.loc 1 1511 0
 3768 0054 BD46     		mov	sp, r7
 3769 0056 02B0     		add	sp, sp, #8
 3770              		@ sp needed
 3771 0058 80BD     		pop	{r7, pc}
 3772              	.L249:
 3773 005a C046     		.align	2
 3774              	.L248:
 3775 005c 00380140 		.word	1073821696
 3776 0060 00440040 		.word	1073759232
 3777 0064 00000000 		.word	.LC0
 3778 0068 E1050000 		.word	1505
 3779 006c FFFFE0FF 		.word	-2031617
 3780              		.cfi_endproc
 3781              	.LFE72:
 3783              		.section	.text.USART_DMACmd,"ax",%progbits
 3784              		.align	2
 3785              		.global	USART_DMACmd
 3786              		.code	16
 3787              		.thumb_func
 3789              	USART_DMACmd:
 3790              	.LFB73:
1512:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1513:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1514:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1515:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1516:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1517:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group11 DMA transfers management functions
1518:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   DMA transfers management functions
1519:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1520:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1521:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1522:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                ##### DMA transfers management functions #####
1523:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1524:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This section provides two functions that can be used only in DMA mode.
1525:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In DMA Mode, the USART communication can be managed by 2 DMA Channel 
1526:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          requests:
1527:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request.
1528:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request.
1529:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In this Mode it is advised to use the following function:
1530:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, 
1531:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              FunctionalState NewState).
1532:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1533:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1534:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1535:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1536:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1537:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1538:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1539:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1540:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
1541:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_DMAReq_Tx: USART DMA transmit request
1542:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_DMAReq_Rx: USART DMA receive request
1543:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1544:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.  
1545:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1546:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1547:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
1548:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 3791              		.loc 1 1548 0
 3792              		.cfi_startproc
 3793 0000 80B5     		push	{r7, lr}
 3794              		.cfi_def_cfa_offset 8
 3795              		.cfi_offset 7, -8
 3796              		.cfi_offset 14, -4
 3797 0002 84B0     		sub	sp, sp, #16
 3798              		.cfi_def_cfa_offset 24
 3799 0004 00AF     		add	r7, sp, #0
 3800              		.cfi_def_cfa_register 7
 3801 0006 F860     		str	r0, [r7, #12]
 3802 0008 B960     		str	r1, [r7, #8]
 3803 000a FB1D     		add	r3, r7, #7
 3804 000c 1A70     		strb	r2, [r3]
1549:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1550:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 3805              		.loc 1 1550 0
 3806 000e FA68     		ldr	r2, [r7, #12]
 3807 0010 1E4B     		ldr	r3, .L257
 3808 0012 9A42     		cmp	r2, r3
 3809 0014 09D0     		beq	.L251
 3810              		.loc 1 1550 0 is_stmt 0 discriminator 1
 3811 0016 FA68     		ldr	r2, [r7, #12]
 3812 0018 1D4B     		ldr	r3, .L257+4
 3813 001a 9A42     		cmp	r2, r3
 3814 001c 05D0     		beq	.L251
 3815 001e 1D4A     		ldr	r2, .L257+8
 3816 0020 1D4B     		ldr	r3, .L257+12
 3817 0022 101C     		mov	r0, r2
 3818 0024 191C     		mov	r1, r3
 3819 0026 FFF7FEFF 		bl	assert_failed
 3820              	.L251:
1551:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
 3821              		.loc 1 1551 0 is_stmt 1
 3822 002a BB68     		ldr	r3, [r7, #8]
 3823 002c C022     		mov	r2, #192
 3824 002e 9343     		bic	r3, r2
 3825 0030 02D1     		bne	.L252
 3826              		.loc 1 1551 0 is_stmt 0 discriminator 2
 3827 0032 BB68     		ldr	r3, [r7, #8]
 3828 0034 002B     		cmp	r3, #0
 3829 0036 05D1     		bne	.L253
 3830              	.L252:
 3831              		.loc 1 1551 0 discriminator 1
 3832 0038 164A     		ldr	r2, .L257+8
 3833 003a 184B     		ldr	r3, .L257+16
 3834 003c 101C     		mov	r0, r2
 3835 003e 191C     		mov	r1, r3
 3836 0040 FFF7FEFF 		bl	assert_failed
 3837              	.L253:
1552:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 3838              		.loc 1 1552 0 is_stmt 1
 3839 0044 FB1D     		add	r3, r7, #7
 3840 0046 1B78     		ldrb	r3, [r3]
 3841 0048 002B     		cmp	r3, #0
 3842 004a 0AD0     		beq	.L254
 3843              		.loc 1 1552 0 is_stmt 0 discriminator 1
 3844 004c FB1D     		add	r3, r7, #7
 3845 004e 1B78     		ldrb	r3, [r3]
 3846 0050 012B     		cmp	r3, #1
 3847 0052 06D0     		beq	.L254
 3848 0054 0F4A     		ldr	r2, .L257+8
 3849 0056 C223     		mov	r3, #194
 3850 0058 DB00     		lsl	r3, r3, #3
 3851 005a 101C     		mov	r0, r2
 3852 005c 191C     		mov	r1, r3
 3853 005e FFF7FEFF 		bl	assert_failed
 3854              	.L254:
1553:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1554:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 3855              		.loc 1 1554 0 is_stmt 1
 3856 0062 FB1D     		add	r3, r7, #7
 3857 0064 1B78     		ldrb	r3, [r3]
 3858 0066 002B     		cmp	r3, #0
 3859 0068 06D0     		beq	.L255
1555:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1556:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1557:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        DMAR bits in the USART CR3 register */
1558:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 3860              		.loc 1 1558 0
 3861 006a FB68     		ldr	r3, [r7, #12]
 3862 006c 9A68     		ldr	r2, [r3, #8]
 3863 006e BB68     		ldr	r3, [r7, #8]
 3864 0070 1A43     		orr	r2, r3
 3865 0072 FB68     		ldr	r3, [r7, #12]
 3866 0074 9A60     		str	r2, [r3, #8]
 3867 0076 06E0     		b	.L250
 3868              	.L255:
1559:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1560:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1561:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1562:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1563:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        DMAR bits in the USART CR3 register */
1564:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 3869              		.loc 1 1564 0
 3870 0078 FB68     		ldr	r3, [r7, #12]
 3871 007a 9B68     		ldr	r3, [r3, #8]
 3872 007c BA68     		ldr	r2, [r7, #8]
 3873 007e D243     		mvn	r2, r2
 3874 0080 1A40     		and	r2, r3
 3875 0082 FB68     		ldr	r3, [r7, #12]
 3876 0084 9A60     		str	r2, [r3, #8]
 3877              	.L250:
1565:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1566:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 3878              		.loc 1 1566 0
 3879 0086 BD46     		mov	sp, r7
 3880 0088 04B0     		add	sp, sp, #16
 3881              		@ sp needed
 3882 008a 80BD     		pop	{r7, pc}
 3883              	.L258:
 3884              		.align	2
 3885              	.L257:
 3886 008c 00380140 		.word	1073821696
 3887 0090 00440040 		.word	1073759232
 3888 0094 00000000 		.word	.LC0
 3889 0098 0E060000 		.word	1550
 3890 009c 0F060000 		.word	1551
 3891              		.cfi_endproc
 3892              	.LFE73:
 3894              		.section	.text.USART_DMAReceptionErrorConfig,"ax",%progbits
 3895              		.align	2
 3896              		.global	USART_DMAReceptionErrorConfig
 3897              		.code	16
 3898              		.thumb_func
 3900              	USART_DMAReceptionErrorConfig:
 3901              	.LFB74:
1567:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1568:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1569:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface when reception error occurs.
1570:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1571:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DMAOnError: specifies the DMA status in case of reception error.
1572:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
1573:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_DMAOnError_Enable: DMA receive request enabled when the USART DMA  
1574:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          reception error is asserted.
1575:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_DMAOnError_Disable: DMA receive request disabled when the USART DMA 
1576:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          reception error is asserted.
1577:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1578:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1579:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError)
1580:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 3902              		.loc 1 1580 0
 3903              		.cfi_startproc
 3904 0000 80B5     		push	{r7, lr}
 3905              		.cfi_def_cfa_offset 8
 3906              		.cfi_offset 7, -8
 3907              		.cfi_offset 14, -4
 3908 0002 82B0     		sub	sp, sp, #8
 3909              		.cfi_def_cfa_offset 16
 3910 0004 00AF     		add	r7, sp, #0
 3911              		.cfi_def_cfa_register 7
 3912 0006 7860     		str	r0, [r7, #4]
 3913 0008 3960     		str	r1, [r7]
1581:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1582:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 3914              		.loc 1 1582 0
 3915 000a 7A68     		ldr	r2, [r7, #4]
 3916 000c 144B     		ldr	r3, .L262
 3917 000e 9A42     		cmp	r2, r3
 3918 0010 09D0     		beq	.L260
 3919              		.loc 1 1582 0 is_stmt 0 discriminator 1
 3920 0012 7A68     		ldr	r2, [r7, #4]
 3921 0014 134B     		ldr	r3, .L262+4
 3922 0016 9A42     		cmp	r2, r3
 3923 0018 05D0     		beq	.L260
 3924 001a 134A     		ldr	r2, .L262+8
 3925 001c 134B     		ldr	r3, .L262+12
 3926 001e 101C     		mov	r0, r2
 3927 0020 191C     		mov	r1, r3
 3928 0022 FFF7FEFF 		bl	assert_failed
 3929              	.L260:
1583:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
 3930              		.loc 1 1583 0 is_stmt 1
 3931 0026 3A68     		ldr	r2, [r7]
 3932 0028 8023     		mov	r3, #128
 3933 002a 9B01     		lsl	r3, r3, #6
 3934 002c 9A42     		cmp	r2, r3
 3935 002e 08D0     		beq	.L261
 3936              		.loc 1 1583 0 is_stmt 0 discriminator 1
 3937 0030 3B68     		ldr	r3, [r7]
 3938 0032 002B     		cmp	r3, #0
 3939 0034 05D0     		beq	.L261
 3940 0036 0C4A     		ldr	r2, .L262+8
 3941 0038 0D4B     		ldr	r3, .L262+16
 3942 003a 101C     		mov	r0, r2
 3943 003c 191C     		mov	r1, r3
 3944 003e FFF7FEFF 		bl	assert_failed
 3945              	.L261:
1584:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1585:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the DMA Reception error detection bit */
1586:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 3946              		.loc 1 1586 0 is_stmt 1
 3947 0042 7B68     		ldr	r3, [r7, #4]
 3948 0044 9A68     		ldr	r2, [r3, #8]
 3949 0046 0B4B     		ldr	r3, .L262+20
 3950 0048 1A40     		and	r2, r3
 3951 004a 7B68     		ldr	r3, [r7, #4]
 3952 004c 9A60     		str	r2, [r3, #8]
1587:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the DMA Reception error detection bit */
1588:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_DMAOnError;
 3953              		.loc 1 1588 0
 3954 004e 7B68     		ldr	r3, [r7, #4]
 3955 0050 9A68     		ldr	r2, [r3, #8]
 3956 0052 3B68     		ldr	r3, [r7]
 3957 0054 1A43     		orr	r2, r3
 3958 0056 7B68     		ldr	r3, [r7, #4]
 3959 0058 9A60     		str	r2, [r3, #8]
1589:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 3960              		.loc 1 1589 0
 3961 005a BD46     		mov	sp, r7
 3962 005c 02B0     		add	sp, sp, #8
 3963              		@ sp needed
 3964 005e 80BD     		pop	{r7, pc}
 3965              	.L263:
 3966              		.align	2
 3967              	.L262:
 3968 0060 00380140 		.word	1073821696
 3969 0064 00440040 		.word	1073759232
 3970 0068 00000000 		.word	.LC0
 3971 006c 2E060000 		.word	1582
 3972 0070 2F060000 		.word	1583
 3973 0074 FFDFFFFF 		.word	-8193
 3974              		.cfi_endproc
 3975              	.LFE74:
 3977              		.section	.text.USART_ITConfig,"ax",%progbits
 3978              		.align	2
 3979              		.global	USART_ITConfig
 3980              		.code	16
 3981              		.thumb_func
 3983              	USART_ITConfig:
 3984              	.LFB75:
1590:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1591:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1592:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1593:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1594:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1595:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group12 Interrupts and flags management functions
1596:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1597:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1598:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1599:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1600:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             ##### Interrupts and flags management functions #####
1601:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1602:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to configure the 
1603:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          USART Interrupts sources, Requests and check or clear the flags or pending bits status. 
1604:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          The user should identify which mode will be used in his application to 
1605:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          manage the communication: Polling mode, Interrupt mode.
1606:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1607:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *** Polling Mode ***
1608:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ====================
1609:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In Polling Mode, the SPI communication can be managed by these flags:
1610:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_REACK: to indicate the status of the Receive Enable 
1611:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              acknowledge flag
1612:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_TEACK: to indicate the status of the Transmit Enable 
1613:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              acknowledge flag.
1614:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_WUF: to indicate the status of the Wake up flag.
1615:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_RWU: to indicate the status of the Receive Wake up flag.
1616:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_SBK: to indicate the status of the Send Break flag.
1617:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_CMF: to indicate the status of the Character match flag.
1618:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_BUSY: to indicate the status of the Busy flag.
1619:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_ABRF: to indicate the status of the Auto baud rate flag.
1620:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_ABRE: to indicate the status of the Auto baud rate error flag.
1621:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_EOBF: to indicate the status of the End of block flag.
1622:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_RTOF: to indicate the status of the Receive time out flag.
1623:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_nCTSS: to indicate the status of the Inverted nCTS input 
1624:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              bit status.
1625:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_TXE: to indicate the status of the transmit buffer register.
1626:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_RXNE: to indicate the status of the receive buffer register.
1627:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_TC: to indicate the status of the transmit operation.
1628:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_IDLE: to indicate the status of the Idle Line.
1629:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_CTS: to indicate the status of the nCTS input.
1630:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_LBD: to indicate the status of the LIN break detection.
1631:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_NE: to indicate if a noise error occur.
1632:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_FE: to indicate if a frame error occur.
1633:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_PE: to indicate if a parity error occur.
1634:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_ORE: to indicate if an Overrun error occur.
1635:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In this Mode it is advised to use the following functions:
1636:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG).
1637:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG).
1638:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1639:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *** Interrupt Mode ***
1640:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ======================
1641:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In Interrupt Mode, the USART communication can be managed by 8 interrupt 
1642:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          sources and 10 pending bits:
1643:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) Pending Bits:
1644:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_WU: to indicate the status of the Wake up interrupt.
1645:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CM: to indicate the status of Character match interrupt.
1646:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_EOB: to indicate the status of End of block interrupt.
1647:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_RTO: to indicate the status of Receive time out interrupt.
1648:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CTS: to indicate the status of CTS change interrupt.
1649:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_LBD: to indicate the status of LIN Break detection interrupt.
1650:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_TC: to indicate the status of Transmission complete interrupt.
1651:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_IDLE: to indicate the status of IDLE line detected interrupt.
1652:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_ORE: to indicate the status of OverRun Error interrupt.
1653:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_NE: to indicate the status of Noise Error interrupt.
1654:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_FE: to indicate the status of Framing Error interrupt.
1655:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_PE: to indicate the status of Parity Error interrupt.  
1656:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1657:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) Interrupt Source:
1658:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_WU: specifies the interrupt source for Wake up interrupt.
1659:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CM: specifies the interrupt source for Character match 
1660:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   interrupt.
1661:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_EOB: specifies the interrupt source for End of block
1662:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   interrupt.
1663:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_RTO: specifies the interrupt source for Receive time-out
1664:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   interrupt.
1665:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CTS: specifies the interrupt source for CTS change interrupt.
1666:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_LBD: specifies the interrupt source for LIN Break 
1667:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   detection interrupt.
1668:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_TXE: specifies the interrupt source for Tansmit Data 
1669:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   Register empty interrupt.
1670:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_TC: specifies the interrupt source for Transmission 
1671:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   complete interrupt.
1672:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_RXNE: specifies the interrupt source for Receive Data 
1673:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   register not empty interrupt.
1674:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_IDLE: specifies the interrupt source for Idle line 
1675:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   detection interrupt.
1676:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_PE: specifies the interrupt source for Parity Error interrupt.
1677:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_ERR: specifies the interrupt source for Error interrupt
1678:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   (Frame error, noise error, overrun error)
1679:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              -@@- Some parameters are coded in order to use them as interrupt 
1680:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  source or as pending bits.
1681:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In this Mode it is advised to use the following functions:
1682:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState
1683:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT).
1684:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT).
1685:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1686:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1687:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1688:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1689:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1690:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1691:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1692:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1693:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1694:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1695:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_WU:  Wake up interrupt.
1696:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_CM:  Character match interrupt.
1697:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_EOB:  End of block interrupt.
1698:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_RTO:  Receive time out interrupt.
1699:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt.
1700:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt.
1701:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_TXE:  Tansmit Data Register empty interrupt.
1702:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_TC:  Transmission complete interrupt.
1703:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_RXNE:  Receive Data register not empty interrupt.
1704:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_IDLE:  Idle line detection interrupt.
1705:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_PE:  Parity Error interrupt.
1706:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1707:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1708:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
1709:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1710:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1711:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
1712:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 3985              		.loc 1 1712 0
 3986              		.cfi_startproc
 3987 0000 80B5     		push	{r7, lr}
 3988              		.cfi_def_cfa_offset 8
 3989              		.cfi_offset 7, -8
 3990              		.cfi_offset 14, -4
 3991 0002 88B0     		sub	sp, sp, #32
 3992              		.cfi_def_cfa_offset 40
 3993 0004 00AF     		add	r7, sp, #0
 3994              		.cfi_def_cfa_register 7
 3995 0006 F860     		str	r0, [r7, #12]
 3996 0008 B960     		str	r1, [r7, #8]
 3997 000a FB1D     		add	r3, r7, #7
 3998 000c 1A70     		strb	r2, [r3]
1713:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t usartreg = 0, itpos = 0, itmask = 0;
 3999              		.loc 1 1713 0
 4000 000e 0023     		mov	r3, #0
 4001 0010 BB61     		str	r3, [r7, #24]
 4002 0012 0023     		mov	r3, #0
 4003 0014 7B61     		str	r3, [r7, #20]
 4004 0016 0023     		mov	r3, #0
 4005 0018 3B61     		str	r3, [r7, #16]
1714:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t usartxbase = 0;
 4006              		.loc 1 1714 0
 4007 001a 0023     		mov	r3, #0
 4008 001c FB61     		str	r3, [r7, #28]
1715:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1716:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 4009              		.loc 1 1716 0
 4010 001e FA68     		ldr	r2, [r7, #12]
 4011 0020 424B     		ldr	r3, .L272
 4012 0022 9A42     		cmp	r2, r3
 4013 0024 09D0     		beq	.L265
 4014              		.loc 1 1716 0 is_stmt 0 discriminator 1
 4015 0026 FA68     		ldr	r2, [r7, #12]
 4016 0028 414B     		ldr	r3, .L272+4
 4017 002a 9A42     		cmp	r2, r3
 4018 002c 05D0     		beq	.L265
 4019 002e 414A     		ldr	r2, .L272+8
 4020 0030 414B     		ldr	r3, .L272+12
 4021 0032 101C     		mov	r0, r2
 4022 0034 191C     		mov	r1, r3
 4023 0036 FFF7FEFF 		bl	assert_failed
 4024              	.L265:
1717:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
 4025              		.loc 1 1717 0 is_stmt 1
 4026 003a BA68     		ldr	r2, [r7, #8]
 4027 003c 8423     		mov	r3, #132
 4028 003e 5B00     		lsl	r3, r3, #1
 4029 0040 9A42     		cmp	r2, r3
 4030 0042 32D0     		beq	.L266
 4031              		.loc 1 1717 0 is_stmt 0 discriminator 1
 4032 0044 BA68     		ldr	r2, [r7, #8]
 4033 0046 3D4B     		ldr	r3, .L272+16
 4034 0048 9A42     		cmp	r2, r3
 4035 004a 2ED0     		beq	.L266
 4036 004c BA68     		ldr	r2, [r7, #8]
 4037 004e 3C4B     		ldr	r3, .L272+20
 4038 0050 9A42     		cmp	r2, r3
 4039 0052 2AD0     		beq	.L266
 4040 0054 BA68     		ldr	r2, [r7, #8]
 4041 0056 3B4B     		ldr	r3, .L272+24
 4042 0058 9A42     		cmp	r2, r3
 4043 005a 26D0     		beq	.L266
 4044 005c BA68     		ldr	r2, [r7, #8]
 4045 005e 3A4B     		ldr	r3, .L272+28
 4046 0060 9A42     		cmp	r2, r3
 4047 0062 22D0     		beq	.L266
 4048 0064 BA68     		ldr	r2, [r7, #8]
 4049 0066 394B     		ldr	r3, .L272+32
 4050 0068 9A42     		cmp	r2, r3
 4051 006a 1ED0     		beq	.L266
 4052 006c BA68     		ldr	r2, [r7, #8]
 4053 006e 384B     		ldr	r3, .L272+36
 4054 0070 9A42     		cmp	r2, r3
 4055 0072 1AD0     		beq	.L266
 4056 0074 BA68     		ldr	r2, [r7, #8]
 4057 0076 C023     		mov	r3, #192
 4058 0078 9B00     		lsl	r3, r3, #2
 4059 007a 9A42     		cmp	r2, r3
 4060 007c 15D0     		beq	.L266
 4061 007e BA68     		ldr	r2, [r7, #8]
 4062 0080 344B     		ldr	r3, .L272+40
 4063 0082 9A42     		cmp	r2, r3
 4064 0084 11D0     		beq	.L266
 4065 0086 BA68     		ldr	r2, [r7, #8]
 4066 0088 334B     		ldr	r3, .L272+44
 4067 008a 9A42     		cmp	r2, r3
 4068 008c 0DD0     		beq	.L266
 4069 008e BA68     		ldr	r2, [r7, #8]
 4070 0090 324B     		ldr	r3, .L272+48
 4071 0092 9A42     		cmp	r2, r3
 4072 0094 09D0     		beq	.L266
 4073 0096 BA68     		ldr	r2, [r7, #8]
 4074 0098 314B     		ldr	r3, .L272+52
 4075 009a 9A42     		cmp	r2, r3
 4076 009c 05D0     		beq	.L266
 4077 009e 254A     		ldr	r2, .L272+8
 4078 00a0 304B     		ldr	r3, .L272+56
 4079 00a2 101C     		mov	r0, r2
 4080 00a4 191C     		mov	r1, r3
 4081 00a6 FFF7FEFF 		bl	assert_failed
 4082              	.L266:
1718:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 4083              		.loc 1 1718 0 is_stmt 1
 4084 00aa FB1D     		add	r3, r7, #7
 4085 00ac 1B78     		ldrb	r3, [r3]
 4086 00ae 002B     		cmp	r3, #0
 4087 00b0 09D0     		beq	.L267
 4088              		.loc 1 1718 0 is_stmt 0 discriminator 1
 4089 00b2 FB1D     		add	r3, r7, #7
 4090 00b4 1B78     		ldrb	r3, [r3]
 4091 00b6 012B     		cmp	r3, #1
 4092 00b8 05D0     		beq	.L267
 4093 00ba 1E4A     		ldr	r2, .L272+8
 4094 00bc 2A4B     		ldr	r3, .L272+60
 4095 00be 101C     		mov	r0, r2
 4096 00c0 191C     		mov	r1, r3
 4097 00c2 FFF7FEFF 		bl	assert_failed
 4098              	.L267:
1719:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1720:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 4099              		.loc 1 1720 0 is_stmt 1
 4100 00c6 FB68     		ldr	r3, [r7, #12]
 4101 00c8 FB61     		str	r3, [r7, #28]
1721:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1722:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the USART register index */
1723:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 4102              		.loc 1 1723 0
 4103 00ca BB68     		ldr	r3, [r7, #8]
 4104 00cc 9BB2     		uxth	r3, r3
 4105 00ce 1B0A     		lsr	r3, r3, #8
 4106 00d0 9BB2     		uxth	r3, r3
 4107 00d2 BB61     		str	r3, [r7, #24]
1724:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1725:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the interrupt position */
1726:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itpos = USART_IT & IT_MASK;
 4108              		.loc 1 1726 0
 4109 00d4 BA68     		ldr	r2, [r7, #8]
 4110 00d6 FF23     		mov	r3, #255
 4111 00d8 1340     		and	r3, r2
 4112 00da 7B61     		str	r3, [r7, #20]
1727:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 4113              		.loc 1 1727 0
 4114 00dc 7B69     		ldr	r3, [r7, #20]
 4115 00de 0122     		mov	r2, #1
 4116 00e0 111C     		mov	r1, r2
 4117 00e2 9940     		lsl	r1, r1, r3
 4118 00e4 0B1C     		mov	r3, r1
 4119 00e6 3B61     		str	r3, [r7, #16]
1728:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1729:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (usartreg == 0x02) /* The IT is in CR2 register */
 4120              		.loc 1 1729 0
 4121 00e8 BB69     		ldr	r3, [r7, #24]
 4122 00ea 022B     		cmp	r3, #2
 4123 00ec 03D1     		bne	.L268
1730:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1731:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     usartxbase += 0x04;
 4124              		.loc 1 1731 0
 4125 00ee FB69     		ldr	r3, [r7, #28]
 4126 00f0 0433     		add	r3, r3, #4
 4127 00f2 FB61     		str	r3, [r7, #28]
 4128 00f4 05E0     		b	.L269
 4129              	.L268:
1732:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1733:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (usartreg == 0x03) /* The IT is in CR3 register */
 4130              		.loc 1 1733 0
 4131 00f6 BB69     		ldr	r3, [r7, #24]
 4132 00f8 032B     		cmp	r3, #3
 4133 00fa 02D1     		bne	.L269
1734:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1735:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     usartxbase += 0x08;
 4134              		.loc 1 1735 0
 4135 00fc FB69     		ldr	r3, [r7, #28]
 4136 00fe 0833     		add	r3, r3, #8
 4137 0100 FB61     		str	r3, [r7, #28]
 4138              	.L269:
1736:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1737:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* The IT is in CR1 register */
1738:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1739:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1740:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 4139              		.loc 1 1740 0
 4140 0102 FB1D     		add	r3, r7, #7
 4141 0104 1B78     		ldrb	r3, [r3]
 4142 0106 002B     		cmp	r3, #0
 4143 0108 06D0     		beq	.L270
1741:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1742:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 4144              		.loc 1 1742 0
 4145 010a FB69     		ldr	r3, [r7, #28]
 4146 010c FA69     		ldr	r2, [r7, #28]
 4147 010e 1168     		ldr	r1, [r2]
 4148 0110 3A69     		ldr	r2, [r7, #16]
 4149 0112 0A43     		orr	r2, r1
 4150 0114 1A60     		str	r2, [r3]
 4151 0116 06E0     		b	.L264
 4152              	.L270:
1743:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1744:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1745:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1746:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 4153              		.loc 1 1746 0
 4154 0118 FB69     		ldr	r3, [r7, #28]
 4155 011a FA69     		ldr	r2, [r7, #28]
 4156 011c 1268     		ldr	r2, [r2]
 4157 011e 3969     		ldr	r1, [r7, #16]
 4158 0120 C943     		mvn	r1, r1
 4159 0122 0A40     		and	r2, r1
 4160 0124 1A60     		str	r2, [r3]
 4161              	.L264:
1747:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1748:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 4162              		.loc 1 1748 0
 4163 0126 BD46     		mov	sp, r7
 4164 0128 08B0     		add	sp, sp, #32
 4165              		@ sp needed
 4166 012a 80BD     		pop	{r7, pc}
 4167              	.L273:
 4168              		.align	2
 4169              	.L272:
 4170 012c 00380140 		.word	1073821696
 4171 0130 00440040 		.word	1073759232
 4172 0134 00000000 		.word	.LC0
 4173 0138 B4060000 		.word	1716
 4174 013c 07010700 		.word	459015
 4175 0140 06010600 		.word	393478
 4176 0144 05010500 		.word	327941
 4177 0148 04010400 		.word	262404
 4178 014c 06020800 		.word	524806
 4179 0150 0A030900 		.word	590602
 4180 0154 1A010B00 		.word	721178
 4181 0158 1B010C00 		.word	786715
 4182 015c 0E011100 		.word	1114382
 4183 0160 16031400 		.word	1311510
 4184 0164 B5060000 		.word	1717
 4185 0168 B6060000 		.word	1718
 4186              		.cfi_endproc
 4187              	.LFE75:
 4189              		.section	.text.USART_RequestCmd,"ax",%progbits
 4190              		.align	2
 4191              		.global	USART_RequestCmd
 4192              		.code	16
 4193              		.thumb_func
 4195              	USART_RequestCmd:
 4196              	.LFB76:
1749:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1750:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1751:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables the specified USART's Request.
1752:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1753:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Request: specifies the USART request.
1754:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
1755:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Request_TXFRQ: Transmit data flush ReQuest
1756:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Request_RXFRQ: Receive data flush ReQuest
1757:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Request_MMRQ: Mute Mode ReQuest
1758:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Request_SBKRQ: Send Break ReQuest
1759:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Request_ABRRQ: Auto Baud Rate ReQuest
1760:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the DMA interface when reception error occurs.
1761:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.  
1762:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1763:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1764:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
1765:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 4197              		.loc 1 1765 0
 4198              		.cfi_startproc
 4199 0000 80B5     		push	{r7, lr}
 4200              		.cfi_def_cfa_offset 8
 4201              		.cfi_offset 7, -8
 4202              		.cfi_offset 14, -4
 4203 0002 84B0     		sub	sp, sp, #16
 4204              		.cfi_def_cfa_offset 24
 4205 0004 00AF     		add	r7, sp, #0
 4206              		.cfi_def_cfa_register 7
 4207 0006 F860     		str	r0, [r7, #12]
 4208 0008 B960     		str	r1, [r7, #8]
 4209 000a FB1D     		add	r3, r7, #7
 4210 000c 1A70     		strb	r2, [r3]
1766:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1767:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 4211              		.loc 1 1767 0
 4212 000e FA68     		ldr	r2, [r7, #12]
 4213 0010 264B     		ldr	r3, .L280
 4214 0012 9A42     		cmp	r2, r3
 4215 0014 09D0     		beq	.L275
 4216              		.loc 1 1767 0 is_stmt 0 discriminator 1
 4217 0016 FA68     		ldr	r2, [r7, #12]
 4218 0018 254B     		ldr	r3, .L280+4
 4219 001a 9A42     		cmp	r2, r3
 4220 001c 05D0     		beq	.L275
 4221 001e 254A     		ldr	r2, .L280+8
 4222 0020 254B     		ldr	r3, .L280+12
 4223 0022 101C     		mov	r0, r2
 4224 0024 191C     		mov	r1, r3
 4225 0026 FFF7FEFF 		bl	assert_failed
 4226              	.L275:
1768:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_REQUEST(USART_Request));
 4227              		.loc 1 1768 0 is_stmt 1
 4228 002a BB68     		ldr	r3, [r7, #8]
 4229 002c 102B     		cmp	r3, #16
 4230 002e 12D0     		beq	.L276
 4231              		.loc 1 1768 0 is_stmt 0 discriminator 1
 4232 0030 BB68     		ldr	r3, [r7, #8]
 4233 0032 082B     		cmp	r3, #8
 4234 0034 0FD0     		beq	.L276
 4235 0036 BB68     		ldr	r3, [r7, #8]
 4236 0038 042B     		cmp	r3, #4
 4237 003a 0CD0     		beq	.L276
 4238 003c BB68     		ldr	r3, [r7, #8]
 4239 003e 022B     		cmp	r3, #2
 4240 0040 09D0     		beq	.L276
 4241 0042 BB68     		ldr	r3, [r7, #8]
 4242 0044 012B     		cmp	r3, #1
 4243 0046 06D0     		beq	.L276
 4244 0048 1A4A     		ldr	r2, .L280+8
 4245 004a DD23     		mov	r3, #221
 4246 004c DB00     		lsl	r3, r3, #3
 4247 004e 101C     		mov	r0, r2
 4248 0050 191C     		mov	r1, r3
 4249 0052 FFF7FEFF 		bl	assert_failed
 4250              	.L276:
1769:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 4251              		.loc 1 1769 0 is_stmt 1
 4252 0056 FB1D     		add	r3, r7, #7
 4253 0058 1B78     		ldrb	r3, [r3]
 4254 005a 002B     		cmp	r3, #0
 4255 005c 09D0     		beq	.L277
 4256              		.loc 1 1769 0 is_stmt 0 discriminator 1
 4257 005e FB1D     		add	r3, r7, #7
 4258 0060 1B78     		ldrb	r3, [r3]
 4259 0062 012B     		cmp	r3, #1
 4260 0064 05D0     		beq	.L277
 4261 0066 134A     		ldr	r2, .L280+8
 4262 0068 144B     		ldr	r3, .L280+16
 4263 006a 101C     		mov	r0, r2
 4264 006c 191C     		mov	r1, r3
 4265 006e FFF7FEFF 		bl	assert_failed
 4266              	.L277:
1770:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1771:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 4267              		.loc 1 1771 0 is_stmt 1
 4268 0072 FB1D     		add	r3, r7, #7
 4269 0074 1B78     		ldrb	r3, [r3]
 4270 0076 002B     		cmp	r3, #0
 4271 0078 09D0     		beq	.L278
1772:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1773:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
1774:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register.*/
1775:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       USARTx->RQR |= USART_Request;
 4272              		.loc 1 1775 0
 4273 007a FB68     		ldr	r3, [r7, #12]
 4274 007c 1B8B     		ldrh	r3, [r3, #24]
 4275 007e 9AB2     		uxth	r2, r3
 4276 0080 BB68     		ldr	r3, [r7, #8]
 4277 0082 9BB2     		uxth	r3, r3
 4278 0084 1343     		orr	r3, r2
 4279 0086 9AB2     		uxth	r2, r3
 4280 0088 FB68     		ldr	r3, [r7, #12]
 4281 008a 1A83     		strh	r2, [r3, #24]
 4282 008c 0AE0     		b	.L274
 4283              	.L278:
1776:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1777:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1778:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1779:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
1780:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register.*/
1781:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->RQR &= (uint32_t)~USART_Request;
 4284              		.loc 1 1781 0
 4285 008e FB68     		ldr	r3, [r7, #12]
 4286 0090 1B8B     		ldrh	r3, [r3, #24]
 4287 0092 9BB2     		uxth	r3, r3
 4288 0094 BA68     		ldr	r2, [r7, #8]
 4289 0096 92B2     		uxth	r2, r2
 4290 0098 D243     		mvn	r2, r2
 4291 009a 92B2     		uxth	r2, r2
 4292 009c 1340     		and	r3, r2
 4293 009e 9AB2     		uxth	r2, r3
 4294 00a0 FB68     		ldr	r3, [r7, #12]
 4295 00a2 1A83     		strh	r2, [r3, #24]
 4296              	.L274:
1782:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1783:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 4297              		.loc 1 1783 0
 4298 00a4 BD46     		mov	sp, r7
 4299 00a6 04B0     		add	sp, sp, #16
 4300              		@ sp needed
 4301 00a8 80BD     		pop	{r7, pc}
 4302              	.L281:
 4303 00aa C046     		.align	2
 4304              	.L280:
 4305 00ac 00380140 		.word	1073821696
 4306 00b0 00440040 		.word	1073759232
 4307 00b4 00000000 		.word	.LC0
 4308 00b8 E7060000 		.word	1767
 4309 00bc E9060000 		.word	1769
 4310              		.cfi_endproc
 4311              	.LFE76:
 4313              		.section	.text.USART_OverrunDetectionConfig,"ax",%progbits
 4314              		.align	2
 4315              		.global	USART_OverrunDetectionConfig
 4316              		.code	16
 4317              		.thumb_func
 4319              	USART_OverrunDetectionConfig:
 4320              	.LFB77:
1784:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1785:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1786:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's Overrun detection.
1787:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1788:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_OVRDetection: specifies the OVR detection status in case of OVR error.
1789:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
1790:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_OVRDetection_Enable: OVR error detection enabled when the USART OVR error 
1791:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          is asserted.
1792:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_OVRDetection_Disable: OVR error detection disabled when the USART OVR error 
1793:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          is asserted.
1794:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1795:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1796:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection)
1797:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 4321              		.loc 1 1797 0
 4322              		.cfi_startproc
 4323 0000 80B5     		push	{r7, lr}
 4324              		.cfi_def_cfa_offset 8
 4325              		.cfi_offset 7, -8
 4326              		.cfi_offset 14, -4
 4327 0002 82B0     		sub	sp, sp, #8
 4328              		.cfi_def_cfa_offset 16
 4329 0004 00AF     		add	r7, sp, #0
 4330              		.cfi_def_cfa_register 7
 4331 0006 7860     		str	r0, [r7, #4]
 4332 0008 3960     		str	r1, [r7]
1798:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1799:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 4333              		.loc 1 1799 0
 4334 000a 7A68     		ldr	r2, [r7, #4]
 4335 000c 154B     		ldr	r3, .L285
 4336 000e 9A42     		cmp	r2, r3
 4337 0010 09D0     		beq	.L283
 4338              		.loc 1 1799 0 is_stmt 0 discriminator 1
 4339 0012 7A68     		ldr	r2, [r7, #4]
 4340 0014 144B     		ldr	r3, .L285+4
 4341 0016 9A42     		cmp	r2, r3
 4342 0018 05D0     		beq	.L283
 4343 001a 144A     		ldr	r2, .L285+8
 4344 001c 144B     		ldr	r3, .L285+12
 4345 001e 101C     		mov	r0, r2
 4346 0020 191C     		mov	r1, r3
 4347 0022 FFF7FEFF 		bl	assert_failed
 4348              	.L283:
1800:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
 4349              		.loc 1 1800 0 is_stmt 1
 4350 0026 3B68     		ldr	r3, [r7]
 4351 0028 002B     		cmp	r3, #0
 4352 002a 0BD0     		beq	.L284
 4353              		.loc 1 1800 0 is_stmt 0 discriminator 1
 4354 002c 3A68     		ldr	r2, [r7]
 4355 002e 8023     		mov	r3, #128
 4356 0030 5B01     		lsl	r3, r3, #5
 4357 0032 9A42     		cmp	r2, r3
 4358 0034 06D0     		beq	.L284
 4359 0036 0D4A     		ldr	r2, .L285+8
 4360 0038 E123     		mov	r3, #225
 4361 003a DB00     		lsl	r3, r3, #3
 4362 003c 101C     		mov	r0, r2
 4363 003e 191C     		mov	r1, r3
 4364 0040 FFF7FEFF 		bl	assert_failed
 4365              	.L284:
1801:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1802:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the OVR detection bit */
1803:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 4366              		.loc 1 1803 0 is_stmt 1
 4367 0044 7B68     		ldr	r3, [r7, #4]
 4368 0046 9A68     		ldr	r2, [r3, #8]
 4369 0048 0A4B     		ldr	r3, .L285+16
 4370 004a 1A40     		and	r2, r3
 4371 004c 7B68     		ldr	r3, [r7, #4]
 4372 004e 9A60     		str	r2, [r3, #8]
1804:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the OVR detection bit */
1805:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_OVRDetection;
 4373              		.loc 1 1805 0
 4374 0050 7B68     		ldr	r3, [r7, #4]
 4375 0052 9A68     		ldr	r2, [r3, #8]
 4376 0054 3B68     		ldr	r3, [r7]
 4377 0056 1A43     		orr	r2, r3
 4378 0058 7B68     		ldr	r3, [r7, #4]
 4379 005a 9A60     		str	r2, [r3, #8]
1806:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 4380              		.loc 1 1806 0
 4381 005c BD46     		mov	sp, r7
 4382 005e 02B0     		add	sp, sp, #8
 4383              		@ sp needed
 4384 0060 80BD     		pop	{r7, pc}
 4385              	.L286:
 4386 0062 C046     		.align	2
 4387              	.L285:
 4388 0064 00380140 		.word	1073821696
 4389 0068 00440040 		.word	1073759232
 4390 006c 00000000 		.word	.LC0
 4391 0070 07070000 		.word	1799
 4392 0074 FFEFFFFF 		.word	-4097
 4393              		.cfi_endproc
 4394              	.LFE77:
 4396              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 4397              		.align	2
 4398              		.global	USART_GetFlagStatus
 4399              		.code	16
 4400              		.thumb_func
 4402              	USART_GetFlagStatus:
 4403              	.LFB78:
1807:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1808:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1809:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1810:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1811:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1812:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1813:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_REACK:  Receive Enable acknowledge flag.
1814:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_TEACK:  Transmit Enable acknowledge flag.
1815:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_WUF:  Wake up flag.
1816:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_RWU:  Receive Wake up flag.
1817:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_SBK:  Send Break flag.
1818:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_CMF:  Character match flag.
1819:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_BUSY:  Busy flag.
1820:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_ABRF:  Auto baud rate flag.
1821:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_ABRE:  Auto baud rate error flag.
1822:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_EOBF:  End of block flag.
1823:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_RTOF:  Receive time out flag.
1824:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_nCTSS:  Inverted nCTS input bit status.
1825:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_CTS:  CTS Change flag.
1826:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_LBD:  LIN Break detection flag.
1827:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_TXE:  Transmit data register empty flag.
1828:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_TC:  Transmission Complete flag.
1829:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_RXNE:  Receive data register not empty flag.
1830:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_IDLE:  Idle Line detection flag.
1831:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_ORE:  OverRun Error flag.
1832:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_NE:  Noise Error flag.
1833:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_FE:  Framing Error flag.
1834:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_PE:  Parity Error flag.
1835:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1836:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1837:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
1838:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 4404              		.loc 1 1838 0
 4405              		.cfi_startproc
 4406 0000 80B5     		push	{r7, lr}
 4407              		.cfi_def_cfa_offset 8
 4408              		.cfi_offset 7, -8
 4409              		.cfi_offset 14, -4
 4410 0002 84B0     		sub	sp, sp, #16
 4411              		.cfi_def_cfa_offset 24
 4412 0004 00AF     		add	r7, sp, #0
 4413              		.cfi_def_cfa_register 7
 4414 0006 7860     		str	r0, [r7, #4]
 4415 0008 3960     		str	r1, [r7]
1839:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   FlagStatus bitstatus = RESET;
 4416              		.loc 1 1839 0
 4417 000a 3B1C     		mov	r3, r7
 4418 000c 0F33     		add	r3, r3, #15
 4419 000e 0022     		mov	r2, #0
 4420 0010 1A70     		strb	r2, [r3]
1840:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1841:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 4421              		.loc 1 1841 0
 4422 0012 7A68     		ldr	r2, [r7, #4]
 4423 0014 444B     		ldr	r3, .L293
 4424 0016 9A42     		cmp	r2, r3
 4425 0018 09D0     		beq	.L288
 4426              		.loc 1 1841 0 is_stmt 0 discriminator 1
 4427 001a 7A68     		ldr	r2, [r7, #4]
 4428 001c 434B     		ldr	r3, .L293+4
 4429 001e 9A42     		cmp	r2, r3
 4430 0020 05D0     		beq	.L288
 4431 0022 434A     		ldr	r2, .L293+8
 4432 0024 434B     		ldr	r3, .L293+12
 4433 0026 101C     		mov	r0, r2
 4434 0028 191C     		mov	r1, r3
 4435 002a FFF7FEFF 		bl	assert_failed
 4436              	.L288:
1842:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
 4437              		.loc 1 1842 0 is_stmt 1
 4438 002e 3B68     		ldr	r3, [r7]
 4439 0030 012B     		cmp	r3, #1
 4440 0032 00D1     		bne	.LCB4087
 4441 0034 62E0     		b	.L289	@long jump
 4442              	.LCB4087:
 4443              		.loc 1 1842 0 is_stmt 0 discriminator 1
 4444 0036 3B68     		ldr	r3, [r7]
 4445 0038 802B     		cmp	r3, #128
 4446 003a 00D1     		bne	.LCB4090
 4447 003c 5EE0     		b	.L289	@long jump
 4448              	.LCB4090:
 4449 003e 3B68     		ldr	r3, [r7]
 4450 0040 402B     		cmp	r3, #64
 4451 0042 00D1     		bne	.LCB4093
 4452 0044 5AE0     		b	.L289	@long jump
 4453              	.LCB4093:
 4454 0046 3B68     		ldr	r3, [r7]
 4455 0048 202B     		cmp	r3, #32
 4456 004a 57D0     		beq	.L289
 4457 004c 3B68     		ldr	r3, [r7]
 4458 004e 102B     		cmp	r3, #16
 4459 0050 54D0     		beq	.L289
 4460 0052 3A68     		ldr	r2, [r7]
 4461 0054 8023     		mov	r3, #128
 4462 0056 5B00     		lsl	r3, r3, #1
 4463 0058 9A42     		cmp	r2, r3
 4464 005a 4FD0     		beq	.L289
 4465 005c 3A68     		ldr	r2, [r7]
 4466 005e 8023     		mov	r3, #128
 4467 0060 9B00     		lsl	r3, r3, #2
 4468 0062 9A42     		cmp	r2, r3
 4469 0064 4AD0     		beq	.L289
 4470 0066 3B68     		ldr	r3, [r7]
 4471 0068 082B     		cmp	r3, #8
 4472 006a 47D0     		beq	.L289
 4473 006c 3B68     		ldr	r3, [r7]
 4474 006e 042B     		cmp	r3, #4
 4475 0070 44D0     		beq	.L289
 4476 0072 3B68     		ldr	r3, [r7]
 4477 0074 022B     		cmp	r3, #2
 4478 0076 41D0     		beq	.L289
 4479 0078 3A68     		ldr	r2, [r7]
 4480 007a 8023     		mov	r3, #128
 4481 007c DB00     		lsl	r3, r3, #3
 4482 007e 9A42     		cmp	r2, r3
 4483 0080 3CD0     		beq	.L289
 4484 0082 3A68     		ldr	r2, [r7]
 4485 0084 8023     		mov	r3, #128
 4486 0086 1B01     		lsl	r3, r3, #4
 4487 0088 9A42     		cmp	r2, r3
 4488 008a 37D0     		beq	.L289
 4489 008c 3A68     		ldr	r2, [r7]
 4490 008e 8023     		mov	r3, #128
 4491 0090 5B01     		lsl	r3, r3, #5
 4492 0092 9A42     		cmp	r2, r3
 4493 0094 32D0     		beq	.L289
 4494 0096 3A68     		ldr	r2, [r7]
 4495 0098 8023     		mov	r3, #128
 4496 009a DB01     		lsl	r3, r3, #7
 4497 009c 9A42     		cmp	r2, r3
 4498 009e 2DD0     		beq	.L289
 4499 00a0 3A68     		ldr	r2, [r7]
 4500 00a2 8023     		mov	r3, #128
 4501 00a4 1B02     		lsl	r3, r3, #8
 4502 00a6 9A42     		cmp	r2, r3
 4503 00a8 28D0     		beq	.L289
 4504 00aa 3A68     		ldr	r2, [r7]
 4505 00ac 8023     		mov	r3, #128
 4506 00ae 5B02     		lsl	r3, r3, #9
 4507 00b0 9A42     		cmp	r2, r3
 4508 00b2 23D0     		beq	.L289
 4509 00b4 3A68     		ldr	r2, [r7]
 4510 00b6 8023     		mov	r3, #128
 4511 00b8 9B02     		lsl	r3, r3, #10
 4512 00ba 9A42     		cmp	r2, r3
 4513 00bc 1ED0     		beq	.L289
 4514 00be 3A68     		ldr	r2, [r7]
 4515 00c0 8023     		mov	r3, #128
 4516 00c2 DB02     		lsl	r3, r3, #11
 4517 00c4 9A42     		cmp	r2, r3
 4518 00c6 19D0     		beq	.L289
 4519 00c8 3A68     		ldr	r2, [r7]
 4520 00ca 8023     		mov	r3, #128
 4521 00cc 1B03     		lsl	r3, r3, #12
 4522 00ce 9A42     		cmp	r2, r3
 4523 00d0 14D0     		beq	.L289
 4524 00d2 3A68     		ldr	r2, [r7]
 4525 00d4 8023     		mov	r3, #128
 4526 00d6 5B03     		lsl	r3, r3, #13
 4527 00d8 9A42     		cmp	r2, r3
 4528 00da 0FD0     		beq	.L289
 4529 00dc 3A68     		ldr	r2, [r7]
 4530 00de 8023     		mov	r3, #128
 4531 00e0 9B03     		lsl	r3, r3, #14
 4532 00e2 9A42     		cmp	r2, r3
 4533 00e4 0AD0     		beq	.L289
 4534 00e6 3A68     		ldr	r2, [r7]
 4535 00e8 8023     		mov	r3, #128
 4536 00ea DB03     		lsl	r3, r3, #15
 4537 00ec 9A42     		cmp	r2, r3
 4538 00ee 05D0     		beq	.L289
 4539 00f0 0F4A     		ldr	r2, .L293+8
 4540 00f2 114B     		ldr	r3, .L293+16
 4541 00f4 101C     		mov	r0, r2
 4542 00f6 191C     		mov	r1, r3
 4543 00f8 FFF7FEFF 		bl	assert_failed
 4544              	.L289:
1843:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1844:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 4545              		.loc 1 1844 0 is_stmt 1
 4546 00fc 7B68     		ldr	r3, [r7, #4]
 4547 00fe DB69     		ldr	r3, [r3, #28]
 4548 0100 3A68     		ldr	r2, [r7]
 4549 0102 1340     		and	r3, r2
 4550 0104 04D0     		beq	.L290
1845:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1846:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = SET;
 4551              		.loc 1 1846 0
 4552 0106 3B1C     		mov	r3, r7
 4553 0108 0F33     		add	r3, r3, #15
 4554 010a 0122     		mov	r2, #1
 4555 010c 1A70     		strb	r2, [r3]
 4556 010e 03E0     		b	.L291
 4557              	.L290:
1847:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1848:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1849:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1850:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = RESET;
 4558              		.loc 1 1850 0
 4559 0110 3B1C     		mov	r3, r7
 4560 0112 0F33     		add	r3, r3, #15
 4561 0114 0022     		mov	r2, #0
 4562 0116 1A70     		strb	r2, [r3]
 4563              	.L291:
1851:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1852:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return bitstatus;
 4564              		.loc 1 1852 0
 4565 0118 3B1C     		mov	r3, r7
 4566 011a 0F33     		add	r3, r3, #15
 4567 011c 1B78     		ldrb	r3, [r3]
1853:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 4568              		.loc 1 1853 0
 4569 011e 181C     		mov	r0, r3
 4570 0120 BD46     		mov	sp, r7
 4571 0122 04B0     		add	sp, sp, #16
 4572              		@ sp needed
 4573 0124 80BD     		pop	{r7, pc}
 4574              	.L294:
 4575 0126 C046     		.align	2
 4576              	.L293:
 4577 0128 00380140 		.word	1073821696
 4578 012c 00440040 		.word	1073759232
 4579 0130 00000000 		.word	.LC0
 4580 0134 31070000 		.word	1841
 4581 0138 32070000 		.word	1842
 4582              		.cfi_endproc
 4583              	.LFE78:
 4585              		.section	.text.USART_ClearFlag,"ax",%progbits
 4586              		.align	2
 4587              		.global	USART_ClearFlag
 4588              		.code	16
 4589              		.thumb_func
 4591              	USART_ClearFlag:
 4592              	.LFB79:
1854:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1855:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1856:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1857:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1858:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1859:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
1860:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_WUF:  Wake up flag.
1861:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_CMF:  Character match flag.
1862:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_EOBF:  End of block flag.
1863:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_RTOF:  Receive time out flag.
1864:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_CTS:  CTS Change flag.
1865:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_LBD:  LIN Break detection flag.
1866:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_TC:  Transmission Complete flag.
1867:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_IDLE:  IDLE line detected flag.
1868:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_ORE:  OverRun Error flag.
1869:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_NE: Noise Error flag.
1870:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_FE: Framing Error flag.
1871:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_PE:   Parity Errorflag.
1872:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   
1873:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     RXNE pending bit is cleared by a read to the USART_RDR register 
1874:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_ReceiveData()) or by writing 1 to the RXFRQ in the register
1875:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           USART_RQR (USART_RequestCmd()).
1876:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TC flag can be also cleared by software sequence: a read operation
1877:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           to USART_SR register (USART_GetFlagStatus()) followed by a write 
1878:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           operation to USART_TDR register (USART_SendData()).
1879:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TXE flag is cleared by a write to the USART_TDR register (USART_SendData())
1880:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           or by writing 1 to the TXFRQ in the register USART_RQR (USART_RequestCmd()).
1881:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
1882:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_RequestCmd()).
1883:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1884:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1885:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
1886:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 4593              		.loc 1 1886 0
 4594              		.cfi_startproc
 4595 0000 80B5     		push	{r7, lr}
 4596              		.cfi_def_cfa_offset 8
 4597              		.cfi_offset 7, -8
 4598              		.cfi_offset 14, -4
 4599 0002 82B0     		sub	sp, sp, #8
 4600              		.cfi_def_cfa_offset 16
 4601 0004 00AF     		add	r7, sp, #0
 4602              		.cfi_def_cfa_register 7
 4603 0006 7860     		str	r0, [r7, #4]
 4604 0008 3960     		str	r1, [r7]
1887:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1888:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 4605              		.loc 1 1888 0
 4606 000a 7A68     		ldr	r2, [r7, #4]
 4607 000c 094B     		ldr	r3, .L297
 4608 000e 9A42     		cmp	r2, r3
 4609 0010 0AD0     		beq	.L296
 4610              		.loc 1 1888 0 is_stmt 0 discriminator 1
 4611 0012 7A68     		ldr	r2, [r7, #4]
 4612 0014 084B     		ldr	r3, .L297+4
 4613 0016 9A42     		cmp	r2, r3
 4614 0018 06D0     		beq	.L296
 4615 001a 084A     		ldr	r2, .L297+8
 4616 001c EC23     		mov	r3, #236
 4617 001e DB00     		lsl	r3, r3, #3
 4618 0020 101C     		mov	r0, r2
 4619 0022 191C     		mov	r1, r3
 4620 0024 FFF7FEFF 		bl	assert_failed
 4621              	.L296:
1889:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   //assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1890:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****      
1891:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->ICR = USART_FLAG;
 4622              		.loc 1 1891 0 is_stmt 1
 4623 0028 7B68     		ldr	r3, [r7, #4]
 4624 002a 3A68     		ldr	r2, [r7]
 4625 002c 1A62     		str	r2, [r3, #32]
1892:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 4626              		.loc 1 1892 0
 4627 002e BD46     		mov	sp, r7
 4628 0030 02B0     		add	sp, sp, #8
 4629              		@ sp needed
 4630 0032 80BD     		pop	{r7, pc}
 4631              	.L298:
 4632              		.align	2
 4633              	.L297:
 4634 0034 00380140 		.word	1073821696
 4635 0038 00440040 		.word	1073759232
 4636 003c 00000000 		.word	.LC0
 4637              		.cfi_endproc
 4638              	.LFE79:
 4640              		.section	.text.USART_GetITStatus,"ax",%progbits
 4641              		.align	2
 4642              		.global	USART_GetITStatus
 4643              		.code	16
 4644              		.thumb_func
 4646              	USART_GetITStatus:
 4647              	.LFB80:
1893:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1894:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1895:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1896:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1897:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1898:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1899:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_WU:  Wake up interrupt.
1900:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_CM:  Character match interrupt.
1901:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_EOB:  End of block interrupt.
1902:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_RTO:  Receive time out interrupt.
1903:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt.
1904:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt.
1905:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_TXE:  Tansmit Data Register empty interrupt.
1906:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_TC:  Transmission complete interrupt.
1907:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_RXNE:  Receive Data register not empty interrupt.
1908:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_IDLE:  Idle line detection interrupt.
1909:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_ORE:  OverRun Error interrupt.
1910:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_NE:  Noise Error interrupt.
1911:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_FE:  Framing Error interrupt.
1912:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_PE:  Parity Error interrupt.
1913:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1914:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1915:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
1916:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 4648              		.loc 1 1916 0
 4649              		.cfi_startproc
 4650 0000 80B5     		push	{r7, lr}
 4651              		.cfi_def_cfa_offset 8
 4652              		.cfi_offset 7, -8
 4653              		.cfi_offset 14, -4
 4654 0002 86B0     		sub	sp, sp, #24
 4655              		.cfi_def_cfa_offset 32
 4656 0004 00AF     		add	r7, sp, #0
 4657              		.cfi_def_cfa_register 7
 4658 0006 7860     		str	r0, [r7, #4]
 4659 0008 3960     		str	r1, [r7]
1917:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 4660              		.loc 1 1917 0
 4661 000a 0023     		mov	r3, #0
 4662 000c FB60     		str	r3, [r7, #12]
 4663 000e 0023     		mov	r3, #0
 4664 0010 7B61     		str	r3, [r7, #20]
 4665 0012 0023     		mov	r3, #0
 4666 0014 BB60     		str	r3, [r7, #8]
1918:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ITStatus bitstatus = RESET;
 4667              		.loc 1 1918 0
 4668 0016 3B1C     		mov	r3, r7
 4669 0018 1333     		add	r3, r3, #19
 4670 001a 0022     		mov	r2, #0
 4671 001c 1A70     		strb	r2, [r3]
1919:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1920:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 4672              		.loc 1 1920 0
 4673 001e 7A68     		ldr	r2, [r7, #4]
 4674 0020 4B4B     		ldr	r3, .L308
 4675 0022 9A42     		cmp	r2, r3
 4676 0024 0AD0     		beq	.L300
 4677              		.loc 1 1920 0 is_stmt 0 discriminator 1
 4678 0026 7A68     		ldr	r2, [r7, #4]
 4679 0028 4A4B     		ldr	r3, .L308+4
 4680 002a 9A42     		cmp	r2, r3
 4681 002c 06D0     		beq	.L300
 4682 002e 4A4A     		ldr	r2, .L308+8
 4683 0030 F023     		mov	r3, #240
 4684 0032 DB00     		lsl	r3, r3, #3
 4685 0034 101C     		mov	r0, r2
 4686 0036 191C     		mov	r1, r3
 4687 0038 FFF7FEFF 		bl	assert_failed
 4688              	.L300:
1921:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
 4689              		.loc 1 1921 0 is_stmt 1
 4690 003c 3A68     		ldr	r2, [r7]
 4691 003e 8423     		mov	r3, #132
 4692 0040 5B00     		lsl	r3, r3, #1
 4693 0042 9A42     		cmp	r2, r3
 4694 0044 39D0     		beq	.L301
 4695              		.loc 1 1921 0 is_stmt 0 discriminator 1
 4696 0046 3A68     		ldr	r2, [r7]
 4697 0048 444B     		ldr	r3, .L308+12
 4698 004a 9A42     		cmp	r2, r3
 4699 004c 35D0     		beq	.L301
 4700 004e 3A68     		ldr	r2, [r7]
 4701 0050 434B     		ldr	r3, .L308+16
 4702 0052 9A42     		cmp	r2, r3
 4703 0054 31D0     		beq	.L301
 4704 0056 3A68     		ldr	r2, [r7]
 4705 0058 424B     		ldr	r3, .L308+20
 4706 005a 9A42     		cmp	r2, r3
 4707 005c 2DD0     		beq	.L301
 4708 005e 3A68     		ldr	r2, [r7]
 4709 0060 414B     		ldr	r3, .L308+24
 4710 0062 9A42     		cmp	r2, r3
 4711 0064 29D0     		beq	.L301
 4712 0066 3A68     		ldr	r2, [r7]
 4713 0068 404B     		ldr	r3, .L308+28
 4714 006a 9A42     		cmp	r2, r3
 4715 006c 25D0     		beq	.L301
 4716 006e 3A68     		ldr	r2, [r7]
 4717 0070 3F4B     		ldr	r3, .L308+32
 4718 0072 9A42     		cmp	r2, r3
 4719 0074 21D0     		beq	.L301
 4720 0076 3A68     		ldr	r2, [r7]
 4721 0078 3E4B     		ldr	r3, .L308+36
 4722 007a 9A42     		cmp	r2, r3
 4723 007c 1DD0     		beq	.L301
 4724 007e 3A68     		ldr	r2, [r7]
 4725 0080 3D4B     		ldr	r3, .L308+40
 4726 0082 9A42     		cmp	r2, r3
 4727 0084 19D0     		beq	.L301
 4728 0086 3A68     		ldr	r2, [r7]
 4729 0088 3C4B     		ldr	r3, .L308+44
 4730 008a 9A42     		cmp	r2, r3
 4731 008c 15D0     		beq	.L301
 4732 008e 3A68     		ldr	r2, [r7]
 4733 0090 3B4B     		ldr	r3, .L308+48
 4734 0092 9A42     		cmp	r2, r3
 4735 0094 11D0     		beq	.L301
 4736 0096 3A68     		ldr	r2, [r7]
 4737 0098 3A4B     		ldr	r3, .L308+52
 4738 009a 9A42     		cmp	r2, r3
 4739 009c 0DD0     		beq	.L301
 4740 009e 3A68     		ldr	r2, [r7]
 4741 00a0 394B     		ldr	r3, .L308+56
 4742 00a2 9A42     		cmp	r2, r3
 4743 00a4 09D0     		beq	.L301
 4744 00a6 3A68     		ldr	r2, [r7]
 4745 00a8 384B     		ldr	r3, .L308+60
 4746 00aa 9A42     		cmp	r2, r3
 4747 00ac 05D0     		beq	.L301
 4748 00ae 2A4A     		ldr	r2, .L308+8
 4749 00b0 374B     		ldr	r3, .L308+64
 4750 00b2 101C     		mov	r0, r2
 4751 00b4 191C     		mov	r1, r3
 4752 00b6 FFF7FEFF 		bl	assert_failed
 4753              	.L301:
1922:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1923:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the USART register index */
1924:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 4754              		.loc 1 1924 0 is_stmt 1
 4755 00ba 3B68     		ldr	r3, [r7]
 4756 00bc 9BB2     		uxth	r3, r3
 4757 00be 1B0A     		lsr	r3, r3, #8
 4758 00c0 9BB2     		uxth	r3, r3
 4759 00c2 BB60     		str	r3, [r7, #8]
1925:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the interrupt position */
1926:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = USART_IT & IT_MASK;
 4760              		.loc 1 1926 0
 4761 00c4 3A68     		ldr	r2, [r7]
 4762 00c6 FF23     		mov	r3, #255
 4763 00c8 1340     		and	r3, r2
 4764 00ca 7B61     		str	r3, [r7, #20]
1927:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 4765              		.loc 1 1927 0
 4766 00cc 7B69     		ldr	r3, [r7, #20]
 4767 00ce 0122     		mov	r2, #1
 4768 00d0 111C     		mov	r1, r2
 4769 00d2 9940     		lsl	r1, r1, r3
 4770 00d4 0B1C     		mov	r3, r1
 4771 00d6 7B61     		str	r3, [r7, #20]
1928:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1929:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 4772              		.loc 1 1929 0
 4773 00d8 BB68     		ldr	r3, [r7, #8]
 4774 00da 012B     		cmp	r3, #1
 4775 00dc 05D1     		bne	.L302
1930:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1931:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     itmask &= USARTx->CR1;
 4776              		.loc 1 1931 0
 4777 00de 7B68     		ldr	r3, [r7, #4]
 4778 00e0 1A68     		ldr	r2, [r3]
 4779 00e2 7B69     		ldr	r3, [r7, #20]
 4780 00e4 1340     		and	r3, r2
 4781 00e6 7B61     		str	r3, [r7, #20]
 4782 00e8 0DE0     		b	.L303
 4783              	.L302:
1932:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1933:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 4784              		.loc 1 1933 0
 4785 00ea BB68     		ldr	r3, [r7, #8]
 4786 00ec 022B     		cmp	r3, #2
 4787 00ee 05D1     		bne	.L304
1934:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1935:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     itmask &= USARTx->CR2;
 4788              		.loc 1 1935 0
 4789 00f0 7B68     		ldr	r3, [r7, #4]
 4790 00f2 5A68     		ldr	r2, [r3, #4]
 4791 00f4 7B69     		ldr	r3, [r7, #20]
 4792 00f6 1340     		and	r3, r2
 4793 00f8 7B61     		str	r3, [r7, #20]
 4794 00fa 04E0     		b	.L303
 4795              	.L304:
1936:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1937:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* The IT  is in CR3 register */
1938:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1939:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     itmask &= USARTx->CR3;
 4796              		.loc 1 1939 0
 4797 00fc 7B68     		ldr	r3, [r7, #4]
 4798 00fe 9A68     		ldr	r2, [r3, #8]
 4799 0100 7B69     		ldr	r3, [r7, #20]
 4800 0102 1340     		and	r3, r2
 4801 0104 7B61     		str	r3, [r7, #20]
 4802              	.L303:
1940:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1941:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1942:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = USART_IT >> 0x10;
 4803              		.loc 1 1942 0
 4804 0106 3B68     		ldr	r3, [r7]
 4805 0108 1B0C     		lsr	r3, r3, #16
 4806 010a FB60     		str	r3, [r7, #12]
1943:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 4807              		.loc 1 1943 0
 4808 010c FB68     		ldr	r3, [r7, #12]
 4809 010e 0122     		mov	r2, #1
 4810 0110 111C     		mov	r1, r2
 4811 0112 9940     		lsl	r1, r1, r3
 4812 0114 0B1C     		mov	r3, r1
 4813 0116 FB60     		str	r3, [r7, #12]
1944:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos &= USARTx->ISR;
 4814              		.loc 1 1944 0
 4815 0118 7B68     		ldr	r3, [r7, #4]
 4816 011a DA69     		ldr	r2, [r3, #28]
 4817 011c FB68     		ldr	r3, [r7, #12]
 4818 011e 1340     		and	r3, r2
 4819 0120 FB60     		str	r3, [r7, #12]
1945:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 4820              		.loc 1 1945 0
 4821 0122 7B69     		ldr	r3, [r7, #20]
 4822 0124 002B     		cmp	r3, #0
 4823 0126 07D0     		beq	.L305
 4824              		.loc 1 1945 0 is_stmt 0 discriminator 1
 4825 0128 FB68     		ldr	r3, [r7, #12]
 4826 012a 002B     		cmp	r3, #0
 4827 012c 04D0     		beq	.L305
1946:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1947:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = SET;
 4828              		.loc 1 1947 0 is_stmt 1
 4829 012e 3B1C     		mov	r3, r7
 4830 0130 1333     		add	r3, r3, #19
 4831 0132 0122     		mov	r2, #1
 4832 0134 1A70     		strb	r2, [r3]
 4833 0136 03E0     		b	.L306
 4834              	.L305:
1948:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1949:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1950:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1951:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = RESET;
 4835              		.loc 1 1951 0
 4836 0138 3B1C     		mov	r3, r7
 4837 013a 1333     		add	r3, r3, #19
 4838 013c 0022     		mov	r2, #0
 4839 013e 1A70     		strb	r2, [r3]
 4840              	.L306:
1952:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1953:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1954:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return bitstatus;  
 4841              		.loc 1 1954 0
 4842 0140 3B1C     		mov	r3, r7
 4843 0142 1333     		add	r3, r3, #19
 4844 0144 1B78     		ldrb	r3, [r3]
1955:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 4845              		.loc 1 1955 0
 4846 0146 181C     		mov	r0, r3
 4847 0148 BD46     		mov	sp, r7
 4848 014a 06B0     		add	sp, sp, #24
 4849              		@ sp needed
 4850 014c 80BD     		pop	{r7, pc}
 4851              	.L309:
 4852 014e C046     		.align	2
 4853              	.L308:
 4854 0150 00380140 		.word	1073821696
 4855 0154 00440040 		.word	1073759232
 4856 0158 00000000 		.word	.LC0
 4857 015c 07010700 		.word	459015
 4858 0160 06010600 		.word	393478
 4859 0164 05010500 		.word	327941
 4860 0168 04010400 		.word	262404
 4861 016c 06020800 		.word	524806
 4862 0170 0A030900 		.word	590602
 4863 0174 00030300 		.word	197376
 4864 0178 00030200 		.word	131840
 4865 017c 00030100 		.word	66304
 4866 0180 1A010B00 		.word	721178
 4867 0184 1B010C00 		.word	786715
 4868 0188 0E011100 		.word	1114382
 4869 018c 16031400 		.word	1311510
 4870 0190 81070000 		.word	1921
 4871              		.cfi_endproc
 4872              	.LFE80:
 4874              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 4875              		.align	2
 4876              		.global	USART_ClearITPendingBit
 4877              		.code	16
 4878              		.thumb_func
 4880              	USART_ClearITPendingBit:
 4881              	.LFB81:
1956:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1957:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1958:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1959:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1960:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1961:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1962:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_WU:  Wake up interrupt.
1963:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_CM:  Character match interrupt.
1964:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_EOB:  End of block interrupt.
1965:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_RTO:  Receive time out interrupt.
1966:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt.
1967:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt.
1968:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_TC:  Transmission complete interrupt.
1969:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_IDLE:  IDLE line detected interrupt.
1970:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_ORE:  OverRun Error interrupt.
1971:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_NE:  Noise Error interrupt.
1972:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_FE:  Framing Error interrupt.
1973:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_PE:  Parity Error interrupt.
1974:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
1975:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     RXNE pending bit is cleared by a read to the USART_RDR register 
1976:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_ReceiveData()) or by writing 1 to the RXFRQ in the register 
1977:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           USART_RQR (USART_RequestCmd()).
1978:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TC pending bit can be also cleared by software sequence: a read 
1979:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           operation to USART_SR register (USART_GetITStatus()) followed by  
1980:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           a write operation to USART_TDR register (USART_SendData()).
1981:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TXE pending bit is cleared by a write to the USART_TDR register 
1982:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_SendData()) or by writing 1 to the TXFRQ in the register 
1983:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           USART_RQR (USART_RequestCmd()).
1984:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1985:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1986:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
1987:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 4882              		.loc 1 1987 0
 4883              		.cfi_startproc
 4884 0000 80B5     		push	{r7, lr}
 4885              		.cfi_def_cfa_offset 8
 4886              		.cfi_offset 7, -8
 4887              		.cfi_offset 14, -4
 4888 0002 84B0     		sub	sp, sp, #16
 4889              		.cfi_def_cfa_offset 24
 4890 0004 00AF     		add	r7, sp, #0
 4891              		.cfi_def_cfa_register 7
 4892 0006 7860     		str	r0, [r7, #4]
 4893 0008 3960     		str	r1, [r7]
1988:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t bitpos = 0, itmask = 0;
 4894              		.loc 1 1988 0
 4895 000a 0023     		mov	r3, #0
 4896 000c FB60     		str	r3, [r7, #12]
 4897 000e 0023     		mov	r3, #0
 4898 0010 BB60     		str	r3, [r7, #8]
1989:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1990:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 4899              		.loc 1 1990 0
 4900 0012 7A68     		ldr	r2, [r7, #4]
 4901 0014 294B     		ldr	r3, .L313
 4902 0016 9A42     		cmp	r2, r3
 4903 0018 09D0     		beq	.L311
 4904              		.loc 1 1990 0 is_stmt 0 discriminator 1
 4905 001a 7A68     		ldr	r2, [r7, #4]
 4906 001c 284B     		ldr	r3, .L313+4
 4907 001e 9A42     		cmp	r2, r3
 4908 0020 05D0     		beq	.L311
 4909 0022 284A     		ldr	r2, .L313+8
 4910 0024 284B     		ldr	r3, .L313+12
 4911 0026 101C     		mov	r0, r2
 4912 0028 191C     		mov	r1, r3
 4913 002a FFF7FEFF 		bl	assert_failed
 4914              	.L311:
1991:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
 4915              		.loc 1 1991 0 is_stmt 1
 4916 002e 3A68     		ldr	r2, [r7]
 4917 0030 264B     		ldr	r3, .L313+16
 4918 0032 9A42     		cmp	r2, r3
 4919 0034 32D0     		beq	.L312
 4920              		.loc 1 1991 0 is_stmt 0 discriminator 1
 4921 0036 3A68     		ldr	r2, [r7]
 4922 0038 8423     		mov	r3, #132
 4923 003a 5B00     		lsl	r3, r3, #1
 4924 003c 9A42     		cmp	r2, r3
 4925 003e 2DD0     		beq	.L312
 4926 0040 3A68     		ldr	r2, [r7]
 4927 0042 234B     		ldr	r3, .L313+20
 4928 0044 9A42     		cmp	r2, r3
 4929 0046 29D0     		beq	.L312
 4930 0048 3A68     		ldr	r2, [r7]
 4931 004a 224B     		ldr	r3, .L313+24
 4932 004c 9A42     		cmp	r2, r3
 4933 004e 25D0     		beq	.L312
 4934 0050 3A68     		ldr	r2, [r7]
 4935 0052 214B     		ldr	r3, .L313+28
 4936 0054 9A42     		cmp	r2, r3
 4937 0056 21D0     		beq	.L312
 4938 0058 3A68     		ldr	r2, [r7]
 4939 005a 204B     		ldr	r3, .L313+32
 4940 005c 9A42     		cmp	r2, r3
 4941 005e 1DD0     		beq	.L312
 4942 0060 3A68     		ldr	r2, [r7]
 4943 0062 1F4B     		ldr	r3, .L313+36
 4944 0064 9A42     		cmp	r2, r3
 4945 0066 19D0     		beq	.L312
 4946 0068 3A68     		ldr	r2, [r7]
 4947 006a 1E4B     		ldr	r3, .L313+40
 4948 006c 9A42     		cmp	r2, r3
 4949 006e 15D0     		beq	.L312
 4950 0070 3A68     		ldr	r2, [r7]
 4951 0072 1D4B     		ldr	r3, .L313+44
 4952 0074 9A42     		cmp	r2, r3
 4953 0076 11D0     		beq	.L312
 4954 0078 3A68     		ldr	r2, [r7]
 4955 007a 1C4B     		ldr	r3, .L313+48
 4956 007c 9A42     		cmp	r2, r3
 4957 007e 0DD0     		beq	.L312
 4958 0080 3A68     		ldr	r2, [r7]
 4959 0082 1B4B     		ldr	r3, .L313+52
 4960 0084 9A42     		cmp	r2, r3
 4961 0086 09D0     		beq	.L312
 4962 0088 3A68     		ldr	r2, [r7]
 4963 008a 1A4B     		ldr	r3, .L313+56
 4964 008c 9A42     		cmp	r2, r3
 4965 008e 05D0     		beq	.L312
 4966 0090 0C4A     		ldr	r2, .L313+8
 4967 0092 194B     		ldr	r3, .L313+60
 4968 0094 101C     		mov	r0, r2
 4969 0096 191C     		mov	r1, r3
 4970 0098 FFF7FEFF 		bl	assert_failed
 4971              	.L312:
1992:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1993:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = USART_IT >> 0x10;
 4972              		.loc 1 1993 0 is_stmt 1
 4973 009c 3B68     		ldr	r3, [r7]
 4974 009e 1B0C     		lsr	r3, r3, #16
 4975 00a0 FB60     		str	r3, [r7, #12]
1994:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 4976              		.loc 1 1994 0
 4977 00a2 FB68     		ldr	r3, [r7, #12]
 4978 00a4 0122     		mov	r2, #1
 4979 00a6 111C     		mov	r1, r2
 4980 00a8 9940     		lsl	r1, r1, r3
 4981 00aa 0B1C     		mov	r3, r1
 4982 00ac BB60     		str	r3, [r7, #8]
1995:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->ICR = (uint32_t)itmask;
 4983              		.loc 1 1995 0
 4984 00ae 7B68     		ldr	r3, [r7, #4]
 4985 00b0 BA68     		ldr	r2, [r7, #8]
 4986 00b2 1A62     		str	r2, [r3, #32]
1996:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 4987              		.loc 1 1996 0
 4988 00b4 BD46     		mov	sp, r7
 4989 00b6 04B0     		add	sp, sp, #16
 4990              		@ sp needed
 4991 00b8 80BD     		pop	{r7, pc}
 4992              	.L314:
 4993 00ba C046     		.align	2
 4994              	.L313:
 4995 00bc 00380140 		.word	1073821696
 4996 00c0 00440040 		.word	1073759232
 4997 00c4 00000000 		.word	.LC0
 4998 00c8 C6070000 		.word	1990
 4999 00cc 06010600 		.word	393478
 5000 00d0 00030100 		.word	66304
 5001 00d4 00030200 		.word	131840
 5002 00d8 00030300 		.word	197376
 5003 00dc 04010400 		.word	262404
 5004 00e0 06020800 		.word	524806
 5005 00e4 0A030900 		.word	590602
 5006 00e8 1A010B00 		.word	721178
 5007 00ec 1B010C00 		.word	786715
 5008 00f0 0E011100 		.word	1114382
 5009 00f4 16031400 		.word	1311510
 5010 00f8 C7070000 		.word	1991
 5011              		.cfi_endproc
 5012              	.LFE81:
 5014              		.text
 5015              	.Letext0:
 5016              		.file 2 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/machine/_default_types
 5017              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/stdint.h"
 5018              		.file 4 "../../ext-src/CMSIS/ST/STM32F0xx/Include/stm32f0xx.h"
 5019              		.file 5 "../../ext-src/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_rcc.h"
 5020              		.file 6 "../../ext-src/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_usart.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_usart.c
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:18     .rodata:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:23     .text.USART_DeInit:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:28     .text.USART_DeInit:0000000000000000 USART_DeInit
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:102    .text.USART_DeInit:000000000000006c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:110    .text.USART_Init:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:115    .text.USART_Init:0000000000000000 USART_Init
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:487    .text.USART_Init:000000000000026c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:498    .text.USART_StructInit:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:503    .text.USART_StructInit:0000000000000000 USART_StructInit
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:550    .text.USART_ClockInit:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:555    .text.USART_ClockInit:0000000000000000 USART_ClockInit
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:705    .text.USART_ClockInit:00000000000000ec $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:713    .text.USART_ClockStructInit:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:718    .text.USART_ClockStructInit:0000000000000000 USART_ClockStructInit
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:756    .text.USART_Cmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:761    .text.USART_Cmd:0000000000000000 USART_Cmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:843    .text.USART_Cmd:0000000000000078 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:850    .text.USART_DirectionModeCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:855    .text.USART_DirectionModeCmd:0000000000000000 USART_DirectionModeCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:954    .text.USART_DirectionModeCmd:0000000000000090 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:961    .text.USART_OverSampling8Cmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:966    .text.USART_OverSampling8Cmd:0000000000000000 USART_OverSampling8Cmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1047   .text.USART_OverSampling8Cmd:0000000000000074 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1055   .text.USART_OneBitMethodCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1060   .text.USART_OneBitMethodCmd:0000000000000000 USART_OneBitMethodCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1141   .text.USART_OneBitMethodCmd:0000000000000074 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1149   .text.USART_MSBFirstCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1154   .text.USART_MSBFirstCmd:0000000000000000 USART_MSBFirstCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1235   .text.USART_MSBFirstCmd:0000000000000074 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1243   .text.USART_DataInvCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1248   .text.USART_DataInvCmd:0000000000000000 USART_DataInvCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1328   .text.USART_DataInvCmd:0000000000000074 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1337   .text.USART_InvPinCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1342   .text.USART_InvPinCmd:0000000000000000 USART_InvPinCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1439   .text.USART_InvPinCmd:000000000000008c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1449   .text.USART_SWAPPinCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1454   .text.USART_SWAPPinCmd:0000000000000000 USART_SWAPPinCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1534   .text.USART_SWAPPinCmd:0000000000000074 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1543   .text.USART_ReceiverTimeOutCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1548   .text.USART_ReceiverTimeOutCmd:0000000000000000 USART_ReceiverTimeOutCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1624   .text.USART_ReceiverTimeOutCmd:000000000000006c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1632   .text.USART_SetReceiverTimeOut:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1637   .text.USART_SetReceiverTimeOut:0000000000000000 USART_SetReceiverTimeOut
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1697   .text.USART_SetReceiverTimeOut:0000000000000050 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1706   .text.USART_SetPrescaler:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1711   .text.USART_SetPrescaler:0000000000000000 USART_SetPrescaler
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1768   .text.USART_SetPrescaler:0000000000000050 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1774   .text.USART_STOPModeCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1779   .text.USART_STOPModeCmd:0000000000000000 USART_STOPModeCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1856   .text.USART_STOPModeCmd:000000000000006c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1863   .text.USART_StopModeWakeUpSourceConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1868   .text.USART_StopModeWakeUpSourceConfig:0000000000000000 USART_StopModeWakeUpSourceConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1938   .text.USART_StopModeWakeUpSourceConfig:0000000000000064 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1946   .text.USART_AutoBaudRateCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:1951   .text.USART_AutoBaudRateCmd:0000000000000000 USART_AutoBaudRateCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2026   .text.USART_AutoBaudRateCmd:0000000000000068 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2035   .text.USART_AutoBaudRateConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2040   .text.USART_AutoBaudRateConfig:0000000000000000 USART_AutoBaudRateConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2104   .text.USART_AutoBaudRateConfig:0000000000000058 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2113   .text.USART_AutoBaudRateNewRequest:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2118   .text.USART_AutoBaudRateNewRequest:0000000000000000 USART_AutoBaudRateNewRequest
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2163   .text.USART_AutoBaudRateNewRequest:0000000000000038 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2171   .text.USART_SendData:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2176   .text.USART_SendData:0000000000000000 USART_SendData
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2238   .text.USART_SendData:0000000000000058 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2247   .text.USART_ReceiveData:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2252   .text.USART_ReceiveData:0000000000000000 USART_ReceiveData
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2297   .text.USART_ReceiveData:0000000000000038 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2305   .text.USART_SetAddress:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2310   .text.USART_SetAddress:0000000000000000 USART_SetAddress
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2367   .text.USART_SetAddress:0000000000000050 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2374   .text.USART_MuteModeCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2379   .text.USART_MuteModeCmd:0000000000000000 USART_MuteModeCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2458   .text.USART_MuteModeCmd:0000000000000070 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2468   .text.USART_MuteModeWakeUpConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2473   .text.USART_MuteModeWakeUpConfig:0000000000000000 USART_MuteModeWakeUpConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2541   .text.USART_MuteModeWakeUpConfig:0000000000000060 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2551   .text.USART_AddressDetectionConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2556   .text.USART_AddressDetectionConfig:0000000000000000 USART_AddressDetectionConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2625   .text.USART_AddressDetectionConfig:0000000000000064 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2633   .text.USART_LINBreakDetectLengthConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2638   .text.USART_LINBreakDetectLengthConfig:0000000000000000 USART_LINBreakDetectLengthConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2703   .text.USART_LINBreakDetectLengthConfig:000000000000005c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2710   .text.USART_LINCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2715   .text.USART_LINCmd:0000000000000000 USART_LINCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2791   .text.USART_LINCmd:000000000000006c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2799   .text.USART_HalfDuplexCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2804   .text.USART_HalfDuplexCmd:0000000000000000 USART_HalfDuplexCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2885   .text.USART_HalfDuplexCmd:0000000000000074 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2893   .text.USART_SetGuardTime:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2898   .text.USART_SetGuardTime:0000000000000000 USART_SetGuardTime
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2957   .text.USART_SetGuardTime:0000000000000054 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2963   .text.USART_SmartCardCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:2968   .text.USART_SmartCardCmd:0000000000000000 USART_SmartCardCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3044   .text.USART_SmartCardCmd:000000000000006c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3052   .text.USART_SmartCardNACKCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3057   .text.USART_SmartCardNACKCmd:0000000000000000 USART_SmartCardNACKCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3133   .text.USART_SmartCardNACKCmd:000000000000006c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3141   .text.USART_SetAutoRetryCount:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3146   .text.USART_SetAutoRetryCount:0000000000000000 USART_SetAutoRetryCount
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3210   .text.USART_SetAutoRetryCount:0000000000000058 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3219   .text.USART_SetBlockLength:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3224   .text.USART_SetBlockLength:0000000000000000 USART_SetBlockLength
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3276   .text.USART_SetBlockLength:0000000000000044 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3283   .text.USART_IrDAConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3288   .text.USART_IrDAConfig:0000000000000000 USART_IrDAConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3353   .text.USART_IrDAConfig:000000000000005c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3360   .text.USART_IrDACmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3365   .text.USART_IrDACmd:0000000000000000 USART_IrDACmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3441   .text.USART_IrDACmd:000000000000006c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3449   .text.USART_DECmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3454   .text.USART_DECmd:0000000000000000 USART_DECmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3533   .text.USART_DECmd:0000000000000070 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3543   .text.USART_DEPolarityConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3548   .text.USART_DEPolarityConfig:0000000000000000 USART_DEPolarityConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3616   .text.USART_DEPolarityConfig:0000000000000060 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3626   .text.USART_SetDEAssertionTime:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3631   .text.USART_SetDEAssertionTime:0000000000000000 USART_SetDEAssertionTime
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3695   .text.USART_SetDEAssertionTime:0000000000000058 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3705   .text.USART_SetDEDeassertionTime:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3710   .text.USART_SetDEDeassertionTime:0000000000000000 USART_SetDEDeassertionTime
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3775   .text.USART_SetDEDeassertionTime:000000000000005c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3784   .text.USART_DMACmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3789   .text.USART_DMACmd:0000000000000000 USART_DMACmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3886   .text.USART_DMACmd:000000000000008c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3895   .text.USART_DMAReceptionErrorConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3900   .text.USART_DMAReceptionErrorConfig:0000000000000000 USART_DMAReceptionErrorConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3968   .text.USART_DMAReceptionErrorConfig:0000000000000060 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3978   .text.USART_ITConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:3983   .text.USART_ITConfig:0000000000000000 USART_ITConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4170   .text.USART_ITConfig:000000000000012c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4190   .text.USART_RequestCmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4195   .text.USART_RequestCmd:0000000000000000 USART_RequestCmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4305   .text.USART_RequestCmd:00000000000000ac $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4314   .text.USART_OverrunDetectionConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4319   .text.USART_OverrunDetectionConfig:0000000000000000 USART_OverrunDetectionConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4388   .text.USART_OverrunDetectionConfig:0000000000000064 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4397   .text.USART_GetFlagStatus:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4402   .text.USART_GetFlagStatus:0000000000000000 USART_GetFlagStatus
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4577   .text.USART_GetFlagStatus:0000000000000128 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4586   .text.USART_ClearFlag:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4591   .text.USART_ClearFlag:0000000000000000 USART_ClearFlag
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4634   .text.USART_ClearFlag:0000000000000034 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4641   .text.USART_GetITStatus:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4646   .text.USART_GetITStatus:0000000000000000 USART_GetITStatus
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4854   .text.USART_GetITStatus:0000000000000150 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4875   .text.USART_ClearITPendingBit:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4880   .text.USART_ClearITPendingBit:0000000000000000 USART_ClearITPendingBit
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//ccYi7plC.s:4995   .text.USART_ClearITPendingBit:00000000000000bc $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.9252205565be9cbc11fa49e4ee70d556
                           .group:0000000000000000 wm4.stm32f0xx.h.54.664bd2bdbb20859ae6a5c66c16d4ee5a
                           .group:0000000000000000 wm4.core_cm0.h.32.41c1bd92799bc17b3c8424dd5c622427
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cm0.h.130.eea61816b4c7004601b0935484a214ea
                           .group:0000000000000000 wm4.stm32f0xx.h.226.38dd78fa77e64690c744af5bf4bffc7b
                           .group:0000000000000000 wm4.stm32f0xx_cec.h.80.d17e4ea90700c26010f339885be92ac0
                           .group:0000000000000000 wm4.stm32f0xx_crc.h.31.48fbd36307d848f32978567b16118557
                           .group:0000000000000000 wm4.stm32f0xx_comp.h.31.a640b8c7673f3e181cfd826dce70b6e2
                           .group:0000000000000000 wm4.stm32f0xx_dac.h.31.3e178ad0888f70df8fbc4c999d855b3e
                           .group:0000000000000000 wm4.stm32f0xx_dbgmcu.h.31.282da985c6ed8dd33417cf074ecfdf63
                           .group:0000000000000000 wm4.stm32f0xx_dma.h.31.68def2497939cb34c3f292e0c507724a
                           .group:0000000000000000 wm4.stm32f0xx_exti.h.31.81a00331ef3e014ed4dafe9e9baacca3
                           .group:0000000000000000 wm4.stm32f0xx_flash.h.31.60d92ed32439cfb92572ec2678e2be21
                           .group:0000000000000000 wm4.stm32f0xx_gpio.h.31.df5c3a39b21131ade11d30b7e1580be6
                           .group:0000000000000000 wm4.stm32f0xx_syscfg.h.31.f98c72ea26c47fccafefd977b75786d3
                           .group:0000000000000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:0000000000000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:0000000000000000 wm4.stm32f0xx_pwr.h.31.5b469253a65db741700e0b45f396c99d
                           .group:0000000000000000 wm4.stm32f0xx_rcc.h.31.bc2f5dd9e2f518d727a1e0ce497a42e6
                           .group:0000000000000000 wm4.stm32f0xx_rtc.h.31.bc9d631913a743746cf54f04d4efbf7b
                           .group:0000000000000000 wm4.stm32f0xx_spi.h.31.5b4d0d36c03feb5b081143cdba79744d
                           .group:0000000000000000 wm4.stm32f0xx_tim.h.31.21b4d7229c685868595d751757b51e1b
                           .group:0000000000000000 wm4.stm32f0xx_usart.h.31.8abae79a1c4f266d08faf5996370b48f
                           .group:0000000000000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:0000000000000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6

UNDEFINED SYMBOLS
assert_failed
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
__aeabi_uidiv
RCC_GetClocksFreq
