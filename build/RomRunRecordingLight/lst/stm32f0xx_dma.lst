   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_dma.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata
  18              		.align	2
  19              	.LC0:
  20 0000 2E2E2F2E 		.ascii	"../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f"
  20      2E2F6578 
  20      742D7372 
  20      632F5354 
  20      4D333246 
  21 0033 3078785F 		.ascii	"0xx_dma.c\000"
  21      646D612E 
  21      6300
  22 003d 000000   		.section	.text.DMA_DeInit,"ax",%progbits
  23              		.align	2
  24              		.global	DMA_DeInit
  25              		.code	16
  26              		.thumb_func
  28              	DMA_DeInit:
  29              	.LFB32:
  30              		.file 1 "../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c"
   1:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
   2:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ******************************************************************************
   3:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @file    stm32f0xx_dma.c
   4:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @author  MCD Application Team
   5:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @version V1.0.0
   6:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @date    23-March-2012
   7:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):
   9:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *           + Initialization and Configuration
  10:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *           + Data Counter
  11:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *           + Interrupts and flags management
  12:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  13:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *  @verbatim
  14:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ==============================================================================
  15:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****                       ##### How to use this driver #####
  16:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ==============================================================================
  17:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..]
  18:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) Enable The DMA controller clock using 
  19:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE) function for DMA1.
  20:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) Enable and configure the peripheral to be connected to the DMA channel
  21:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****        (except for internal SRAM / FLASH memories: no initialization is necessary).
  22:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) For a given Channel, program the Source and Destination addresses, 
  23:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         the transfer Direction, the Buffer Size, the Peripheral and Memory 
  24:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         Incrementation mode and Data Size, the Circular or Normal mode, 
  25:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         the channel transfer Priority and the Memory-to-Memory transfer 
  26:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         mode (if needed) using the DMA_Init() function.
  27:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) Enable the NVIC and the corresponding interrupt(s) using the function 
  28:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         DMA_ITConfig() if you need to use DMA interrupts.
  29:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) Enable the DMA channel using the DMA_Cmd() function.
  30:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) Activate the needed channel Request using PPP_DMACmd() function for 
  31:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...) 
  32:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         The function allowing this operation is provided in each PPP peripheral 
  33:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         driver (ie. SPI_DMACmd for SPI peripheral).
  34:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) Optionally, you can configure the number of data to be transferred
  35:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         when the channel is disabled (ie. after each Transfer Complete event
  36:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  37:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         And you can get the number of remaining data to be transferred using 
  38:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         the function DMA_GetCurrDataCounter() at run time (when the DMA channel is
  39:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         enabled and running).
  40:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) To control DMA events you can use one of the following two methods:
  41:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (##) Check on DMA channel flags using the function DMA_GetFlagStatus().
  42:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (##) Use DMA interrupts through the function DMA_ITConfig() at initialization
  43:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              phase and DMA_GetITStatus() function into interrupt routines in
  44:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              communication phase.
  45:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              After checking on a flag you should clear it using DMA_ClearFlag()
  46:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              function. And after checking on an interrupt event you should 
  47:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              clear it using DMA_ClearITPendingBit() function.
  48:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     @endverbatim
  49:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  50:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ******************************************************************************
  51:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @attention
  52:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  53:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  54:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  55:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  56:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * You may not use this file except in compliance with the License.
  57:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * You may obtain a copy of the License at:
  58:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  59:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  60:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  61:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * Unless required by applicable law or agreed to in writing, software 
  62:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  63:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  64:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * See the License for the specific language governing permissions and
  65:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * limitations under the License.
  66:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  67:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ******************************************************************************
  68:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
  69:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
  70:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Includes ------------------------------------------------------------------*/
  71:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #include "stm32f0xx_dma.h"
  72:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
  73:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  74:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @{
  75:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
  76:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
  77:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /** @defgroup DMA 
  78:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief DMA driver modules
  79:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @{
  80:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
  81:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
  82:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
  83:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Private define ------------------------------------------------------------*/
  84:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define CCR_CLEAR_MASK   ((uint32_t)0xFFFF800F) /* DMA Channel config registers Masks */
  85:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
  86:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* DMA1 Channelx interrupt pending bit masks */
  87:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA1_CHANNEL1_IT_MASK    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
  88:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA1_CHANNEL2_IT_MASK    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
  89:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA1_CHANNEL3_IT_MASK    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
  90:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA1_CHANNEL4_IT_MASK    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
  91:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA1_CHANNEL5_IT_MASK    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
  92:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
  93:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Private macro -------------------------------------------------------------*/
  94:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Private variables ---------------------------------------------------------*/
  95:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
  96:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Private functions ---------------------------------------------------------*/
  97:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
  98:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /** @defgroup DMA_Private_Functions 
  99:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @{
 100:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 101:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 102:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 103:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  *  @brief   Initialization and Configuration functions
 104:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  *
 105:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** @verbatim   
 106:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  ===============================================================================
 107:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             ##### Initialization and Configuration functions #####
 108:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  ===============================================================================
 109:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] This subsection provides functions allowing to initialize the DMA channel 
 110:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          source and destination addresses, incrementation and data sizes, transfer 
 111:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          direction, buffer size, circular/normal mode selection, memory-to-memory 
 112:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          mode selection and channel priority value.
 113:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] The DMA_Init() function follows the DMA configuration procedures as described 
 114:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          in reference manual (RM0091).
 115:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** @endverbatim
 116:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @{
 117:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 118:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     
 119:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 120:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Deinitializes the DMAy Channelx registers to their default reset
 121:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         values.
 122:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and 
 123:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         x can be 1 to 5 for DMA1 to select the DMA Channel.
 124:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 125:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 126:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
 127:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
  31              		.loc 1 127 0
  32              		.cfi_startproc
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 128:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 129:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  42              		.loc 1 129 0
  43 0008 7A68     		ldr	r2, [r7, #4]
  44 000a 334B     		ldr	r3, .L8
  45 000c 9A42     		cmp	r2, r3
  46 000e 14D0     		beq	.L2
  47              		.loc 1 129 0 is_stmt 0 discriminator 1
  48 0010 7A68     		ldr	r2, [r7, #4]
  49 0012 324B     		ldr	r3, .L8+4
  50 0014 9A42     		cmp	r2, r3
  51 0016 10D0     		beq	.L2
  52 0018 7A68     		ldr	r2, [r7, #4]
  53 001a 314B     		ldr	r3, .L8+8
  54 001c 9A42     		cmp	r2, r3
  55 001e 0CD0     		beq	.L2
  56 0020 7A68     		ldr	r2, [r7, #4]
  57 0022 304B     		ldr	r3, .L8+12
  58 0024 9A42     		cmp	r2, r3
  59 0026 08D0     		beq	.L2
  60 0028 7A68     		ldr	r2, [r7, #4]
  61 002a 2F4B     		ldr	r3, .L8+16
  62 002c 9A42     		cmp	r2, r3
  63 002e 04D0     		beq	.L2
  64 0030 2E4B     		ldr	r3, .L8+20
  65 0032 181C     		mov	r0, r3
  66 0034 8121     		mov	r1, #129
  67 0036 FFF7FEFF 		bl	assert_failed
  68              	.L2:
 130:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 131:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Disable the selected DMAy Channelx */
 132:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
  69              		.loc 1 132 0 is_stmt 1
  70 003a 7B68     		ldr	r3, [r7, #4]
  71 003c 1A68     		ldr	r2, [r3]
  72 003e 2C4B     		ldr	r3, .L8+24
  73 0040 1A40     		and	r2, r3
  74 0042 7B68     		ldr	r3, [r7, #4]
  75 0044 1A60     		str	r2, [r3]
 133:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 134:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Reset DMAy Channelx control register */
 135:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CCR  = 0;
  76              		.loc 1 135 0
  77 0046 7B68     		ldr	r3, [r7, #4]
  78 0048 0022     		mov	r2, #0
  79 004a 1A60     		str	r2, [r3]
 136:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 137:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Reset DMAy Channelx remaining bytes register */
 138:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CNDTR = 0;
  80              		.loc 1 138 0
  81 004c 7B68     		ldr	r3, [r7, #4]
  82 004e 0022     		mov	r2, #0
  83 0050 5A60     		str	r2, [r3, #4]
 139:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 140:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Reset DMAy Channelx peripheral address register */
 141:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CPAR  = 0;
  84              		.loc 1 141 0
  85 0052 7B68     		ldr	r3, [r7, #4]
  86 0054 0022     		mov	r2, #0
  87 0056 9A60     		str	r2, [r3, #8]
 142:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 143:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Reset DMAy Channelx memory address register */
 144:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CMAR = 0;
  88              		.loc 1 144 0
  89 0058 7B68     		ldr	r3, [r7, #4]
  90 005a 0022     		mov	r2, #0
  91 005c DA60     		str	r2, [r3, #12]
 145:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 146:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if (DMAy_Channelx == DMA1_Channel1)
  92              		.loc 1 146 0
  93 005e 7A68     		ldr	r2, [r7, #4]
  94 0060 1D4B     		ldr	r3, .L8
  95 0062 9A42     		cmp	r2, r3
  96 0064 06D1     		bne	.L3
 147:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 148:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel1 */
 149:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  97              		.loc 1 149 0
  98 0066 234B     		ldr	r3, .L8+28
  99 0068 224A     		ldr	r2, .L8+28
 100 006a 5268     		ldr	r2, [r2, #4]
 101 006c 0F21     		mov	r1, #15
 102 006e 0A43     		orr	r2, r1
 103 0070 5A60     		str	r2, [r3, #4]
 104 0072 2DE0     		b	.L1
 105              	.L3:
 150:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 151:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel2)
 106              		.loc 1 151 0
 107 0074 7A68     		ldr	r2, [r7, #4]
 108 0076 194B     		ldr	r3, .L8+4
 109 0078 9A42     		cmp	r2, r3
 110 007a 06D1     		bne	.L5
 152:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 153:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel2 */
 154:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 111              		.loc 1 154 0
 112 007c 1D4B     		ldr	r3, .L8+28
 113 007e 1D4A     		ldr	r2, .L8+28
 114 0080 5268     		ldr	r2, [r2, #4]
 115 0082 F021     		mov	r1, #240
 116 0084 0A43     		orr	r2, r1
 117 0086 5A60     		str	r2, [r3, #4]
 118 0088 22E0     		b	.L1
 119              	.L5:
 155:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 156:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel3)
 120              		.loc 1 156 0
 121 008a 7A68     		ldr	r2, [r7, #4]
 122 008c 144B     		ldr	r3, .L8+8
 123 008e 9A42     		cmp	r2, r3
 124 0090 07D1     		bne	.L6
 157:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 158:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel3 */
 159:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 125              		.loc 1 159 0
 126 0092 184B     		ldr	r3, .L8+28
 127 0094 174A     		ldr	r2, .L8+28
 128 0096 5268     		ldr	r2, [r2, #4]
 129 0098 F021     		mov	r1, #240
 130 009a 0901     		lsl	r1, r1, #4
 131 009c 0A43     		orr	r2, r1
 132 009e 5A60     		str	r2, [r3, #4]
 133 00a0 16E0     		b	.L1
 134              	.L6:
 160:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 161:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel4)
 135              		.loc 1 161 0
 136 00a2 7A68     		ldr	r2, [r7, #4]
 137 00a4 0F4B     		ldr	r3, .L8+12
 138 00a6 9A42     		cmp	r2, r3
 139 00a8 07D1     		bne	.L7
 162:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 163:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel4 */
 164:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 140              		.loc 1 164 0
 141 00aa 124B     		ldr	r3, .L8+28
 142 00ac 114A     		ldr	r2, .L8+28
 143 00ae 5268     		ldr	r2, [r2, #4]
 144 00b0 F021     		mov	r1, #240
 145 00b2 0902     		lsl	r1, r1, #8
 146 00b4 0A43     		orr	r2, r1
 147 00b6 5A60     		str	r2, [r3, #4]
 148 00b8 0AE0     		b	.L1
 149              	.L7:
 165:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 166:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 167:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 168:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     if (DMAy_Channelx == DMA1_Channel5) 
 150              		.loc 1 168 0
 151 00ba 7A68     		ldr	r2, [r7, #4]
 152 00bc 0A4B     		ldr	r3, .L8+16
 153 00be 9A42     		cmp	r2, r3
 154 00c0 06D1     		bne	.L1
 169:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     {
 170:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****       /* Reset interrupt pending bits for DMA1 Channel5 */
 171:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****       DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 155              		.loc 1 171 0
 156 00c2 0C4B     		ldr	r3, .L8+28
 157 00c4 0B4A     		ldr	r2, .L8+28
 158 00c6 5268     		ldr	r2, [r2, #4]
 159 00c8 F021     		mov	r1, #240
 160 00ca 0903     		lsl	r1, r1, #12
 161 00cc 0A43     		orr	r2, r1
 162 00ce 5A60     		str	r2, [r3, #4]
 163              	.L1:
 172:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     }
 173:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 174:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 164              		.loc 1 174 0
 165 00d0 BD46     		mov	sp, r7
 166 00d2 02B0     		add	sp, sp, #8
 167              		@ sp needed
 168 00d4 80BD     		pop	{r7, pc}
 169              	.L9:
 170 00d6 C046     		.align	2
 171              	.L8:
 172 00d8 08000240 		.word	1073872904
 173 00dc 1C000240 		.word	1073872924
 174 00e0 30000240 		.word	1073872944
 175 00e4 44000240 		.word	1073872964
 176 00e8 58000240 		.word	1073872984
 177 00ec 00000000 		.word	.LC0
 178 00f0 FEFF0000 		.word	65534
 179 00f4 00000240 		.word	1073872896
 180              		.cfi_endproc
 181              	.LFE32:
 183              		.section	.text.DMA_Init,"ax",%progbits
 184              		.align	2
 185              		.global	DMA_Init
 186              		.code	16
 187              		.thumb_func
 189              	DMA_Init:
 190              	.LFB33:
 175:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 176:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 177:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Initializes the DMAy Channelx according to the specified parameters 
 178:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         in the DMA_InitStruct.
 179:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and x can be 1 to 5
 180:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA Channel.
 181:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 182:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         the configuration information for the specified DMA Channel.
 183:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 184:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 185:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
 186:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 191              		.loc 1 186 0
 192              		.cfi_startproc
 193 0000 80B5     		push	{r7, lr}
 194              		.cfi_def_cfa_offset 8
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 0002 84B0     		sub	sp, sp, #16
 198              		.cfi_def_cfa_offset 24
 199 0004 00AF     		add	r7, sp, #0
 200              		.cfi_def_cfa_register 7
 201 0006 7860     		str	r0, [r7, #4]
 202 0008 3960     		str	r1, [r7]
 187:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   uint32_t tmpreg = 0;
 203              		.loc 1 187 0
 204 000a 0023     		mov	r3, #0
 205 000c FB60     		str	r3, [r7, #12]
 188:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 189:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 190:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 206              		.loc 1 190 0
 207 000e 7A68     		ldr	r2, [r7, #4]
 208 0010 704B     		ldr	r3, .L22
 209 0012 9A42     		cmp	r2, r3
 210 0014 14D0     		beq	.L11
 211              		.loc 1 190 0 is_stmt 0 discriminator 1
 212 0016 7A68     		ldr	r2, [r7, #4]
 213 0018 6F4B     		ldr	r3, .L22+4
 214 001a 9A42     		cmp	r2, r3
 215 001c 10D0     		beq	.L11
 216 001e 7A68     		ldr	r2, [r7, #4]
 217 0020 6E4B     		ldr	r3, .L22+8
 218 0022 9A42     		cmp	r2, r3
 219 0024 0CD0     		beq	.L11
 220 0026 7A68     		ldr	r2, [r7, #4]
 221 0028 6D4B     		ldr	r3, .L22+12
 222 002a 9A42     		cmp	r2, r3
 223 002c 08D0     		beq	.L11
 224 002e 7A68     		ldr	r2, [r7, #4]
 225 0030 6C4B     		ldr	r3, .L22+16
 226 0032 9A42     		cmp	r2, r3
 227 0034 04D0     		beq	.L11
 228 0036 6C4B     		ldr	r3, .L22+20
 229 0038 181C     		mov	r0, r3
 230 003a BE21     		mov	r1, #190
 231 003c FFF7FEFF 		bl	assert_failed
 232              	.L11:
 191:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
 233              		.loc 1 191 0 is_stmt 1
 234 0040 3B68     		ldr	r3, [r7]
 235 0042 9B68     		ldr	r3, [r3, #8]
 236 0044 002B     		cmp	r3, #0
 237 0046 08D0     		beq	.L12
 238              		.loc 1 191 0 is_stmt 0 discriminator 1
 239 0048 3B68     		ldr	r3, [r7]
 240 004a 9B68     		ldr	r3, [r3, #8]
 241 004c 102B     		cmp	r3, #16
 242 004e 04D0     		beq	.L12
 243 0050 654B     		ldr	r3, .L22+20
 244 0052 181C     		mov	r0, r3
 245 0054 BF21     		mov	r1, #191
 246 0056 FFF7FEFF 		bl	assert_failed
 247              	.L12:
 192:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 248              		.loc 1 192 0 is_stmt 1
 249 005a 3B68     		ldr	r3, [r7]
 250 005c DB68     		ldr	r3, [r3, #12]
 251 005e 002B     		cmp	r3, #0
 252 0060 04D0     		beq	.L13
 253              		.loc 1 192 0 is_stmt 0 discriminator 2
 254 0062 3B68     		ldr	r3, [r7]
 255 0064 DA68     		ldr	r2, [r3, #12]
 256 0066 614B     		ldr	r3, .L22+24
 257 0068 9A42     		cmp	r2, r3
 258 006a 04D9     		bls	.L14
 259              	.L13:
 260              		.loc 1 192 0 discriminator 1
 261 006c 5E4B     		ldr	r3, .L22+20
 262 006e 181C     		mov	r0, r3
 263 0070 C021     		mov	r1, #192
 264 0072 FFF7FEFF 		bl	assert_failed
 265              	.L14:
 193:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 266              		.loc 1 193 0 is_stmt 1
 267 0076 3B68     		ldr	r3, [r7]
 268 0078 1B69     		ldr	r3, [r3, #16]
 269 007a 002B     		cmp	r3, #0
 270 007c 08D0     		beq	.L15
 271              		.loc 1 193 0 is_stmt 0 discriminator 1
 272 007e 3B68     		ldr	r3, [r7]
 273 0080 1B69     		ldr	r3, [r3, #16]
 274 0082 402B     		cmp	r3, #64
 275 0084 04D0     		beq	.L15
 276 0086 584B     		ldr	r3, .L22+20
 277 0088 181C     		mov	r0, r3
 278 008a C121     		mov	r1, #193
 279 008c FFF7FEFF 		bl	assert_failed
 280              	.L15:
 194:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 281              		.loc 1 194 0 is_stmt 1
 282 0090 3B68     		ldr	r3, [r7]
 283 0092 5B69     		ldr	r3, [r3, #20]
 284 0094 002B     		cmp	r3, #0
 285 0096 08D0     		beq	.L16
 286              		.loc 1 194 0 is_stmt 0 discriminator 1
 287 0098 3B68     		ldr	r3, [r7]
 288 009a 5B69     		ldr	r3, [r3, #20]
 289 009c 802B     		cmp	r3, #128
 290 009e 04D0     		beq	.L16
 291 00a0 514B     		ldr	r3, .L22+20
 292 00a2 181C     		mov	r0, r3
 293 00a4 C221     		mov	r1, #194
 294 00a6 FFF7FEFF 		bl	assert_failed
 295              	.L16:
 195:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 296              		.loc 1 195 0 is_stmt 1
 297 00aa 3B68     		ldr	r3, [r7]
 298 00ac 9B69     		ldr	r3, [r3, #24]
 299 00ae 002B     		cmp	r3, #0
 300 00b0 10D0     		beq	.L17
 301              		.loc 1 195 0 is_stmt 0 discriminator 1
 302 00b2 3B68     		ldr	r3, [r7]
 303 00b4 9A69     		ldr	r2, [r3, #24]
 304 00b6 8023     		mov	r3, #128
 305 00b8 5B00     		lsl	r3, r3, #1
 306 00ba 9A42     		cmp	r2, r3
 307 00bc 0AD0     		beq	.L17
 308 00be 3B68     		ldr	r3, [r7]
 309 00c0 9A69     		ldr	r2, [r3, #24]
 310 00c2 8023     		mov	r3, #128
 311 00c4 9B00     		lsl	r3, r3, #2
 312 00c6 9A42     		cmp	r2, r3
 313 00c8 04D0     		beq	.L17
 314 00ca 474B     		ldr	r3, .L22+20
 315 00cc 181C     		mov	r0, r3
 316 00ce C321     		mov	r1, #195
 317 00d0 FFF7FEFF 		bl	assert_failed
 318              	.L17:
 196:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 319              		.loc 1 196 0 is_stmt 1
 320 00d4 3B68     		ldr	r3, [r7]
 321 00d6 DB69     		ldr	r3, [r3, #28]
 322 00d8 002B     		cmp	r3, #0
 323 00da 10D0     		beq	.L18
 324              		.loc 1 196 0 is_stmt 0 discriminator 1
 325 00dc 3B68     		ldr	r3, [r7]
 326 00de DA69     		ldr	r2, [r3, #28]
 327 00e0 8023     		mov	r3, #128
 328 00e2 DB00     		lsl	r3, r3, #3
 329 00e4 9A42     		cmp	r2, r3
 330 00e6 0AD0     		beq	.L18
 331 00e8 3B68     		ldr	r3, [r7]
 332 00ea DA69     		ldr	r2, [r3, #28]
 333 00ec 8023     		mov	r3, #128
 334 00ee 1B01     		lsl	r3, r3, #4
 335 00f0 9A42     		cmp	r2, r3
 336 00f2 04D0     		beq	.L18
 337 00f4 3C4B     		ldr	r3, .L22+20
 338 00f6 181C     		mov	r0, r3
 339 00f8 C421     		mov	r1, #196
 340 00fa FFF7FEFF 		bl	assert_failed
 341              	.L18:
 197:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 342              		.loc 1 197 0 is_stmt 1
 343 00fe 3B68     		ldr	r3, [r7]
 344 0100 1B6A     		ldr	r3, [r3, #32]
 345 0102 002B     		cmp	r3, #0
 346 0104 08D0     		beq	.L19
 347              		.loc 1 197 0 is_stmt 0 discriminator 1
 348 0106 3B68     		ldr	r3, [r7]
 349 0108 1B6A     		ldr	r3, [r3, #32]
 350 010a 202B     		cmp	r3, #32
 351 010c 04D0     		beq	.L19
 352 010e 364B     		ldr	r3, .L22+20
 353 0110 181C     		mov	r0, r3
 354 0112 C521     		mov	r1, #197
 355 0114 FFF7FEFF 		bl	assert_failed
 356              	.L19:
 198:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 357              		.loc 1 198 0 is_stmt 1
 358 0118 3B68     		ldr	r3, [r7]
 359 011a 5A6A     		ldr	r2, [r3, #36]
 360 011c C023     		mov	r3, #192
 361 011e 9B01     		lsl	r3, r3, #6
 362 0120 9A42     		cmp	r2, r3
 363 0122 14D0     		beq	.L20
 364              		.loc 1 198 0 is_stmt 0 discriminator 1
 365 0124 3B68     		ldr	r3, [r7]
 366 0126 5A6A     		ldr	r2, [r3, #36]
 367 0128 8023     		mov	r3, #128
 368 012a 9B01     		lsl	r3, r3, #6
 369 012c 9A42     		cmp	r2, r3
 370 012e 0ED0     		beq	.L20
 371 0130 3B68     		ldr	r3, [r7]
 372 0132 5A6A     		ldr	r2, [r3, #36]
 373 0134 8023     		mov	r3, #128
 374 0136 5B01     		lsl	r3, r3, #5
 375 0138 9A42     		cmp	r2, r3
 376 013a 08D0     		beq	.L20
 377 013c 3B68     		ldr	r3, [r7]
 378 013e 5B6A     		ldr	r3, [r3, #36]
 379 0140 002B     		cmp	r3, #0
 380 0142 04D0     		beq	.L20
 381 0144 284B     		ldr	r3, .L22+20
 382 0146 181C     		mov	r0, r3
 383 0148 C621     		mov	r1, #198
 384 014a FFF7FEFF 		bl	assert_failed
 385              	.L20:
 199:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
 386              		.loc 1 199 0 is_stmt 1
 387 014e 3B68     		ldr	r3, [r7]
 388 0150 9B6A     		ldr	r3, [r3, #40]
 389 0152 002B     		cmp	r3, #0
 390 0154 0AD0     		beq	.L21
 391              		.loc 1 199 0 is_stmt 0 discriminator 1
 392 0156 3B68     		ldr	r3, [r7]
 393 0158 9A6A     		ldr	r2, [r3, #40]
 394 015a 8023     		mov	r3, #128
 395 015c DB01     		lsl	r3, r3, #7
 396 015e 9A42     		cmp	r2, r3
 397 0160 04D0     		beq	.L21
 398 0162 214B     		ldr	r3, .L22+20
 399 0164 181C     		mov	r0, r3
 400 0166 C721     		mov	r1, #199
 401 0168 FFF7FEFF 		bl	assert_failed
 402              	.L21:
 200:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 201:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CCR Configuration ----------------*/
 202:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Get the DMAy_Channelx CCR value */
 203:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   tmpreg = DMAy_Channelx->CCR;
 403              		.loc 1 203 0 is_stmt 1
 404 016c 7B68     		ldr	r3, [r7, #4]
 405 016e 1B68     		ldr	r3, [r3]
 406 0170 FB60     		str	r3, [r7, #12]
 204:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 205:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 206:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   tmpreg &= CCR_CLEAR_MASK;
 407              		.loc 1 206 0
 408 0172 FA68     		ldr	r2, [r7, #12]
 409 0174 1E4B     		ldr	r3, .L22+28
 410 0176 1340     		and	r3, r2
 411 0178 FB60     		str	r3, [r7, #12]
 207:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 208:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
 209:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set DIR bit according to DMA_DIR value */
 210:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 211:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 212:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 213:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 214:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 215:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 216:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set the MEM2MEM bit according to DMA_M2M value */
 217:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 412              		.loc 1 217 0
 413 017a 3B68     		ldr	r3, [r7]
 414 017c 9A68     		ldr	r2, [r3, #8]
 415 017e 3B68     		ldr	r3, [r7]
 416 0180 1B6A     		ldr	r3, [r3, #32]
 417 0182 1A43     		orr	r2, r3
 218:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 418              		.loc 1 218 0
 419 0184 3B68     		ldr	r3, [r7]
 420 0186 1B69     		ldr	r3, [r3, #16]
 217:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 421              		.loc 1 217 0
 422 0188 1A43     		orr	r2, r3
 423              		.loc 1 218 0
 424 018a 3B68     		ldr	r3, [r7]
 425 018c 5B69     		ldr	r3, [r3, #20]
 426 018e 1A43     		orr	r2, r3
 219:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 427              		.loc 1 219 0
 428 0190 3B68     		ldr	r3, [r7]
 429 0192 9B69     		ldr	r3, [r3, #24]
 218:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 430              		.loc 1 218 0
 431 0194 1A43     		orr	r2, r3
 432              		.loc 1 219 0
 433 0196 3B68     		ldr	r3, [r7]
 434 0198 DB69     		ldr	r3, [r3, #28]
 435 019a 1A43     		orr	r2, r3
 220:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 436              		.loc 1 220 0
 437 019c 3B68     		ldr	r3, [r7]
 438 019e 5B6A     		ldr	r3, [r3, #36]
 219:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 439              		.loc 1 219 0
 440 01a0 1A43     		orr	r2, r3
 441              		.loc 1 220 0
 442 01a2 3B68     		ldr	r3, [r7]
 443 01a4 9B6A     		ldr	r3, [r3, #40]
 444 01a6 1343     		orr	r3, r2
 217:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 445              		.loc 1 217 0
 446 01a8 FA68     		ldr	r2, [r7, #12]
 447 01aa 1343     		orr	r3, r2
 448 01ac FB60     		str	r3, [r7, #12]
 221:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 222:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CCR */
 223:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CCR = tmpreg;
 449              		.loc 1 223 0
 450 01ae 7B68     		ldr	r3, [r7, #4]
 451 01b0 FA68     		ldr	r2, [r7, #12]
 452 01b2 1A60     		str	r2, [r3]
 224:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 225:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
 226:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CNDTR */
 227:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 453              		.loc 1 227 0
 454 01b4 3B68     		ldr	r3, [r7]
 455 01b6 DA68     		ldr	r2, [r3, #12]
 456 01b8 7B68     		ldr	r3, [r7, #4]
 457 01ba 5A60     		str	r2, [r3, #4]
 228:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 229:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
 230:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CPAR */
 231:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 458              		.loc 1 231 0
 459 01bc 3B68     		ldr	r3, [r7]
 460 01be 1A68     		ldr	r2, [r3]
 461 01c0 7B68     		ldr	r3, [r7, #4]
 462 01c2 9A60     		str	r2, [r3, #8]
 232:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 233:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
 234:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CMAR */
 235:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 463              		.loc 1 235 0
 464 01c4 3B68     		ldr	r3, [r7]
 465 01c6 5A68     		ldr	r2, [r3, #4]
 466 01c8 7B68     		ldr	r3, [r7, #4]
 467 01ca DA60     		str	r2, [r3, #12]
 236:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 468              		.loc 1 236 0
 469 01cc BD46     		mov	sp, r7
 470 01ce 04B0     		add	sp, sp, #16
 471              		@ sp needed
 472 01d0 80BD     		pop	{r7, pc}
 473              	.L23:
 474 01d2 C046     		.align	2
 475              	.L22:
 476 01d4 08000240 		.word	1073872904
 477 01d8 1C000240 		.word	1073872924
 478 01dc 30000240 		.word	1073872944
 479 01e0 44000240 		.word	1073872964
 480 01e4 58000240 		.word	1073872984
 481 01e8 00000000 		.word	.LC0
 482 01ec FFFF0000 		.word	65535
 483 01f0 0F80FFFF 		.word	-32753
 484              		.cfi_endproc
 485              	.LFE33:
 487              		.section	.text.DMA_StructInit,"ax",%progbits
 488              		.align	2
 489              		.global	DMA_StructInit
 490              		.code	16
 491              		.thumb_func
 493              	DMA_StructInit:
 494              	.LFB34:
 237:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 238:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 239:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 240:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure which will
 241:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         be initialized.
 242:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 243:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 244:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 245:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 495              		.loc 1 245 0
 496              		.cfi_startproc
 497 0000 80B5     		push	{r7, lr}
 498              		.cfi_def_cfa_offset 8
 499              		.cfi_offset 7, -8
 500              		.cfi_offset 14, -4
 501 0002 82B0     		sub	sp, sp, #8
 502              		.cfi_def_cfa_offset 16
 503 0004 00AF     		add	r7, sp, #0
 504              		.cfi_def_cfa_register 7
 505 0006 7860     		str	r0, [r7, #4]
 246:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /*-------------- Reset DMA init structure parameters values ------------------*/
 247:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 248:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 506              		.loc 1 248 0
 507 0008 7B68     		ldr	r3, [r7, #4]
 508 000a 0022     		mov	r2, #0
 509 000c 1A60     		str	r2, [r3]
 249:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_MemoryBaseAddr member */
 250:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 510              		.loc 1 250 0
 511 000e 7B68     		ldr	r3, [r7, #4]
 512 0010 0022     		mov	r2, #0
 513 0012 5A60     		str	r2, [r3, #4]
 251:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_DIR member */
 252:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 514              		.loc 1 252 0
 515 0014 7B68     		ldr	r3, [r7, #4]
 516 0016 0022     		mov	r2, #0
 517 0018 9A60     		str	r2, [r3, #8]
 253:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 254:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 518              		.loc 1 254 0
 519 001a 7B68     		ldr	r3, [r7, #4]
 520 001c 0022     		mov	r2, #0
 521 001e DA60     		str	r2, [r3, #12]
 255:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 256:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 522              		.loc 1 256 0
 523 0020 7B68     		ldr	r3, [r7, #4]
 524 0022 0022     		mov	r2, #0
 525 0024 1A61     		str	r2, [r3, #16]
 257:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 258:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 526              		.loc 1 258 0
 527 0026 7B68     		ldr	r3, [r7, #4]
 528 0028 0022     		mov	r2, #0
 529 002a 5A61     		str	r2, [r3, #20]
 259:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 260:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 530              		.loc 1 260 0
 531 002c 7B68     		ldr	r3, [r7, #4]
 532 002e 0022     		mov	r2, #0
 533 0030 9A61     		str	r2, [r3, #24]
 261:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 262:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 534              		.loc 1 262 0
 535 0032 7B68     		ldr	r3, [r7, #4]
 536 0034 0022     		mov	r2, #0
 537 0036 DA61     		str	r2, [r3, #28]
 263:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_Mode member */
 264:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 538              		.loc 1 264 0
 539 0038 7B68     		ldr	r3, [r7, #4]
 540 003a 0022     		mov	r2, #0
 541 003c 1A62     		str	r2, [r3, #32]
 265:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_Priority member */
 266:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 542              		.loc 1 266 0
 543 003e 7B68     		ldr	r3, [r7, #4]
 544 0040 0022     		mov	r2, #0
 545 0042 5A62     		str	r2, [r3, #36]
 267:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_M2M member */
 268:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 546              		.loc 1 268 0
 547 0044 7B68     		ldr	r3, [r7, #4]
 548 0046 0022     		mov	r2, #0
 549 0048 9A62     		str	r2, [r3, #40]
 269:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 550              		.loc 1 269 0
 551 004a BD46     		mov	sp, r7
 552 004c 02B0     		add	sp, sp, #8
 553              		@ sp needed
 554 004e 80BD     		pop	{r7, pc}
 555              		.cfi_endproc
 556              	.LFE34:
 558              		.section	.text.DMA_Cmd,"ax",%progbits
 559              		.align	2
 560              		.global	DMA_Cmd
 561              		.code	16
 562              		.thumb_func
 564              	DMA_Cmd:
 565              	.LFB35:
 270:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 271:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 272:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx.
 273:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and
 274:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         x can be 1 to 5 for DMA1 to select the DMA Channel.
 275:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  NewState: new state of the DMAy Channelx. 
 276:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         This parameter can be: ENABLE or DISABLE.
 277:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 278:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 279:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
 280:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 566              		.loc 1 280 0
 567              		.cfi_startproc
 568 0000 80B5     		push	{r7, lr}
 569              		.cfi_def_cfa_offset 8
 570              		.cfi_offset 7, -8
 571              		.cfi_offset 14, -4
 572 0002 82B0     		sub	sp, sp, #8
 573              		.cfi_def_cfa_offset 16
 574 0004 00AF     		add	r7, sp, #0
 575              		.cfi_def_cfa_register 7
 576 0006 7860     		str	r0, [r7, #4]
 577 0008 0A1C     		mov	r2, r1
 578 000a FB1C     		add	r3, r7, #3
 579 000c 1A70     		strb	r2, [r3]
 281:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 282:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 580              		.loc 1 282 0
 581 000e 7A68     		ldr	r2, [r7, #4]
 582 0010 1E4B     		ldr	r3, .L30
 583 0012 9A42     		cmp	r2, r3
 584 0014 16D0     		beq	.L26
 585              		.loc 1 282 0 is_stmt 0 discriminator 1
 586 0016 7A68     		ldr	r2, [r7, #4]
 587 0018 1D4B     		ldr	r3, .L30+4
 588 001a 9A42     		cmp	r2, r3
 589 001c 12D0     		beq	.L26
 590 001e 7A68     		ldr	r2, [r7, #4]
 591 0020 1C4B     		ldr	r3, .L30+8
 592 0022 9A42     		cmp	r2, r3
 593 0024 0ED0     		beq	.L26
 594 0026 7A68     		ldr	r2, [r7, #4]
 595 0028 1B4B     		ldr	r3, .L30+12
 596 002a 9A42     		cmp	r2, r3
 597 002c 0AD0     		beq	.L26
 598 002e 7A68     		ldr	r2, [r7, #4]
 599 0030 1A4B     		ldr	r3, .L30+16
 600 0032 9A42     		cmp	r2, r3
 601 0034 06D0     		beq	.L26
 602 0036 1A4A     		ldr	r2, .L30+20
 603 0038 8D23     		mov	r3, #141
 604 003a 5B00     		lsl	r3, r3, #1
 605 003c 101C     		mov	r0, r2
 606 003e 191C     		mov	r1, r3
 607 0040 FFF7FEFF 		bl	assert_failed
 608              	.L26:
 283:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 609              		.loc 1 283 0 is_stmt 1
 610 0044 FB1C     		add	r3, r7, #3
 611 0046 1B78     		ldrb	r3, [r3]
 612 0048 002B     		cmp	r3, #0
 613 004a 0AD0     		beq	.L27
 614              		.loc 1 283 0 is_stmt 0 discriminator 1
 615 004c FB1C     		add	r3, r7, #3
 616 004e 1B78     		ldrb	r3, [r3]
 617 0050 012B     		cmp	r3, #1
 618 0052 06D0     		beq	.L27
 619 0054 124A     		ldr	r2, .L30+20
 620 0056 1C23     		mov	r3, #28
 621 0058 FF33     		add	r3, r3, #255
 622 005a 101C     		mov	r0, r2
 623 005c 191C     		mov	r1, r3
 624 005e FFF7FEFF 		bl	assert_failed
 625              	.L27:
 284:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 285:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if (NewState != DISABLE)
 626              		.loc 1 285 0 is_stmt 1
 627 0062 FB1C     		add	r3, r7, #3
 628 0064 1B78     		ldrb	r3, [r3]
 629 0066 002B     		cmp	r3, #0
 630 0068 06D0     		beq	.L28
 286:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 287:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Enable the selected DMAy Channelx */
 288:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMAy_Channelx->CCR |= DMA_CCR_EN;
 631              		.loc 1 288 0
 632 006a 7B68     		ldr	r3, [r7, #4]
 633 006c 1B68     		ldr	r3, [r3]
 634 006e 0122     		mov	r2, #1
 635 0070 1A43     		orr	r2, r3
 636 0072 7B68     		ldr	r3, [r7, #4]
 637 0074 1A60     		str	r2, [r3]
 638 0076 05E0     		b	.L25
 639              	.L28:
 289:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 290:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 291:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 292:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Disable the selected DMAy Channelx */
 293:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 640              		.loc 1 293 0
 641 0078 7B68     		ldr	r3, [r7, #4]
 642 007a 1A68     		ldr	r2, [r3]
 643 007c 094B     		ldr	r3, .L30+24
 644 007e 1A40     		and	r2, r3
 645 0080 7B68     		ldr	r3, [r7, #4]
 646 0082 1A60     		str	r2, [r3]
 647              	.L25:
 294:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 295:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 648              		.loc 1 295 0
 649 0084 BD46     		mov	sp, r7
 650 0086 02B0     		add	sp, sp, #8
 651              		@ sp needed
 652 0088 80BD     		pop	{r7, pc}
 653              	.L31:
 654 008a C046     		.align	2
 655              	.L30:
 656 008c 08000240 		.word	1073872904
 657 0090 1C000240 		.word	1073872924
 658 0094 30000240 		.word	1073872944
 659 0098 44000240 		.word	1073872964
 660 009c 58000240 		.word	1073872984
 661 00a0 00000000 		.word	.LC0
 662 00a4 FEFF0000 		.word	65534
 663              		.cfi_endproc
 664              	.LFE35:
 666              		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 667              		.align	2
 668              		.global	DMA_SetCurrDataCounter
 669              		.code	16
 670              		.thumb_func
 672              	DMA_SetCurrDataCounter:
 673              	.LFB36:
 296:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 297:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 298:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @}
 299:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 300:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 301:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 302:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  *  @brief   Data Counter functions 
 303:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  *
 304:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** @verbatim
 305:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  ===============================================================================
 306:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****                       ##### Data Counter functions #####
 307:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  ===============================================================================
 308:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] This subsection provides function allowing to configure and read the buffer 
 309:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          size (number of data to be transferred).The DMA data counter can be written 
 310:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          only when the DMA channel is disabled (ie. after transfer complete event).
 311:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] The following function can be used to write the Channel data counter value:
 312:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (+) void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t 
 313:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              DataNumber).
 314:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     -@- It is advised to use this function rather than DMA_Init() in situations 
 315:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         where only the Data buffer needs to be reloaded.
 316:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] The DMA data counter can be read to indicate the number of remaining transfers 
 317:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          for the relative DMA channel. This counter is decremented at the end of each 
 318:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          data transfer and when the transfer is complete: 
 319:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (+) If Normal mode is selected: the counter is set to 0.
 320:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (+) If Circular mode is selected: the counter is reloaded with the initial 
 321:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          value(configured before enabling the DMA channel).
 322:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] The following function can be used to read the Channel data counter value:
 323:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (+) uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx).
 324:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 325:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** @endverbatim
 326:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @{
 327:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 328:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 329:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 330:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Sets the number of data units in the current DMAy Channelx transfer.
 331:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and x can be 
 332:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         1 to 5 for DMA1 to select the DMA Channel.
 333:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DataNumber: The number of data units in the current DMAy Channelx
 334:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         transfer.
 335:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   This function can only be used when the DMAy_Channelx is disabled.
 336:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None.
 337:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 338:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
 339:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 674              		.loc 1 339 0
 675              		.cfi_startproc
 676 0000 80B5     		push	{r7, lr}
 677              		.cfi_def_cfa_offset 8
 678              		.cfi_offset 7, -8
 679              		.cfi_offset 14, -4
 680 0002 82B0     		sub	sp, sp, #8
 681              		.cfi_def_cfa_offset 16
 682 0004 00AF     		add	r7, sp, #0
 683              		.cfi_def_cfa_register 7
 684 0006 7860     		str	r0, [r7, #4]
 685 0008 0A1C     		mov	r2, r1
 686 000a BB1C     		add	r3, r7, #2
 687 000c 1A80     		strh	r2, [r3]
 340:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 341:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 688              		.loc 1 341 0
 689 000e 7A68     		ldr	r2, [r7, #4]
 690 0010 104B     		ldr	r3, .L34
 691 0012 9A42     		cmp	r2, r3
 692 0014 16D0     		beq	.L33
 693              		.loc 1 341 0 is_stmt 0 discriminator 1
 694 0016 7A68     		ldr	r2, [r7, #4]
 695 0018 0F4B     		ldr	r3, .L34+4
 696 001a 9A42     		cmp	r2, r3
 697 001c 12D0     		beq	.L33
 698 001e 7A68     		ldr	r2, [r7, #4]
 699 0020 0E4B     		ldr	r3, .L34+8
 700 0022 9A42     		cmp	r2, r3
 701 0024 0ED0     		beq	.L33
 702 0026 7A68     		ldr	r2, [r7, #4]
 703 0028 0D4B     		ldr	r3, .L34+12
 704 002a 9A42     		cmp	r2, r3
 705 002c 0AD0     		beq	.L33
 706 002e 7A68     		ldr	r2, [r7, #4]
 707 0030 0C4B     		ldr	r3, .L34+16
 708 0032 9A42     		cmp	r2, r3
 709 0034 06D0     		beq	.L33
 710 0036 0C4A     		ldr	r2, .L34+20
 711 0038 5623     		mov	r3, #86
 712 003a FF33     		add	r3, r3, #255
 713 003c 101C     		mov	r0, r2
 714 003e 191C     		mov	r1, r3
 715 0040 FFF7FEFF 		bl	assert_failed
 716              	.L33:
 342:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 343:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
 344:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CNDTR */
 345:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CNDTR = DataNumber;
 717              		.loc 1 345 0 is_stmt 1
 718 0044 BB1C     		add	r3, r7, #2
 719 0046 1A88     		ldrh	r2, [r3]
 720 0048 7B68     		ldr	r3, [r7, #4]
 721 004a 5A60     		str	r2, [r3, #4]
 346:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 722              		.loc 1 346 0
 723 004c BD46     		mov	sp, r7
 724 004e 02B0     		add	sp, sp, #8
 725              		@ sp needed
 726 0050 80BD     		pop	{r7, pc}
 727              	.L35:
 728 0052 C046     		.align	2
 729              	.L34:
 730 0054 08000240 		.word	1073872904
 731 0058 1C000240 		.word	1073872924
 732 005c 30000240 		.word	1073872944
 733 0060 44000240 		.word	1073872964
 734 0064 58000240 		.word	1073872984
 735 0068 00000000 		.word	.LC0
 736              		.cfi_endproc
 737              	.LFE36:
 739              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 740              		.align	2
 741              		.global	DMA_GetCurrDataCounter
 742              		.code	16
 743              		.thumb_func
 745              	DMA_GetCurrDataCounter:
 746              	.LFB37:
 347:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 348:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 349:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Returns the number of remaining data units in the current
 350:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         DMAy Channelx transfer.
 351:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and
 352:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         x can be 1 to 5 for DMA1 to select the DMA Channel.
 353:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Channelx
 354:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         transfer.
 355:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 356:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
 357:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 747              		.loc 1 357 0
 748              		.cfi_startproc
 749 0000 80B5     		push	{r7, lr}
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 7, -8
 752              		.cfi_offset 14, -4
 753 0002 82B0     		sub	sp, sp, #8
 754              		.cfi_def_cfa_offset 16
 755 0004 00AF     		add	r7, sp, #0
 756              		.cfi_def_cfa_register 7
 757 0006 7860     		str	r0, [r7, #4]
 358:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 359:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 758              		.loc 1 359 0
 759 0008 7A68     		ldr	r2, [r7, #4]
 760 000a 104B     		ldr	r3, .L39
 761 000c 9A42     		cmp	r2, r3
 762 000e 16D0     		beq	.L37
 763              		.loc 1 359 0 is_stmt 0 discriminator 1
 764 0010 7A68     		ldr	r2, [r7, #4]
 765 0012 0F4B     		ldr	r3, .L39+4
 766 0014 9A42     		cmp	r2, r3
 767 0016 12D0     		beq	.L37
 768 0018 7A68     		ldr	r2, [r7, #4]
 769 001a 0E4B     		ldr	r3, .L39+8
 770 001c 9A42     		cmp	r2, r3
 771 001e 0ED0     		beq	.L37
 772 0020 7A68     		ldr	r2, [r7, #4]
 773 0022 0D4B     		ldr	r3, .L39+12
 774 0024 9A42     		cmp	r2, r3
 775 0026 0AD0     		beq	.L37
 776 0028 7A68     		ldr	r2, [r7, #4]
 777 002a 0C4B     		ldr	r3, .L39+16
 778 002c 9A42     		cmp	r2, r3
 779 002e 06D0     		beq	.L37
 780 0030 0B4A     		ldr	r2, .L39+20
 781 0032 6823     		mov	r3, #104
 782 0034 FF33     		add	r3, r3, #255
 783 0036 101C     		mov	r0, r2
 784 0038 191C     		mov	r1, r3
 785 003a FFF7FEFF 		bl	assert_failed
 786              	.L37:
 360:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Return the number of remaining data units for DMAy Channelx */
 361:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   return ((uint16_t)(DMAy_Channelx->CNDTR));
 787              		.loc 1 361 0 is_stmt 1
 788 003e 7B68     		ldr	r3, [r7, #4]
 789 0040 5B68     		ldr	r3, [r3, #4]
 790 0042 9BB2     		uxth	r3, r3
 362:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 791              		.loc 1 362 0
 792 0044 181C     		mov	r0, r3
 793 0046 BD46     		mov	sp, r7
 794 0048 02B0     		add	sp, sp, #8
 795              		@ sp needed
 796 004a 80BD     		pop	{r7, pc}
 797              	.L40:
 798              		.align	2
 799              	.L39:
 800 004c 08000240 		.word	1073872904
 801 0050 1C000240 		.word	1073872924
 802 0054 30000240 		.word	1073872944
 803 0058 44000240 		.word	1073872964
 804 005c 58000240 		.word	1073872984
 805 0060 00000000 		.word	.LC0
 806              		.cfi_endproc
 807              	.LFE37:
 809              		.section	.text.DMA_ITConfig,"ax",%progbits
 810              		.align	2
 811              		.global	DMA_ITConfig
 812              		.code	16
 813              		.thumb_func
 815              	DMA_ITConfig:
 816              	.LFB38:
 363:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 364:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 365:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @}
 366:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 367:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 368:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /** @defgroup DMA_Group3 Interrupts and flags management functions
 369:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 370:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  *
 371:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** @verbatim
 372:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  ===============================================================================
 373:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****           ##### Interrupts and flags management functions #####
 374:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  ===============================================================================
 375:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] This subsection provides functions allowing to configure the DMA Interrupts 
 376:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          sources and check or clear the flags or pending bits status.
 377:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          The user should identify which mode will be used in his application to manage 
 378:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          the DMA controller events: Polling mode or Interrupt mode. 
 379:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *** Polling Mode ***
 380:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ====================
 381:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] Each DMA channel can be managed through 4 event Flags:(y : DMA Controller 
 382:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          number  x : DMA channel number ).
 383:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (#) DMAy_FLAG_TCx : to indicate that a Transfer Complete event occurred.
 384:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (#) DMAy_FLAG_HTx : to indicate that a Half-Transfer Complete event occurred.
 385:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (#) DMAy_FLAG_TEx : to indicate that a Transfer Error occurred.
 386:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (#) DMAy_FLAG_GLx : to indicate that at least one of the events described 
 387:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              above occurred.
 388:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     -@- Clearing DMAy_FLAG_GLx results in clearing all other pending flags of the 
 389:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         same channel (DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
 390:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..]In this Mode it is advised to use the following functions:
 391:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (+) FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG);
 392:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (+) void DMA_ClearFlag(uint32_t DMA_FLAG);
 393:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 394:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *** Interrupt Mode ***
 395:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ======================
 396:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] Each DMA channel can be managed through 4 Interrupts:
 397:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (+) Interrupt Source
 398:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****        (##) DMA_IT_TC: specifies the interrupt source for the Transfer Complete 
 399:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             event.
 400:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****        (##) DMA_IT_HT : specifies the interrupt source for the Half-transfer Complete 
 401:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             event.
 402:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****        (##) DMA_IT_TE : specifies the interrupt source for the transfer errors event.
 403:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****        (##) DMA_IT_GL : to indicate that at least one of the interrupts described 
 404:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             above occurred.
 405:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     -@@- Clearing DMA_IT_GL interrupt results in clearing all other interrupts of 
 406:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         the same channel (DMA_IT_TCx, DMA_IT_HT and DMA_IT_TE).
 407:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..]In this Mode it is advised to use the following functions:
 408:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (+) void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, 
 409:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             FunctionalState NewState);
 410:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (+) ITStatus DMA_GetITStatus(uint32_t DMA_IT);
 411:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (+) void DMA_ClearITPendingBit(uint32_t DMA_IT);
 412:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 413:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** @endverbatim
 414:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @{
 415:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 416:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 417:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 418:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx interrupts.
 419:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and
 420:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         x can be 1 to 5 for DMA1 to select the DMA Channel.
 421:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupts sources to be enabled
 422:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         or disabled. 
 423:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *   This parameter can be any combination of the following values:
 424:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA_IT_TC: Transfer complete interrupt mask
 425:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA_IT_HT: Half transfer interrupt mask
 426:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA_IT_TE: Transfer error interrupt mask
 427:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
 428:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         This parameter can be: ENABLE or DISABLE.
 429:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 430:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 431:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
 432:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 817              		.loc 1 432 0
 818              		.cfi_startproc
 819 0000 80B5     		push	{r7, lr}
 820              		.cfi_def_cfa_offset 8
 821              		.cfi_offset 7, -8
 822              		.cfi_offset 14, -4
 823 0002 84B0     		sub	sp, sp, #16
 824              		.cfi_def_cfa_offset 24
 825 0004 00AF     		add	r7, sp, #0
 826              		.cfi_def_cfa_register 7
 827 0006 F860     		str	r0, [r7, #12]
 828 0008 B960     		str	r1, [r7, #8]
 829 000a FB1D     		add	r3, r7, #7
 830 000c 1A70     		strb	r2, [r3]
 433:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 434:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 831              		.loc 1 434 0
 832 000e FA68     		ldr	r2, [r7, #12]
 833 0010 254B     		ldr	r3, .L48
 834 0012 9A42     		cmp	r2, r3
 835 0014 16D0     		beq	.L42
 836              		.loc 1 434 0 is_stmt 0 discriminator 1
 837 0016 FA68     		ldr	r2, [r7, #12]
 838 0018 244B     		ldr	r3, .L48+4
 839 001a 9A42     		cmp	r2, r3
 840 001c 12D0     		beq	.L42
 841 001e FA68     		ldr	r2, [r7, #12]
 842 0020 234B     		ldr	r3, .L48+8
 843 0022 9A42     		cmp	r2, r3
 844 0024 0ED0     		beq	.L42
 845 0026 FA68     		ldr	r2, [r7, #12]
 846 0028 224B     		ldr	r3, .L48+12
 847 002a 9A42     		cmp	r2, r3
 848 002c 0AD0     		beq	.L42
 849 002e FA68     		ldr	r2, [r7, #12]
 850 0030 214B     		ldr	r3, .L48+16
 851 0032 9A42     		cmp	r2, r3
 852 0034 06D0     		beq	.L42
 853 0036 214A     		ldr	r2, .L48+20
 854 0038 D923     		mov	r3, #217
 855 003a 5B00     		lsl	r3, r3, #1
 856 003c 101C     		mov	r0, r2
 857 003e 191C     		mov	r1, r3
 858 0040 FFF7FEFF 		bl	assert_failed
 859              	.L42:
 435:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 860              		.loc 1 435 0 is_stmt 1
 861 0044 BB68     		ldr	r3, [r7, #8]
 862 0046 0E22     		mov	r2, #14
 863 0048 9343     		bic	r3, r2
 864 004a 02D1     		bne	.L43
 865              		.loc 1 435 0 is_stmt 0 discriminator 2
 866 004c BB68     		ldr	r3, [r7, #8]
 867 004e 002B     		cmp	r3, #0
 868 0050 06D1     		bne	.L44
 869              	.L43:
 870              		.loc 1 435 0 discriminator 1
 871 0052 1A4A     		ldr	r2, .L48+20
 872 0054 B423     		mov	r3, #180
 873 0056 FF33     		add	r3, r3, #255
 874 0058 101C     		mov	r0, r2
 875 005a 191C     		mov	r1, r3
 876 005c FFF7FEFF 		bl	assert_failed
 877              	.L44:
 436:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 878              		.loc 1 436 0 is_stmt 1
 879 0060 FB1D     		add	r3, r7, #7
 880 0062 1B78     		ldrb	r3, [r3]
 881 0064 002B     		cmp	r3, #0
 882 0066 0AD0     		beq	.L45
 883              		.loc 1 436 0 is_stmt 0 discriminator 1
 884 0068 FB1D     		add	r3, r7, #7
 885 006a 1B78     		ldrb	r3, [r3]
 886 006c 012B     		cmp	r3, #1
 887 006e 06D0     		beq	.L45
 888 0070 124A     		ldr	r2, .L48+20
 889 0072 DA23     		mov	r3, #218
 890 0074 5B00     		lsl	r3, r3, #1
 891 0076 101C     		mov	r0, r2
 892 0078 191C     		mov	r1, r3
 893 007a FFF7FEFF 		bl	assert_failed
 894              	.L45:
 437:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 438:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if (NewState != DISABLE)
 895              		.loc 1 438 0 is_stmt 1
 896 007e FB1D     		add	r3, r7, #7
 897 0080 1B78     		ldrb	r3, [r3]
 898 0082 002B     		cmp	r3, #0
 899 0084 06D0     		beq	.L46
 439:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 440:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Enable the selected DMA interrupts */
 441:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMAy_Channelx->CCR |= DMA_IT;
 900              		.loc 1 441 0
 901 0086 FB68     		ldr	r3, [r7, #12]
 902 0088 1A68     		ldr	r2, [r3]
 903 008a BB68     		ldr	r3, [r7, #8]
 904 008c 1A43     		orr	r2, r3
 905 008e FB68     		ldr	r3, [r7, #12]
 906 0090 1A60     		str	r2, [r3]
 907 0092 06E0     		b	.L41
 908              	.L46:
 442:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 443:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 444:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 445:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Disable the selected DMA interrupts */
 446:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMAy_Channelx->CCR &= ~DMA_IT;
 909              		.loc 1 446 0
 910 0094 FB68     		ldr	r3, [r7, #12]
 911 0096 1B68     		ldr	r3, [r3]
 912 0098 BA68     		ldr	r2, [r7, #8]
 913 009a D243     		mvn	r2, r2
 914 009c 1A40     		and	r2, r3
 915 009e FB68     		ldr	r3, [r7, #12]
 916 00a0 1A60     		str	r2, [r3]
 917              	.L41:
 447:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 448:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 918              		.loc 1 448 0
 919 00a2 BD46     		mov	sp, r7
 920 00a4 04B0     		add	sp, sp, #16
 921              		@ sp needed
 922 00a6 80BD     		pop	{r7, pc}
 923              	.L49:
 924              		.align	2
 925              	.L48:
 926 00a8 08000240 		.word	1073872904
 927 00ac 1C000240 		.word	1073872924
 928 00b0 30000240 		.word	1073872944
 929 00b4 44000240 		.word	1073872964
 930 00b8 58000240 		.word	1073872984
 931 00bc 00000000 		.word	.LC0
 932              		.cfi_endproc
 933              	.LFE38:
 935              		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 936              		.align	2
 937              		.global	DMA_GetFlagStatus
 938              		.code	16
 939              		.thumb_func
 941              	DMA_GetFlagStatus:
 942              	.LFB39:
 449:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 450:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 451:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Checks whether the specified DMAy Channelx flag is set or not.
 452:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 453:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *   This parameter can be one of the following values:
 454:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 455:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 456:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 457:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 458:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 459:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 460:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 461:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 462:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 463:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 464:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 465:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 466:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 467:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 468:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 469:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 470:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 471:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 472:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 473:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 474:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     
 475:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note
 476:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    The Global flag (DMAy_FLAG_GLx) is set whenever any of the other flags 
 477:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    relative to the same channel is set (Transfer Complete, Half-transfer 
 478:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    Complete or Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx or 
 479:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    DMAy_FLAG_TEx). 
 480:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *      
 481:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 482:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 483:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
 484:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 943              		.loc 1 484 0
 944              		.cfi_startproc
 945 0000 80B5     		push	{r7, lr}
 946              		.cfi_def_cfa_offset 8
 947              		.cfi_offset 7, -8
 948              		.cfi_offset 14, -4
 949 0002 84B0     		sub	sp, sp, #16
 950              		.cfi_def_cfa_offset 24
 951 0004 00AF     		add	r7, sp, #0
 952              		.cfi_def_cfa_register 7
 953 0006 7860     		str	r0, [r7, #4]
 485:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   FlagStatus bitstatus = RESET;
 954              		.loc 1 485 0
 955 0008 3B1C     		mov	r3, r7
 956 000a 0F33     		add	r3, r3, #15
 957 000c 0022     		mov	r2, #0
 958 000e 1A70     		strb	r2, [r3]
 486:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 487:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 488:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 959              		.loc 1 488 0
 960 0010 7B68     		ldr	r3, [r7, #4]
 961 0012 012B     		cmp	r3, #1
 962 0014 57D0     		beq	.L51
 963              		.loc 1 488 0 is_stmt 0 discriminator 1
 964 0016 7B68     		ldr	r3, [r7, #4]
 965 0018 022B     		cmp	r3, #2
 966 001a 54D0     		beq	.L51
 967 001c 7B68     		ldr	r3, [r7, #4]
 968 001e 042B     		cmp	r3, #4
 969 0020 51D0     		beq	.L51
 970 0022 7B68     		ldr	r3, [r7, #4]
 971 0024 082B     		cmp	r3, #8
 972 0026 4ED0     		beq	.L51
 973 0028 7B68     		ldr	r3, [r7, #4]
 974 002a 102B     		cmp	r3, #16
 975 002c 4BD0     		beq	.L51
 976 002e 7B68     		ldr	r3, [r7, #4]
 977 0030 202B     		cmp	r3, #32
 978 0032 48D0     		beq	.L51
 979 0034 7B68     		ldr	r3, [r7, #4]
 980 0036 402B     		cmp	r3, #64
 981 0038 45D0     		beq	.L51
 982 003a 7B68     		ldr	r3, [r7, #4]
 983 003c 802B     		cmp	r3, #128
 984 003e 42D0     		beq	.L51
 985 0040 7A68     		ldr	r2, [r7, #4]
 986 0042 8023     		mov	r3, #128
 987 0044 5B00     		lsl	r3, r3, #1
 988 0046 9A42     		cmp	r2, r3
 989 0048 3DD0     		beq	.L51
 990 004a 7A68     		ldr	r2, [r7, #4]
 991 004c 8023     		mov	r3, #128
 992 004e 9B00     		lsl	r3, r3, #2
 993 0050 9A42     		cmp	r2, r3
 994 0052 38D0     		beq	.L51
 995 0054 7A68     		ldr	r2, [r7, #4]
 996 0056 8023     		mov	r3, #128
 997 0058 DB00     		lsl	r3, r3, #3
 998 005a 9A42     		cmp	r2, r3
 999 005c 33D0     		beq	.L51
 1000 005e 7A68     		ldr	r2, [r7, #4]
 1001 0060 8023     		mov	r3, #128
 1002 0062 1B01     		lsl	r3, r3, #4
 1003 0064 9A42     		cmp	r2, r3
 1004 0066 2ED0     		beq	.L51
 1005 0068 7A68     		ldr	r2, [r7, #4]
 1006 006a 8023     		mov	r3, #128
 1007 006c 5B01     		lsl	r3, r3, #5
 1008 006e 9A42     		cmp	r2, r3
 1009 0070 29D0     		beq	.L51
 1010 0072 7A68     		ldr	r2, [r7, #4]
 1011 0074 8023     		mov	r3, #128
 1012 0076 9B01     		lsl	r3, r3, #6
 1013 0078 9A42     		cmp	r2, r3
 1014 007a 24D0     		beq	.L51
 1015 007c 7A68     		ldr	r2, [r7, #4]
 1016 007e 8023     		mov	r3, #128
 1017 0080 DB01     		lsl	r3, r3, #7
 1018 0082 9A42     		cmp	r2, r3
 1019 0084 1FD0     		beq	.L51
 1020 0086 7A68     		ldr	r2, [r7, #4]
 1021 0088 8023     		mov	r3, #128
 1022 008a 1B02     		lsl	r3, r3, #8
 1023 008c 9A42     		cmp	r2, r3
 1024 008e 1AD0     		beq	.L51
 1025 0090 7A68     		ldr	r2, [r7, #4]
 1026 0092 8023     		mov	r3, #128
 1027 0094 5B02     		lsl	r3, r3, #9
 1028 0096 9A42     		cmp	r2, r3
 1029 0098 15D0     		beq	.L51
 1030 009a 7A68     		ldr	r2, [r7, #4]
 1031 009c 8023     		mov	r3, #128
 1032 009e 9B02     		lsl	r3, r3, #10
 1033 00a0 9A42     		cmp	r2, r3
 1034 00a2 10D0     		beq	.L51
 1035 00a4 7A68     		ldr	r2, [r7, #4]
 1036 00a6 8023     		mov	r3, #128
 1037 00a8 DB02     		lsl	r3, r3, #11
 1038 00aa 9A42     		cmp	r2, r3
 1039 00ac 0BD0     		beq	.L51
 1040 00ae 7A68     		ldr	r2, [r7, #4]
 1041 00b0 8023     		mov	r3, #128
 1042 00b2 1B03     		lsl	r3, r3, #12
 1043 00b4 9A42     		cmp	r2, r3
 1044 00b6 06D0     		beq	.L51
 1045 00b8 0D4A     		ldr	r2, .L55
 1046 00ba F423     		mov	r3, #244
 1047 00bc 5B00     		lsl	r3, r3, #1
 1048 00be 101C     		mov	r0, r2
 1049 00c0 191C     		mov	r1, r3
 1050 00c2 FFF7FEFF 		bl	assert_failed
 1051              	.L51:
 489:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 490:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the status of the specified DMA flag */
 491:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if ((DMA1->ISR & DMA_FLAG) != (uint32_t)RESET)
 1052              		.loc 1 491 0 is_stmt 1
 1053 00c6 0B4B     		ldr	r3, .L55+4
 1054 00c8 1B68     		ldr	r3, [r3]
 1055 00ca 7A68     		ldr	r2, [r7, #4]
 1056 00cc 1340     		and	r3, r2
 1057 00ce 04D0     		beq	.L52
 492:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 493:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* DMA_FLAG is set */
 494:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     bitstatus = SET;
 1058              		.loc 1 494 0
 1059 00d0 3B1C     		mov	r3, r7
 1060 00d2 0F33     		add	r3, r3, #15
 1061 00d4 0122     		mov	r2, #1
 1062 00d6 1A70     		strb	r2, [r3]
 1063 00d8 03E0     		b	.L53
 1064              	.L52:
 495:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 496:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 497:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 498:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* DMA_FLAG is reset */
 499:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     bitstatus = RESET;
 1065              		.loc 1 499 0
 1066 00da 3B1C     		mov	r3, r7
 1067 00dc 0F33     		add	r3, r3, #15
 1068 00de 0022     		mov	r2, #0
 1069 00e0 1A70     		strb	r2, [r3]
 1070              	.L53:
 500:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 501:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 502:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Return the DMA_FLAG status */
 503:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   return  bitstatus;
 1071              		.loc 1 503 0
 1072 00e2 3B1C     		mov	r3, r7
 1073 00e4 0F33     		add	r3, r3, #15
 1074 00e6 1B78     		ldrb	r3, [r3]
 504:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 1075              		.loc 1 504 0
 1076 00e8 181C     		mov	r0, r3
 1077 00ea BD46     		mov	sp, r7
 1078 00ec 04B0     		add	sp, sp, #16
 1079              		@ sp needed
 1080 00ee 80BD     		pop	{r7, pc}
 1081              	.L56:
 1082              		.align	2
 1083              	.L55:
 1084 00f0 00000000 		.word	.LC0
 1085 00f4 00000240 		.word	1073872896
 1086              		.cfi_endproc
 1087              	.LFE39:
 1089              		.section	.text.DMA_ClearFlag,"ax",%progbits
 1090              		.align	2
 1091              		.global	DMA_ClearFlag
 1092              		.code	16
 1093              		.thumb_func
 1095              	DMA_ClearFlag:
 1096              	.LFB40:
 505:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 506:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 507:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Clears the DMAy Channelx's pending flags.
 508:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
 509:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *   This parameter can be any combination (for the same DMA) of the following values:
 510:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 511:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 512:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 513:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 514:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 515:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 516:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 517:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 518:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 519:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 520:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 521:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 522:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 523:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 524:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 525:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 526:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 527:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 528:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 529:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 530:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
 531:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note
 532:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    Clearing the Global flag (DMAy_FLAG_GLx) results in clearing all other flags
 533:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    relative to the same channel (Transfer Complete, Half-transfer Complete and
 534:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
 535:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
 536:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 537:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 538:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_ClearFlag(uint32_t DMA_FLAG)
 539:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 1097              		.loc 1 539 0
 1098              		.cfi_startproc
 1099 0000 80B5     		push	{r7, lr}
 1100              		.cfi_def_cfa_offset 8
 1101              		.cfi_offset 7, -8
 1102              		.cfi_offset 14, -4
 1103 0002 82B0     		sub	sp, sp, #8
 1104              		.cfi_def_cfa_offset 16
 1105 0004 00AF     		add	r7, sp, #0
 1106              		.cfi_def_cfa_register 7
 1107 0006 7860     		str	r0, [r7, #4]
 540:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 541:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
 1108              		.loc 1 541 0
 1109 0008 7B68     		ldr	r3, [r7, #4]
 1110 000a 1B0D     		lsr	r3, r3, #20
 1111 000c 1B05     		lsl	r3, r3, #20
 1112 000e 02D1     		bne	.L58
 1113              		.loc 1 541 0 is_stmt 0 discriminator 2
 1114 0010 7B68     		ldr	r3, [r7, #4]
 1115 0012 002B     		cmp	r3, #0
 1116 0014 05D1     		bne	.L59
 1117              	.L58:
 1118              		.loc 1 541 0 discriminator 1
 1119 0016 064A     		ldr	r2, .L60
 1120 0018 064B     		ldr	r3, .L60+4
 1121 001a 101C     		mov	r0, r2
 1122 001c 191C     		mov	r1, r3
 1123 001e FFF7FEFF 		bl	assert_failed
 1124              	.L59:
 542:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 543:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Clear the selected DMA flags */
 544:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA1->IFCR = DMA_FLAG;
 1125              		.loc 1 544 0 is_stmt 1
 1126 0022 054B     		ldr	r3, .L60+8
 1127 0024 7A68     		ldr	r2, [r7, #4]
 1128 0026 5A60     		str	r2, [r3, #4]
 545:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 1129              		.loc 1 545 0
 1130 0028 BD46     		mov	sp, r7
 1131 002a 02B0     		add	sp, sp, #8
 1132              		@ sp needed
 1133 002c 80BD     		pop	{r7, pc}
 1134              	.L61:
 1135 002e C046     		.align	2
 1136              	.L60:
 1137 0030 00000000 		.word	.LC0
 1138 0034 1D020000 		.word	541
 1139 0038 00000240 		.word	1073872896
 1140              		.cfi_endproc
 1141              	.LFE40:
 1143              		.section	.text.DMA_GetITStatus,"ax",%progbits
 1144              		.align	2
 1145              		.global	DMA_GetITStatus
 1146              		.code	16
 1147              		.thumb_func
 1149              	DMA_GetITStatus:
 1150              	.LFB41:
 546:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 547:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 548:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Checks whether the specified DMAy Channelx interrupt has occurred or not.
 549:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check. 
 550:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *   This parameter can be one of the following values:
 551:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 552:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 553:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 554:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 555:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 556:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 557:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 558:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 559:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 560:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 561:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 562:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 563:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 564:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 565:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 566:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 567:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 568:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 569:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 570:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 571:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     
 572:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note
 573:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    The Global interrupt (DMAy_FLAG_GLx) is set whenever any of the other 
 574:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    interrupts relative to the same channel is set (Transfer Complete, 
 575:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    Half-transfer Complete or Transfer Error interrupts: DMAy_IT_TCx, 
 576:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    DMAy_IT_HTx or DMAy_IT_TEx). 
 577:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *      
 578:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
 579:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 580:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** ITStatus DMA_GetITStatus(uint32_t DMA_IT)
 581:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 1151              		.loc 1 581 0
 1152              		.cfi_startproc
 1153 0000 80B5     		push	{r7, lr}
 1154              		.cfi_def_cfa_offset 8
 1155              		.cfi_offset 7, -8
 1156              		.cfi_offset 14, -4
 1157 0002 84B0     		sub	sp, sp, #16
 1158              		.cfi_def_cfa_offset 24
 1159 0004 00AF     		add	r7, sp, #0
 1160              		.cfi_def_cfa_register 7
 1161 0006 7860     		str	r0, [r7, #4]
 582:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ITStatus bitstatus = RESET;
 1162              		.loc 1 582 0
 1163 0008 3B1C     		mov	r3, r7
 1164 000a 0F33     		add	r3, r3, #15
 1165 000c 0022     		mov	r2, #0
 1166 000e 1A70     		strb	r2, [r3]
 583:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 584:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 585:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
 1167              		.loc 1 585 0
 1168 0010 7B68     		ldr	r3, [r7, #4]
 1169 0012 012B     		cmp	r3, #1
 1170 0014 56D0     		beq	.L63
 1171              		.loc 1 585 0 is_stmt 0 discriminator 1
 1172 0016 7B68     		ldr	r3, [r7, #4]
 1173 0018 022B     		cmp	r3, #2
 1174 001a 53D0     		beq	.L63
 1175 001c 7B68     		ldr	r3, [r7, #4]
 1176 001e 042B     		cmp	r3, #4
 1177 0020 50D0     		beq	.L63
 1178 0022 7B68     		ldr	r3, [r7, #4]
 1179 0024 082B     		cmp	r3, #8
 1180 0026 4DD0     		beq	.L63
 1181 0028 7B68     		ldr	r3, [r7, #4]
 1182 002a 102B     		cmp	r3, #16
 1183 002c 4AD0     		beq	.L63
 1184 002e 7B68     		ldr	r3, [r7, #4]
 1185 0030 202B     		cmp	r3, #32
 1186 0032 47D0     		beq	.L63
 1187 0034 7B68     		ldr	r3, [r7, #4]
 1188 0036 402B     		cmp	r3, #64
 1189 0038 44D0     		beq	.L63
 1190 003a 7B68     		ldr	r3, [r7, #4]
 1191 003c 802B     		cmp	r3, #128
 1192 003e 41D0     		beq	.L63
 1193 0040 7A68     		ldr	r2, [r7, #4]
 1194 0042 8023     		mov	r3, #128
 1195 0044 5B00     		lsl	r3, r3, #1
 1196 0046 9A42     		cmp	r2, r3
 1197 0048 3CD0     		beq	.L63
 1198 004a 7A68     		ldr	r2, [r7, #4]
 1199 004c 8023     		mov	r3, #128
 1200 004e 9B00     		lsl	r3, r3, #2
 1201 0050 9A42     		cmp	r2, r3
 1202 0052 37D0     		beq	.L63
 1203 0054 7A68     		ldr	r2, [r7, #4]
 1204 0056 8023     		mov	r3, #128
 1205 0058 DB00     		lsl	r3, r3, #3
 1206 005a 9A42     		cmp	r2, r3
 1207 005c 32D0     		beq	.L63
 1208 005e 7A68     		ldr	r2, [r7, #4]
 1209 0060 8023     		mov	r3, #128
 1210 0062 1B01     		lsl	r3, r3, #4
 1211 0064 9A42     		cmp	r2, r3
 1212 0066 2DD0     		beq	.L63
 1213 0068 7A68     		ldr	r2, [r7, #4]
 1214 006a 8023     		mov	r3, #128
 1215 006c 5B01     		lsl	r3, r3, #5
 1216 006e 9A42     		cmp	r2, r3
 1217 0070 28D0     		beq	.L63
 1218 0072 7A68     		ldr	r2, [r7, #4]
 1219 0074 8023     		mov	r3, #128
 1220 0076 9B01     		lsl	r3, r3, #6
 1221 0078 9A42     		cmp	r2, r3
 1222 007a 23D0     		beq	.L63
 1223 007c 7A68     		ldr	r2, [r7, #4]
 1224 007e 8023     		mov	r3, #128
 1225 0080 DB01     		lsl	r3, r3, #7
 1226 0082 9A42     		cmp	r2, r3
 1227 0084 1ED0     		beq	.L63
 1228 0086 7A68     		ldr	r2, [r7, #4]
 1229 0088 8023     		mov	r3, #128
 1230 008a 1B02     		lsl	r3, r3, #8
 1231 008c 9A42     		cmp	r2, r3
 1232 008e 19D0     		beq	.L63
 1233 0090 7A68     		ldr	r2, [r7, #4]
 1234 0092 8023     		mov	r3, #128
 1235 0094 5B02     		lsl	r3, r3, #9
 1236 0096 9A42     		cmp	r2, r3
 1237 0098 14D0     		beq	.L63
 1238 009a 7A68     		ldr	r2, [r7, #4]
 1239 009c 8023     		mov	r3, #128
 1240 009e 9B02     		lsl	r3, r3, #10
 1241 00a0 9A42     		cmp	r2, r3
 1242 00a2 0FD0     		beq	.L63
 1243 00a4 7A68     		ldr	r2, [r7, #4]
 1244 00a6 8023     		mov	r3, #128
 1245 00a8 DB02     		lsl	r3, r3, #11
 1246 00aa 9A42     		cmp	r2, r3
 1247 00ac 0AD0     		beq	.L63
 1248 00ae 7A68     		ldr	r2, [r7, #4]
 1249 00b0 8023     		mov	r3, #128
 1250 00b2 1B03     		lsl	r3, r3, #12
 1251 00b4 9A42     		cmp	r2, r3
 1252 00b6 05D0     		beq	.L63
 1253 00b8 0D4A     		ldr	r2, .L67
 1254 00ba 0E4B     		ldr	r3, .L67+4
 1255 00bc 101C     		mov	r0, r2
 1256 00be 191C     		mov	r1, r3
 1257 00c0 FFF7FEFF 		bl	assert_failed
 1258              	.L63:
 586:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 587:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the status of the specified DMA interrupt */
 588:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if ((DMA1->ISR & DMA_IT) != (uint32_t)RESET)
 1259              		.loc 1 588 0 is_stmt 1
 1260 00c4 0C4B     		ldr	r3, .L67+8
 1261 00c6 1B68     		ldr	r3, [r3]
 1262 00c8 7A68     		ldr	r2, [r7, #4]
 1263 00ca 1340     		and	r3, r2
 1264 00cc 04D0     		beq	.L64
 589:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 590:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* DMA_IT is set */
 591:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     bitstatus = SET;
 1265              		.loc 1 591 0
 1266 00ce 3B1C     		mov	r3, r7
 1267 00d0 0F33     		add	r3, r3, #15
 1268 00d2 0122     		mov	r2, #1
 1269 00d4 1A70     		strb	r2, [r3]
 1270 00d6 03E0     		b	.L65
 1271              	.L64:
 592:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 593:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 594:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 595:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* DMA_IT is reset */
 596:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     bitstatus = RESET;
 1272              		.loc 1 596 0
 1273 00d8 3B1C     		mov	r3, r7
 1274 00da 0F33     		add	r3, r3, #15
 1275 00dc 0022     		mov	r2, #0
 1276 00de 1A70     		strb	r2, [r3]
 1277              	.L65:
 597:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 598:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Return the DMA_IT status */
 599:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   return  bitstatus;
 1278              		.loc 1 599 0
 1279 00e0 3B1C     		mov	r3, r7
 1280 00e2 0F33     		add	r3, r3, #15
 1281 00e4 1B78     		ldrb	r3, [r3]
 600:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 1282              		.loc 1 600 0
 1283 00e6 181C     		mov	r0, r3
 1284 00e8 BD46     		mov	sp, r7
 1285 00ea 04B0     		add	sp, sp, #16
 1286              		@ sp needed
 1287 00ec 80BD     		pop	{r7, pc}
 1288              	.L68:
 1289 00ee C046     		.align	2
 1290              	.L67:
 1291 00f0 00000000 		.word	.LC0
 1292 00f4 49020000 		.word	585
 1293 00f8 00000240 		.word	1073872896
 1294              		.cfi_endproc
 1295              	.LFE41:
 1297              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 1298              		.align	2
 1299              		.global	DMA_ClearITPendingBit
 1300              		.code	16
 1301              		.thumb_func
 1303              	DMA_ClearITPendingBit:
 1304              	.LFB42:
 601:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 602:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 603:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Clears the DMAy Channelx's interrupt pending bits.
 604:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
 605:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *   This parameter can be any combination (for the same DMA) of the following values:
 606:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 607:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 608:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 609:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 610:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 611:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 612:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 613:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 614:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 615:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 616:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 617:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 618:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 619:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 620:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 621:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 622:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 623:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 624:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 625:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 626:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     
 627:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note
 628:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    Clearing the Global interrupt (DMAy_IT_GLx) results in clearing all other 
 629:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    interrupts relative to the same channel (Transfer Complete, Half-transfer 
 630:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    Complete and Transfer Error interrupts: DMAy_IT_TCx, DMAy_IT_HTx and 
 631:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *    DMAy_IT_TEx).  
 632:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *        
 633:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 634:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 635:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_ClearITPendingBit(uint32_t DMA_IT)
 636:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 1305              		.loc 1 636 0
 1306              		.cfi_startproc
 1307 0000 80B5     		push	{r7, lr}
 1308              		.cfi_def_cfa_offset 8
 1309              		.cfi_offset 7, -8
 1310              		.cfi_offset 14, -4
 1311 0002 82B0     		sub	sp, sp, #8
 1312              		.cfi_def_cfa_offset 16
 1313 0004 00AF     		add	r7, sp, #0
 1314              		.cfi_def_cfa_register 7
 1315 0006 7860     		str	r0, [r7, #4]
 637:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 638:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
 1316              		.loc 1 638 0
 1317 0008 7B68     		ldr	r3, [r7, #4]
 1318 000a 1B0D     		lsr	r3, r3, #20
 1319 000c 1B05     		lsl	r3, r3, #20
 1320 000e 02D1     		bne	.L70
 1321              		.loc 1 638 0 is_stmt 0 discriminator 2
 1322 0010 7B68     		ldr	r3, [r7, #4]
 1323 0012 002B     		cmp	r3, #0
 1324 0014 05D1     		bne	.L71
 1325              	.L70:
 1326              		.loc 1 638 0 discriminator 1
 1327 0016 064A     		ldr	r2, .L72
 1328 0018 064B     		ldr	r3, .L72+4
 1329 001a 101C     		mov	r0, r2
 1330 001c 191C     		mov	r1, r3
 1331 001e FFF7FEFF 		bl	assert_failed
 1332              	.L71:
 639:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 640:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Clear the selected DMA interrupt pending bits */
 641:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA1->IFCR = DMA_IT;
 1333              		.loc 1 641 0 is_stmt 1
 1334 0022 054B     		ldr	r3, .L72+8
 1335 0024 7A68     		ldr	r2, [r7, #4]
 1336 0026 5A60     		str	r2, [r3, #4]
 642:../../ext-src/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 1337              		.loc 1 642 0
 1338 0028 BD46     		mov	sp, r7
 1339 002a 02B0     		add	sp, sp, #8
 1340              		@ sp needed
 1341 002c 80BD     		pop	{r7, pc}
 1342              	.L73:
 1343 002e C046     		.align	2
 1344              	.L72:
 1345 0030 00000000 		.word	.LC0
 1346 0034 7E020000 		.word	638
 1347 0038 00000240 		.word	1073872896
 1348              		.cfi_endproc
 1349              	.LFE42:
 1351              		.text
 1352              	.Letext0:
 1353              		.file 2 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/machine/_default_types
 1354              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20140609/arm-none-eabi/include/stdint.h"
 1355              		.file 4 "../../ext-src/CMSIS/ST/STM32F0xx/Include/stm32f0xx.h"
 1356              		.file 5 "../../ext-src/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_dma.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_dma.c
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:18     .rodata:0000000000000000 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:23     .text.DMA_DeInit:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:28     .text.DMA_DeInit:0000000000000000 DMA_DeInit
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:172    .text.DMA_DeInit:00000000000000d8 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:184    .text.DMA_Init:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:189    .text.DMA_Init:0000000000000000 DMA_Init
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:476    .text.DMA_Init:00000000000001d4 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:488    .text.DMA_StructInit:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:493    .text.DMA_StructInit:0000000000000000 DMA_StructInit
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:559    .text.DMA_Cmd:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:564    .text.DMA_Cmd:0000000000000000 DMA_Cmd
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:656    .text.DMA_Cmd:000000000000008c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:667    .text.DMA_SetCurrDataCounter:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:672    .text.DMA_SetCurrDataCounter:0000000000000000 DMA_SetCurrDataCounter
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:730    .text.DMA_SetCurrDataCounter:0000000000000054 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:740    .text.DMA_GetCurrDataCounter:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:745    .text.DMA_GetCurrDataCounter:0000000000000000 DMA_GetCurrDataCounter
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:800    .text.DMA_GetCurrDataCounter:000000000000004c $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:810    .text.DMA_ITConfig:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:815    .text.DMA_ITConfig:0000000000000000 DMA_ITConfig
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:926    .text.DMA_ITConfig:00000000000000a8 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:936    .text.DMA_GetFlagStatus:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:941    .text.DMA_GetFlagStatus:0000000000000000 DMA_GetFlagStatus
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:1084   .text.DMA_GetFlagStatus:00000000000000f0 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:1090   .text.DMA_ClearFlag:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:1095   .text.DMA_ClearFlag:0000000000000000 DMA_ClearFlag
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:1137   .text.DMA_ClearFlag:0000000000000030 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:1144   .text.DMA_GetITStatus:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:1149   .text.DMA_GetITStatus:0000000000000000 DMA_GetITStatus
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:1291   .text.DMA_GetITStatus:00000000000000f0 $d
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:1298   .text.DMA_ClearITPendingBit:0000000000000000 $t
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:1303   .text.DMA_ClearITPendingBit:0000000000000000 DMA_ClearITPendingBit
/var/folders/2L/2LLjjuM0EOeRSH4ujURun++++TI/-Tmp-//cchNvcOb.s:1345   .text.DMA_ClearITPendingBit:0000000000000030 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.9252205565be9cbc11fa49e4ee70d556
                           .group:0000000000000000 wm4.stm32f0xx.h.54.664bd2bdbb20859ae6a5c66c16d4ee5a
                           .group:0000000000000000 wm4.core_cm0.h.32.41c1bd92799bc17b3c8424dd5c622427
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cm0.h.130.eea61816b4c7004601b0935484a214ea
                           .group:0000000000000000 wm4.stm32f0xx.h.226.38dd78fa77e64690c744af5bf4bffc7b
                           .group:0000000000000000 wm4.stm32f0xx_cec.h.80.d17e4ea90700c26010f339885be92ac0
                           .group:0000000000000000 wm4.stm32f0xx_crc.h.31.48fbd36307d848f32978567b16118557
                           .group:0000000000000000 wm4.stm32f0xx_comp.h.31.a640b8c7673f3e181cfd826dce70b6e2
                           .group:0000000000000000 wm4.stm32f0xx_dac.h.31.3e178ad0888f70df8fbc4c999d855b3e
                           .group:0000000000000000 wm4.stm32f0xx_dbgmcu.h.31.282da985c6ed8dd33417cf074ecfdf63
                           .group:0000000000000000 wm4.stm32f0xx_dma.h.31.68def2497939cb34c3f292e0c507724a
                           .group:0000000000000000 wm4.stm32f0xx_exti.h.31.81a00331ef3e014ed4dafe9e9baacca3
                           .group:0000000000000000 wm4.stm32f0xx_flash.h.31.60d92ed32439cfb92572ec2678e2be21
                           .group:0000000000000000 wm4.stm32f0xx_gpio.h.31.df5c3a39b21131ade11d30b7e1580be6
                           .group:0000000000000000 wm4.stm32f0xx_syscfg.h.31.f98c72ea26c47fccafefd977b75786d3
                           .group:0000000000000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:0000000000000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:0000000000000000 wm4.stm32f0xx_pwr.h.31.5b469253a65db741700e0b45f396c99d
                           .group:0000000000000000 wm4.stm32f0xx_rcc.h.31.bc2f5dd9e2f518d727a1e0ce497a42e6
                           .group:0000000000000000 wm4.stm32f0xx_rtc.h.31.bc9d631913a743746cf54f04d4efbf7b
                           .group:0000000000000000 wm4.stm32f0xx_spi.h.31.5b4d0d36c03feb5b081143cdba79744d
                           .group:0000000000000000 wm4.stm32f0xx_tim.h.31.21b4d7229c685868595d751757b51e1b
                           .group:0000000000000000 wm4.stm32f0xx_usart.h.31.8abae79a1c4f266d08faf5996370b48f
                           .group:0000000000000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:0000000000000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6

UNDEFINED SYMBOLS
assert_failed
